// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  coshint

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 7.1054273576010019e-15 at index 87
// max(|f - f_GSL| / |f_GSL|): 7.2913183894502401e-16
// mean(f - f_GSL): 1.1046719095020308e-16
// variance(f - f_GSL): 1.3691351989090424e-31
// stddev(f - f_GSL): 3.7001826967178827e-16
const testcase_coshint<double>
data001[100] =
{
  { -2.4178915435446742, 0.050000000000000003, 0.0 },
  { -1.7228683861943335, 0.10000000000000001, 0.0 },
  { -1.3142740439093348, 0.15000000000000002, 0.0 },
  { -1.0222055660431466, 0.20000000000000001, 0.0 },
  { -0.79341294955282593, 0.25000000000000000, 0.0 },
  { -0.60417259547083613, 0.30000000000000004, 0.0 },
  { -0.44182471826964104, 0.35000000000000003, 0.0 },
  { -0.29880745012316878, 0.40000000000000002, 0.0 },
  { -0.17023795548835208, 0.45000000000000001, 0.0 },
  { -0.052776844956493568, 0.50000000000000000, 0.0 },
  { 0.055963287834896347, 0.55000000000000004, 0.0 },
  { 0.15775089337397888, 0.60000000000000009, 0.0 },
  { 0.25393474614798184, 0.65000000000000002, 0.0 },
  { 0.34556917569539081, 0.70000000000000007, 0.0 },
  { 0.43349600154499601, 0.75000000000000000, 0.0 },
  { 0.51839998483339156, 0.80000000000000004, 0.0 },
  { 0.60084745386139637, 0.85000000000000009, 0.0 },
  { 0.68131388718543384, 0.90000000000000002, 0.0 },
  { 0.76020404410697795, 0.95000000000000007, 0.0 },
  { 0.83786694098020820, 1.0000000000000000, 0.0 },
  { 0.91460718543973407, 1.0500000000000000, 0.0 },
  { 0.99069368751368181, 1.1000000000000001, 0.0 },
  { 1.0663664491128155, 1.1500000000000001, 0.0 },
  { 1.1418419241705948, 1.2000000000000002, 0.0 },
  { 1.2173173009147831, 1.2500000000000000, 0.0 },
  { 1.2929739611914479, 1.3000000000000000, 0.0 },
  { 1.3689803043922055, 1.3500000000000001, 0.0 },
  { 1.4454940757896442, 1.4000000000000001, 0.0 },
  { 1.5226643047593846, 1.4500000000000002, 0.0 },
  { 1.6006329333615832, 1.5000000000000000, 0.0 },
  { 1.6795361973166147, 1.5500000000000000, 0.0 },
  { 1.7595058076609651, 1.6000000000000001, 0.0 },
  { 1.8406699710103966, 1.6500000000000001, 0.0 },
  { 1.9231542784768263, 1.7000000000000002, 0.0 },
  { 2.0070824872361599, 1.7500000000000000, 0.0 },
  { 2.0925772140620329, 1.8000000000000000, 0.0 },
  { 2.1797605564878508, 1.8500000000000001, 0.0 },
  { 2.2687546543895261, 1.9000000000000001, 0.0 },
  { 2.3596822025109412, 1.9500000000000002, 0.0 },
  { 2.4526669226469147, 2.0000000000000000, 0.0 },
  { 2.5478340027513804, 2.0500000000000003, 0.0 },
  { 2.6453105090736941, 2.1000000000000001, 0.0 },
  { 2.7452257764837804, 2.1499999999999999, 0.0 },
  { 2.8477117813812245, 2.2000000000000002, 0.0 },
  { 2.9529035009589468, 2.2500000000000000, 0.0 },
  { 3.0609392620809430, 2.3000000000000003, 0.0 },
  { 3.1719610826139113, 2.3500000000000001, 0.0 },
  { 3.2861150077073731, 2.4000000000000004, 0.0 },
  { 3.4035514432323652, 2.4500000000000002, 0.0 },
  { 3.5244254883541659, 2.5000000000000000, 0.0 },
  { 3.6488972690210413, 2.5500000000000003, 0.0 },
  { 3.7771322739917585, 2.6000000000000001, 0.0 },
  { 3.9093016948938448, 2.6500000000000004, 0.0 },
  { 4.0455827716977266, 2.7000000000000002, 0.0 },
  { 4.1861591449053011, 2.7500000000000000, 0.0 },
  { 4.3312212156819756, 2.8000000000000003, 0.0 },
  { 4.4809665151063491, 2.8500000000000001, 0.0 },
  { 4.6356000836695452, 2.9000000000000004, 0.0 },
  { 4.7953348621247249, 2.9500000000000002, 0.0 },
  { 4.9603920947656093, 3.0000000000000000, 0.0 },
  { 5.1310017461992228, 3.0500000000000003, 0.0 },
  { 5.3074029326720762, 3.1000000000000001, 0.0 },
  { 5.4898443690095498, 3.1500000000000004, 0.0 },
  { 5.6785848322346908, 3.2000000000000002, 0.0 },
  { 5.8738936429447177, 3.2500000000000000, 0.0 },
  { 6.0760511655404130, 3.3000000000000003, 0.0 },
  { 6.2853493284252862, 3.3500000000000001, 0.0 },
  { 6.5020921653174417, 3.4000000000000004, 0.0 },
  { 6.7265963788471455, 3.4500000000000002, 0.0 },
  { 6.9591919276473932, 3.5000000000000000, 0.0 },
  { 7.2002226381826366, 3.5500000000000003, 0.0 },
  { 7.4500468426026476, 3.6000000000000001, 0.0 },
  { 7.7090380439539183, 3.6500000000000004, 0.0 },
  { 7.9775856101300491, 3.7000000000000002, 0.0 },
  { 8.2560954979953447, 3.7500000000000000, 0.0 },
  { 8.5449910091722021, 3.8000000000000003, 0.0 },
  { 8.8447135790429829, 3.8500000000000001, 0.0 },
  { 9.1557236005809095, 3.9000000000000004, 0.0 },
  { 9.4785012846921930, 3.9500000000000002, 0.0 },
  { 9.8135475588231831, 4.0000000000000000, 0.0 },
  { 10.161385005661971, 4.0499999999999998, 0.0 },
  { 10.522558843843560, 4.1000000000000005, 0.0 },
  { 10.897637952651852, 4.1500000000000004, 0.0 },
  { 11.287215942800071, 4.2000000000000002, 0.0 },
  { 11.691912275464240, 4.2500000000000000, 0.0 },
  { 12.112373431842203, 4.2999999999999998, 0.0 },
  { 12.549274135613386, 4.3500000000000005, 0.0 },
  { 13.003318630782250, 4.4000000000000004, 0.0 },
  { 13.475242017501849, 4.4500000000000002, 0.0 },
  { 13.965811648592432, 4.5000000000000000, 0.0 },
  { 14.475828589594851, 4.5499999999999998, 0.0 },
  { 15.006129145329233, 4.6000000000000005, 0.0 },
  { 15.557586456066295, 4.6500000000000004, 0.0 },
  { 16.131112166562627, 4.7000000000000002, 0.0 },
  { 16.727658171361526, 4.7500000000000000, 0.0 },
  { 17.348218439919233, 4.8000000000000007, 0.0 },
  { 17.993830925281493, 4.8500000000000005, 0.0 },
  { 18.665579560209142, 4.9000000000000004, 0.0 },
  { 19.364596344832588, 4.9500000000000002, 0.0 },
  { 20.092063530105950, 5.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_coshint<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::coshint(data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
