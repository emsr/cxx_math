// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  clausen_cl
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for m=2.
// max(|f - f_GSL|): 8.3266726846886741e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 1.2380848161468130e-14
// mean(f - f_GSL): -1.8789560433046204e-35
// variance(f - f_GSL): 1.7766703736972251e-32
// stddev(f - f_GSL): 1.3329179921125024e-16
const testcase_clausen_cl<double>
data001[41] =
{
  { 0.39071647608680155, 2, -10.000000000000000, 0.0 },
  { 0.052122207190274598, 2, -9.5000000000000000, 0.0 },
  { -0.29122555781958770, 2, -9.0000000000000000, 0.0 },
  { -0.60731897904008003, 2, -8.5000000000000000, 0.0 },
  { -0.86027963733231172, 2, -8.0000000000000000, 0.0 },
  { -1.0032427051361714, 2, -7.5000000000000000, 0.0 },
  { -0.96059820624535719, 2, -7.0000000000000000, 0.0 },
  { -0.54840355866757695, 2, -6.5000000000000000, 0.0 },
  { 0.64078266570172315, 2, -6.0000000000000000, 0.0 },
  { 0.98127747477447369, 2, -5.5000000000000000, 0.0 },
  { 0.99282013254695667, 2, -5.0000000000000000, 0.0 },
  { 0.83183922082321915, 2, -4.5000000000000000, 0.0 },
  { 0.56814394442986960, 2, -4.0000000000000000, 0.0 },
  { 0.24650453023476912, 2, -3.5000000000000000, 0.0 },
  { -0.098026209391301800, 2, -3.0000000000000000, 0.0 },
  { -0.43359820323553289, 2, -2.5000000000000000, 0.0 },
  { -0.72714605086327944, 2, -2.0000000000000000, 0.0 },
  { -0.93921859275409214, 2, -1.5000000000000000, 0.0 },
  { -1.0139591323607684, 2, -1.0000000000000000, 0.0 },
  { -0.84831187770367933, 2, -0.50000000000000000, 0.0 },
  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { 0.84831187770367933, 2, 0.50000000000000000, 0.0 },
  { 1.0139591323607684, 2, 1.0000000000000000, 0.0 },
  { 0.93921859275409214, 2, 1.5000000000000000, 0.0 },
  { 0.72714605086327944, 2, 2.0000000000000000, 0.0 },
  { 0.43359820323553289, 2, 2.5000000000000000, 0.0 },
  { 0.098026209391301800, 2, 3.0000000000000000, 0.0 },
  { -0.24650453023476912, 2, 3.5000000000000000, 0.0 },
  { -0.56814394442986960, 2, 4.0000000000000000, 0.0 },
  { -0.83183922082321915, 2, 4.5000000000000000, 0.0 },
  { -0.99282013254695667, 2, 5.0000000000000000, 0.0 },
  { -0.98127747477447369, 2, 5.5000000000000000, 0.0 },
  { -0.64078266570172315, 2, 6.0000000000000000, 0.0 },
  { 0.54840355866757695, 2, 6.5000000000000000, 0.0 },
  { 0.96059820624535719, 2, 7.0000000000000000, 0.0 },
  { 1.0032427051361714, 2, 7.5000000000000000, 0.0 },
  { 0.86027963733231172, 2, 8.0000000000000000, 0.0 },
  { 0.60731897904008003, 2, 8.5000000000000000, 0.0 },
  { 0.29122555781958770, 2, 9.0000000000000000, 0.0 },
  { -0.052122207190274598, 2, 9.5000000000000000, 0.0 },
  { -0.39071647608680155, 2, 10.000000000000000, 0.0 },
};
const double toler001 = 1.0000000000000008e-12;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_clausen_cl<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::clausen_cl(data[i].m, data[i].w);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
