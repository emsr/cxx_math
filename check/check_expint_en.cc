// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  expint
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_expint_en<double>
data001[50] =
{
  { 0.36787944117144228, 0, 1.0000000000000000, 0.0 },
  { 0.067667641618306351, 0, 2.0000000000000000, 0.0 },
  { 0.016595689455954649, 0, 3.0000000000000000, 0.0 },
  { 0.0045789097221835455, 0, 4.0000000000000000, 0.0 },
  { 0.0013475893998170934, 0, 5.0000000000000000, 0.0 },
  { 0.00041312536277772640, 0, 6.0000000000000000, 0.0 },
  { 0.00013026885222207376, 0, 7.0000000000000000, 0.0 },
  { 4.1932828487813982e-05, 0, 8.0000000000000000, 0.0 },
  { 1.3712200454075507e-05, 0, 9.0000000000000000, 0.0 },
  { 4.5399929762484844e-06, 0, 10.000000000000000, 0.0 },
  { 1.5183364354768781e-06, 0, 11.000000000000000, 0.0 },
  { 5.1201769611068419e-07, 0, 12.000000000000000, 0.0 },
  { 1.7387149284469648e-07, 0, 13.000000000000000, 0.0 },
  { 5.9394908507397704e-08, 0, 14.000000000000000, 0.0 },
  { 2.0393488033455051e-08, 0, 15.000000000000000, 0.0 },
  { 7.0334484199536948e-09, 0, 16.000000000000000, 0.0 },
  { 2.4352574816383330e-09, 0, 17.000000000000000, 0.0 },
  { 8.4610998581736831e-10, 0, 18.000000000000000, 0.0 },
  { 2.9488402302827724e-10, 0, 19.000000000000000, 0.0 },
  { 1.0305768112192790e-10, 0, 20.000000000000000, 0.0 },
  { 3.6107430609104320e-11, 0, 21.000000000000000, 0.0 },
  { 1.2679400422131475e-11, 0, 22.000000000000000, 0.0 },
  { 4.4616867963921261e-12, 0, 23.000000000000000, 0.0 },
  { 1.5729727267829574e-12, 0, 24.000000000000000, 0.0 },
  { 5.5551775459856082e-13, 0, 25.000000000000000, 0.0 },
  { 1.9650342415628174e-13, 0, 26.000000000000000, 0.0 },
  { 6.9612178390336421e-14, 0, 27.000000000000000, 0.0 },
  { 2.4694286096215012e-14, 0, 28.000000000000000, 0.0 },
  { 8.7712608530238714e-15, 0, 29.000000000000000, 0.0 },
  { 3.1192076562800582e-15, 0, 30.000000000000000, 0.0 },
  { 1.1104764866032181e-15, 0, 31.000000000000000, 0.0 },
  { 3.9575517340919299e-16, 0, 32.000000000000000, 0.0 },
  { 1.4117836803343630e-16, 0, 33.000000000000000, 0.0 },
  { 5.0409071515941562e-17, 0, 34.000000000000000, 0.0 },
  { 1.8014619314705684e-17, 0, 35.000000000000000, 0.0 },
  { 6.4431189728988045e-18, 0, 36.000000000000000, 0.0 },
  { 2.3062290880389364e-18, 0, 37.000000000000000, 0.0 },
  { 8.2608757685474463e-19, 0, 38.000000000000000, 0.0 },
  { 2.9610831212860992e-19, 0, 39.000000000000000, 0.0 },
  { 1.0620885638228973e-19, 0, 40.000000000000000, 0.0 },
  { 3.8119077788658265e-20, 0, 41.000000000000000, 0.0 },
  { 1.3689338724508477e-20, 0, 42.000000000000000, 0.0 },
  { 4.9189093897466988e-21, 0, 43.000000000000000, 0.0 },
  { 1.7684391457122264e-21, 0, 44.000000000000000, 0.0 },
  { 6.3611524012208750e-22, 0, 45.000000000000000, 0.0 },
  { 2.2892646429464809e-22, 0, 46.000000000000000, 0.0 },
  { 8.2425481461429511e-23, 0, 47.000000000000000, 0.0 },
  { 2.9690918390436151e-23, 0, 48.000000000000000, 0.0 },
  { 1.0699766659925436e-23, 0, 49.000000000000000, 0.0 },
  { 3.8574996959278354e-24, 0, 50.000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 4.9960036108132044e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 2.2772878171680836e-15
// mean(f - f_GSL): -1.1295166444684511e-17
// variance(f - f_GSL): 2.6568260102691987e-36
// stddev(f - f_GSL): 1.6299773036055438e-18
const testcase_expint_en<double>
data002[50] =
{
  { 0.21938393439552029, 1, 1.0000000000000000, 0.0 },
  { 0.048900510708061125, 1, 2.0000000000000000, 0.0 },
  { 0.013048381094197037, 1, 3.0000000000000000, 0.0 },
  { 0.0037793524098489063, 1, 4.0000000000000000, 0.0 },
  { 0.0011482955912753257, 1, 5.0000000000000000, 0.0 },
  { 0.00036008245216265862, 1, 6.0000000000000000, 0.0 },
  { 0.00011548173161033820, 1, 7.0000000000000000, 0.0 },
  { 3.7665622843924906e-05, 1, 8.0000000000000000, 0.0 },
  { 1.2447354178006272e-05, 1, 9.0000000000000000, 0.0 },
  { 4.1569689296853246e-06, 1, 10.000000000000000, 0.0 },
  { 1.4003003042474418e-06, 1, 11.000000000000000, 0.0 },
  { 4.7510818246724931e-07, 1, 12.000000000000000, 0.0 },
  { 1.6218662188014328e-07, 1, 13.000000000000000, 0.0 },
  { 5.5656311111451816e-08, 1, 14.000000000000000, 0.0 },
  { 1.9186278921478670e-08, 1, 15.000000000000000, 0.0 },
  { 6.6404872494410427e-09, 1, 16.000000000000000, 0.0 },
  { 2.3064319898216543e-09, 1, 17.000000000000000, 0.0 },
  { 8.0360903448286769e-10, 1, 18.000000000000000, 0.0 },
  { 2.8078290970607954e-10, 1, 19.000000000000000, 0.0 },
  { 9.8355252906498815e-11, 1, 20.000000000000000, 0.0 },
  { 3.4532012671467559e-11, 1, 21.000000000000000, 0.0 },
  { 1.2149378956204371e-11, 1, 22.000000000000000, 0.0 },
  { 4.2826847956656722e-12, 1, 23.000000000000000, 0.0 },
  { 1.5123058939997059e-12, 1, 24.000000000000000, 0.0 },
  { 5.3488997553402167e-13, 1, 25.000000000000000, 0.0 },
  { 1.8946858856749785e-13, 1, 26.000000000000000, 0.0 },
  { 6.7206374352620390e-14, 1, 27.000000000000000, 0.0 },
  { 2.3869415119337330e-14, 1, 28.000000000000000, 0.0 },
  { 8.4877597783535634e-15, 1, 29.000000000000000, 0.0 },
  { 3.0215520106888124e-15, 1, 30.000000000000000, 0.0 },
  { 1.0767670386162381e-15, 1, 31.000000000000000, 0.0 },
  { 3.8409618012250671e-16, 1, 32.000000000000000, 0.0 },
  { 1.3713843484487468e-16, 1, 33.000000000000000, 0.0 },
  { 4.9006761183927874e-17, 1, 34.000000000000000, 0.0 },
  { 1.7527059389947371e-17, 1, 35.000000000000000, 0.0 },
  { 6.2733390097622421e-18, 1, 36.000000000000000, 0.0 },
  { 2.2470206975885710e-18, 1, 37.000000000000000, 0.0 },
  { 8.0541069142907499e-19, 1, 38.000000000000000, 0.0 },
  { 2.8887793015227007e-19, 1, 39.000000000000000, 0.0 },
  { 1.0367732614516570e-19, 1, 40.000000000000000, 0.0 },
  { 3.7231667764599780e-20, 1, 41.000000000000000, 0.0 },
  { 1.3377908810011775e-20, 1, 42.000000000000000, 0.0 },
  { 4.8094965569500181e-21, 1, 43.000000000000000, 0.0 },
  { 1.7299598742816476e-21, 1, 44.000000000000000, 0.0 },
  { 6.2256908094623848e-22, 1, 45.000000000000000, 0.0 },
  { 2.2415317597442998e-22, 1, 46.000000000000000, 0.0 },
  { 8.0741978427258127e-23, 1, 47.000000000000000, 0.0 },
  { 2.9096641904058423e-23, 1, 48.000000000000000, 0.0 },
  { 1.0489811642368024e-23, 1, 49.000000000000000, 0.0 },
  { 3.7832640295504591e-24, 1, 50.000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_GSL|): 3.3306690738754696e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 5.5651352019628354e-15
// mean(f - f_GSL): 6.4470666718297251e-18
// variance(f - f_GSL): 8.6556994316987939e-37
// stddev(f - f_GSL): 9.3036011477807857e-19
const testcase_expint_en<double>
data003[50] =
{
  { 0.14849550677592199, 2, 1.0000000000000000, 0.0 },
  { 0.037534261820490453, 2, 2.0000000000000000, 0.0 },
  { 0.010641925085272834, 2, 3.0000000000000000, 0.0 },
  { 0.0031982292493385571, 2, 4.0000000000000000, 0.0 },
  { 0.00099646904270883803, 2, 5.0000000000000000, 0.0 },
  { 0.00031825746369040699, 2, 6.0000000000000000, 0.0 },
  { 0.00010350984428214886, 2, 7.0000000000000000, 0.0 },
  { 3.4137645151112602e-05, 2, 8.0000000000000000, 0.0 },
  { 1.1383616484623112e-05, 2, 9.0000000000000000, 0.0 },
  { 3.8302404656316010e-06, 2, 10.000000000000000, 0.0 },
  { 1.2983974435237978e-06, 2, 11.000000000000000, 0.0 },
  { 4.4291416372121833e-07, 2, 12.000000000000000, 0.0 },
  { 1.5190332253919170e-07, 2, 13.000000000000000, 0.0 },
  { 5.2340363543242461e-08, 2, 14.000000000000000, 0.0 },
  { 1.8108136679645747e-08, 2, 15.000000000000000, 0.0 },
  { 6.2873787282024337e-09, 2, 16.000000000000000, 0.0 },
  { 2.1900333608835379e-09, 2, 17.000000000000000, 0.0 },
  { 7.6501712402101006e-10, 2, 18.000000000000000, 0.0 },
  { 2.6792115312175647e-10, 2, 19.000000000000000, 0.0 },
  { 9.4048564308581459e-11, 2, 20.000000000000000, 0.0 },
  { 3.3083776690371931e-11, 2, 21.000000000000000, 0.0 },
  { 1.1660472250396311e-11, 2, 22.000000000000000, 0.0 },
  { 4.1170460167084363e-12, 2, 23.000000000000000, 0.0 },
  { 1.4560039867980368e-12, 2, 24.000000000000000, 0.0 },
  { 5.1569447661347915e-13, 2, 25.000000000000000, 0.0 },
  { 1.8290572530838088e-13, 2, 26.000000000000000, 0.0 },
  { 6.4956709018332661e-14, 2, 27.000000000000000, 0.0 },
  { 2.3096387352575056e-14, 2, 28.000000000000000, 0.0 },
  { 8.2215311654389221e-15, 2, 29.000000000000000, 0.0 },
  { 2.9296693677373776e-15, 2, 30.000000000000000, 0.0 },
  { 1.0449928875963818e-15, 2, 31.000000000000000, 0.0 },
  { 3.7308778517396071e-16, 2, 32.000000000000000, 0.0 },
  { 1.3331779522253369e-16, 2, 33.000000000000000, 0.0 },
  { 4.7678551288465333e-17, 2, 34.000000000000000, 0.0 },
  { 1.7064597366540892e-17, 2, 35.000000000000000, 0.0 },
  { 6.1120786729162448e-18, 2, 36.000000000000000, 0.0 },
  { 2.1907104466635215e-18, 2, 37.000000000000000, 0.0 },
  { 7.8572164617544646e-19, 2, 38.000000000000000, 0.0 },
  { 2.8198489707725311e-19, 2, 39.000000000000000, 0.0 },
  { 1.0126120948496098e-19, 2, 40.000000000000000, 0.0 },
  { 3.6383810986397753e-20, 2, 41.000000000000000, 0.0 },
  { 1.3080056408861422e-20, 2, 42.000000000000000, 0.0 },
  { 4.7047518102572716e-21, 2, 43.000000000000000, 0.0 },
  { 1.6930879429454662e-21, 2, 44.000000000000000, 0.0 },
  { 6.0957716291320603e-22, 2, 45.000000000000000, 0.0 },
  { 2.1957126273003378e-22, 2, 46.000000000000000, 0.0 },
  { 7.9124642606054812e-23, 2, 47.000000000000000, 0.0 },
  { 2.8525271346130738e-23, 2, 48.000000000000000, 0.0 },
  { 1.0287795860313223e-23, 2, 49.000000000000000, 0.0 },
  { 3.7117833188688360e-24, 2, 50.000000000000000, 0.0 },
};
const double toler003 = 5.0000000000000039e-13;

// Test data for n=3.
// max(|f - f_GSL|): 9.0205620750793969e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 8.2235393397736257e-15
// mean(f - f_GSL): -1.8755672428852760e-17
// variance(f - f_GSL): 7.3255986726036572e-36
// stddev(f - f_GSL): 2.7065843183990514e-18
const testcase_expint_en<double>
data004[50] =
{
  { 0.10969196719776027, 3, 1.0000000000000000, 0.0 },
  { 0.030133379797815864, 3, 2.0000000000000000, 0.0 },
  { 0.0089306465560227127, 3, 3.0000000000000000, 0.0 },
  { 0.0027613609456899790, 3, 4.0000000000000000, 0.0 },
  { 0.00087780089277063778, 3, 5.0000000000000000, 0.0 },
  { 0.00028460369726195973, 3, 6.0000000000000000, 0.0 },
  { 9.3656527789737803e-05, 3, 7.0000000000000000, 0.0 },
  { 3.1180733346805438e-05, 3, 8.0000000000000000, 0.0 },
  { 1.0478627862535826e-05, 3, 9.0000000000000000, 0.0 },
  { 3.5487625530843850e-06, 3, 10.000000000000000, 0.0 },
  { 1.2096644557419333e-06, 3, 11.000000000000000, 0.0 },
  { 4.1462119433680262e-07, 3, 12.000000000000000, 0.0 },
  { 1.4279310698578191e-07, 3, 13.000000000000000, 0.0 },
  { 4.9381814749087171e-08, 3, 14.000000000000000, 0.0 },
  { 1.7140135153569823e-08, 3, 15.000000000000000, 0.0 },
  { 5.9685575340101173e-09, 3, 16.000000000000000, 0.0 },
  { 2.0844050264157390e-09, 3, 17.000000000000000, 0.0 },
  { 7.2983575616723740e-10, 3, 18.000000000000000, 0.0 },
  { 2.5614726411194733e-10, 3, 19.000000000000000, 0.0 },
  { 9.0091168133464168e-11, 3, 20.000000000000000, 0.0 },
  { 3.1748366146690879e-11, 3, 21.000000000000000, 0.0 },
  { 1.1208209889087127e-11, 3, 22.000000000000000, 0.0 },
  { 3.9633689663624772e-12, 3, 23.000000000000000, 0.0 },
  { 1.4036248798190157e-12, 3, 24.000000000000000, 0.0 },
  { 4.9779097481352146e-13, 3, 25.000000000000000, 0.0 },
  { 1.7677008502270601e-13, 3, 26.000000000000000, 0.0 },
  { 6.2848836522054364e-14, 3, 27.000000000000000, 0.0 },
  { 2.2370582410960035e-14, 3, 28.000000000000000, 0.0 },
  { 7.9710804699810871e-15, 3, 29.000000000000000, 0.0 },
  { 2.8430743281403285e-15, 3, 30.000000000000000, 0.0 },
  { 1.0149957846060153e-15, 3, 31.000000000000000, 0.0 },
  { 3.6267821176369822e-16, 3, 32.000000000000000, 0.0 },
  { 1.2969945137989316e-16, 3, 33.000000000000000, 0.0 },
  { 4.6418843867099052e-17, 3, 34.000000000000000, 0.0 },
  { 1.6625384092883391e-17, 3, 35.000000000000000, 0.0 },
  { 5.9587253996861389e-18, 3, 36.000000000000000, 0.0 },
  { 2.1370948654451499e-18, 3, 37.000000000000000, 0.0 },
  { 7.6695268290665692e-19, 3, 38.000000000000000, 0.0 },
  { 2.7540659350147757e-19, 3, 39.000000000000000, 0.0 },
  { 9.8952937946572656e-20, 3, 40.000000000000000, 0.0 },
  { 3.5572969446337485e-20, 3, 41.000000000000000, 0.0 },
  { 1.2794928628588107e-20, 3, 42.000000000000000, 0.0 },
  { 4.6043879590224872e-21, 3, 43.000000000000000, 0.0 },
  { 1.6577264608687855e-21, 3, 44.000000000000000, 0.0 },
  { 5.9710673719974104e-22, 3, 45.000000000000000, 0.0 },
  { 2.1516963598613494e-22, 3, 46.000000000000000, 0.0 },
  { 7.7569713101311608e-23, 3, 47.000000000000000, 0.0 },
  { 2.7975529063328733e-23, 3, 48.000000000000000, 0.0 },
  { 1.0093284590499023e-23, 3, 49.000000000000000, 0.0 },
  { 3.6429094264752000e-24, 3, 50.000000000000000, 0.0 },
};
const double toler004 = 5.0000000000000039e-13;

// Test data for n=5.
// max(|f - f_GSL|): 2.0816681711721685e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 3.4329828679984630e-15
// mean(f - f_GSL): -3.4385398000513687e-18
// variance(f - f_GSL): 2.4622149014030208e-37
// stddev(f - f_GSL): 4.9620710408084861e-19
const testcase_expint_en<double>
data005[50] =
{
  { 0.070454237461720318, 5, 1.0000000000000000, 0.0 },
  { 0.021322400202323018, 5, 2.0000000000000000, 0.0 },
  { 0.0066979849170170462, 5, 3.0000000000000000, 0.0 },
  { 0.0021555113535254578, 5, 4.0000000000000000, 0.0 },
  { 0.00070576069342458603, 5, 5.0000000000000000, 0.0 },
  { 0.00023412304761929006, 5, 6.0000000000000000, 0.0 },
  { 7.8470166623256804e-05, 5, 7.0000000000000000, 0.0 },
  { 2.6521149556915648e-05, 5, 8.0000000000000000, 0.0 },
  { 9.0258360287770171e-06, 5, 9.0000000000000000, 0.0 },
  { 3.0897289142536820e-06, 5, 10.000000000000000, 0.0 },
  { 1.0629827352340267e-06, 5, 11.000000000000000, 0.0 },
  { 3.6729506704547441e-07, 5, 12.000000000000000, 0.0 },
  { 1.2739508423221535e-07, 5, 13.000000000000000, 0.0 },
  { 4.4334981723487365e-08, 5, 14.000000000000000, 0.0 },
  { 1.5475213627608503e-08, 5, 15.000000000000000, 0.0 },
  { 5.4161214463517987e-09, 5, 16.000000000000000, 0.0 },
  { 1.9001476670188341e-09, 5, 17.000000000000000, 0.0 },
  { 6.6809073562459569e-10, 5, 18.000000000000000, 0.0 },
  { 2.3536827865137344e-10, 5, 19.000000000000000, 0.0 },
  { 8.3071305994177148e-11, 5, 20.000000000000000, 0.0 },
  { 2.9368391704102412e-11, 5, 21.000000000000000, 0.0 },
  { 1.0398684155601380e-11, 5, 22.000000000000000, 0.0 },
  { 3.6871880721142361e-12, 5, 23.000000000000000, 0.0 },
  { 1.3091397064287131e-12, 5, 24.000000000000000, 0.0 },
  { 4.6538285243694559e-13, 5, 25.000000000000000, 0.0 },
  { 1.6562748582437637e-13, 5, 26.000000000000000, 0.0 },
  { 5.9009185636634676e-14, 5, 27.000000000000000, 0.0 },
  { 2.1044695236840194e-14, 5, 28.000000000000000, 0.0 },
  { 7.5123326728421182e-15, 5, 29.000000000000000, 0.0 },
  { 2.6840578116206379e-15, 5, 30.000000000000000, 0.0 },
  { 9.5977988623233110e-16, 5, 31.000000000000000, 0.0 },
  { 3.4347399352464197e-16, 5, 32.000000000000000, 0.0 },
  { 1.2300984996679857e-16, 5, 33.000000000000000, 0.0 },
  { 4.4085177713674986e-17, 5, 34.000000000000000, 0.0 },
  { 1.5810156775982679e-17, 5, 35.000000000000000, 0.0 },
  { 5.6735648491193615e-18, 5, 36.000000000000000, 0.0 },
  { 2.0372231701199748e-18, 5, 37.000000000000000, 0.0 },
  { 7.3193307503379913e-19, 5, 38.000000000000000, 0.0 },
  { 2.6311320726487881e-19, 5, 39.000000000000000, 0.0 },
  { 9.4632772393915753e-20, 5, 40.000000000000000, 0.0 },
  { 3.4053203713625099e-20, 5, 41.000000000000000, 0.0 },
  { 1.2259772507039742e-20, 5, 42.000000000000000, 0.0 },
  { 4.4157654890204405e-21, 5, 43.000000000000000, 0.0 },
  { 1.5911841147581554e-21, 5, 44.000000000000000, 0.0 },
  { 5.7361158322769557e-22, 5, 45.000000000000000, 0.0 },
  { 2.0686694765390695e-22, 5, 46.000000000000000, 0.0 },
  { 7.4633381546740051e-23, 5, 47.000000000000000, 0.0 },
  { 2.6936269880613317e-23, 5, 48.000000000000000, 0.0 },
  { 9.7251875263471932e-24, 5, 49.000000000000000, 0.0 },
  { 3.5124400631332593e-24, 5, 50.000000000000000, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_expint_en<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::expint(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  return 0;
}
