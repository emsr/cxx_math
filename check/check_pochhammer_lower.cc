// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  pochhammer_lower
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for a=0.25000000000000000.
// max(|f - f_Boost|): 1.5091186317920280e+145
// max(|f - f_Boost| / |f_Boost|): 4.5788048550703402e-10
// mean(f - f_Boost): -1.8863982897400351e+144
// variance(f - f_Boost): 2.8467988060273034e+289
// stddev(f - f_Boost): 5.3355400907755381e+144
const testcase_pochhammer_lower<double>
data001[8] =
{
  { 1.0000000000000000, 0.25000000000000000, 0.0000000000000000, 0.0 },
  { 0.25000000000000000, 0.25000000000000000, 1.0000000000000000, 0.0 },
  { -0.18750000000000000, 0.25000000000000000, 2.0000000000000000, 0.0 },
  { 3.3837890625000000, 0.25000000000000000, 5.0000000000000000, 0.0 },
  { -42303.691363334656, 0.25000000000000000, 10.000000000000000, 0.0 },
  { -11828484735041610., 0.25000000000000000, 20.000000000000000, 0.0 },
  { -4.6814734487901089e+61, 0.25000000000000000, 50.000000000000000, 0.0 },
  { -6.0303171446759310e+154, 0.25000000000000000, 100.00000000000000, 0.0 },
};
const double toler001 = 2.5000000000000012e-08;

// Test data for a=0.50000000000000000.
// max(|f - f_Boost|): 1.5906634520936325e+144
// max(|f - f_Boost| / |f_Boost|): 2.7482332509851717e-10
// mean(f - f_Boost): 1.9883293151170406e+143
// variance(f - f_Boost): 3.1627627722830397e+287
// stddev(f - f_Boost): 5.6238445678050525e+143
const testcase_pochhammer_lower<double>
data002[8] =
{
  { 1.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },
  { 0.50000000000000000, 0.50000000000000000, 1.0000000000000000, 0.0 },
  { -0.25000000000000000, 0.50000000000000000, 2.0000000000000000, 0.0 },
  { 3.2812499999999996, 0.50000000000000000, 5.0000000000000000, 0.0 },
  { -33651.782226562500, 0.50000000000000000, 10.000000000000000, 0.0 },
  { -7820887119901554.0, 0.50000000000000000, 20.000000000000000, 0.0 },
  { -2.4450853371181271e+61, 0.50000000000000000, 50.000000000000000, 0.0 },
  { -2.6426081869127788e+154, 0.50000000000000000, 100.00000000000000, 0.0 },
};
const double toler002 = 2.5000000000000012e-08;

// Test data for a=0.75000000000000000.
// max(|f - f_Boost|): 1.8205500971093730e+144
// max(|f - f_Boost| / |f_Boost|): 5.5306633624972943e-10
// mean(f - f_Boost): -2.2756876213867162e+143
// variance(f - f_Boost): 4.1430033201061842e+287
// stddev(f - f_Boost): 6.4366165957793259e+143
const testcase_pochhammer_lower<double>
data003[8] =
{
  { 1.0000000000000000, 0.75000000000000000, 0.0000000000000000, 0.0 },
  { 0.75000000000000000, 0.75000000000000000, 1.0000000000000000, 0.0 },
  { -0.18750000000000000, 0.75000000000000000, 2.0000000000000000, 0.0 },
  { 1.7138671875000000, 0.75000000000000000, 5.0000000000000000, 0.0 },
  { -14295.434832572937, 0.75000000000000000, 10.000000000000000, 0.0 },
  { -2751423860459567.5, 0.75000000000000000, 20.000000000000000, 0.0 },
  { -6.7811862645560589e+60, 0.75000000000000000, 50.000000000000000, 0.0 },
  { -6.1453389057270772e+153, 0.75000000000000000, 100.00000000000000, 0.0 },
};
const double toler003 = 5.0000000000000024e-08;

// Failure at a=1.0000000000000000 x=5.0000000000000000 f=nan f_Boost=0.0000000000000000
// Test data for a=1.0000000000000000.
// max(|f - f_Boost|): 1.4210854715202004e-14
// max(|f - f_Boost| / |f_Boost|): 1.4210854715202004e-14
// mean(f - f_Boost): 4.7369515717340010e-15
// variance(f - f_Boost): 1.6829032644714918e-29
// stddev(f - f_Boost): 4.1023203976182695e-15
const testcase_pochhammer_lower<double>
data004[3] =
{
  { 1.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.0000000000000000, 1.0000000000000000, 2.0000000000000000, 0.0 },
};
const double toler004 = 1.0000000000000008e-12;

// Test data for a=1.2500000000000000.
// max(|f - f_Boost|): 8.6751748717655245e+142
// max(|f - f_Boost| / |f_Boost|): 5.5321688485113061e-10
// mean(f - f_Boost): 1.0843968589706906e+142
// variance(f - f_Boost): 9.4073323819639980e+284
// stddev(f - f_Boost): 3.0671374899022703e+142
const testcase_pochhammer_lower<double>
data005[8] =
{
  { 1.0000000000000000, 1.2500000000000000, 0.0000000000000000, 0.0 },
  { 1.2500000000000000, 1.2500000000000000, 1.0000000000000000, 0.0 },
  { 0.31250000000000000, 1.2500000000000000, 2.0000000000000000, 0.0 },
  { -1.1279296875000000, 1.2500000000000000, 5.0000000000000000, 0.0 },
  { 6043.3844804763794, 1.2500000000000000, 10.000000000000000, 0.0 },
  { 788565649002774.00, 1.2500000000000000, 20.000000000000000, 0.0 },
  { 1.2003778073820791e+60, 1.2500000000000000, 50.000000000000000, 0.0 },
  { 7.6333128413619383e+152, 1.2500000000000000, 100.00000000000000, 0.0 },
};
const double toler005 = 5.0000000000000024e-08;

// Test data for a=1.5000000000000000.
// max(|f - f_Boost|): 4.3762971219258080e+143
// max(|f - f_Boost| / |f_Boost|): 1.0874742830321815e-09
// mean(f - f_Boost): 5.4703714024072600e+142
// variance(f - f_Boost): 2.3939970624220138e+286
// stddev(f - f_Boost): 1.5472546857004550e+143
const testcase_pochhammer_lower<double>
data006[8] =
{
  { 1.0000000000000000, 1.5000000000000000, 0.0000000000000000, 0.0 },
  { 1.5000000000000000, 1.5000000000000000, 1.0000000000000000, 0.0 },
  { 0.75000000000000000, 1.5000000000000000, 2.0000000000000000, 0.0 },
  { -1.4062500000000000, 1.5000000000000000, 5.0000000000000000, 0.0 },
  { 5938.5498046875000, 1.5000000000000000, 10.000000000000000, 0.0 },
  { 634125982694720.50, 1.5000000000000000, 20.000000000000000, 0.0 },
  { 7.5621195993344138e+59, 1.5000000000000000, 50.000000000000000, 0.0 },
  { 4.0242764267707290e+152, 1.5000000000000000, 100.00000000000000, 0.0 },
};
const double toler006 = 1.0000000000000005e-07;

// Test data for a=1.7500000000000000.
// max(|f - f_Boost|): 4.6795388894697706e+141
// max(|f - f_Boost| / |f_Boost|): 2.5402400515087048e-10
// mean(f - f_Boost): -5.8494236118372133e+140
// variance(f - f_Boost): 2.7372605272574968e+282
// stddev(f - f_Boost): 1.6544668407851204e+141
const testcase_pochhammer_lower<double>
data007[8] =
{
  { 1.0000000000000000, 1.7500000000000000, 0.0000000000000000, 0.0 },
  { 1.7500000000000000, 1.7500000000000000, 1.0000000000000000, 0.0 },
  { 1.3125000000000000, 1.7500000000000000, 2.0000000000000000, 0.0 },
  { -0.92285156250000000, 1.7500000000000000, 5.0000000000000000, 0.0 },
  { 3032.3649644851685, 1.7500000000000000, 10.000000000000000, 0.0 },
  { 263835164701602.38, 1.7500000000000000, 20.000000000000000, 0.0 },
  { 2.4594976089063422e+59, 1.7500000000000000, 50.000000000000000, 0.0 },
  { 1.0945896269742883e+152, 1.7500000000000000, 100.00000000000000, 0.0 },
};
const double toler007 = 2.5000000000000012e-08;

// Failure at a=2.0000000000000000 x=5.0000000000000000 f=nan f_Boost=0.0000000000000000
// Test data for a=2.0000000000000000.
// max(|f - f_Boost|): 1.5965007094109751e-13
// max(|f - f_Boost| / |f_Boost|): 7.9825035470548755e-14
// mean(f - f_Boost): -9.6959477483930342e-14
// variance(f - f_Boost): 8.8076730932980765e-28
// stddev(f - f_Boost): 2.9677724126519669e-14
const testcase_pochhammer_lower<double>
data008[3] =
{
  { 1.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },
  { 2.0000000000000000, 2.0000000000000000, 1.0000000000000000, 0.0 },
  { 2.0000000000000000, 2.0000000000000000, 2.0000000000000000, 0.0 },
};
const double toler008 = 5.0000000000000029e-12;

// Test data for a=2.2500000000000000.
// max(|f - f_Boost|): 9.3673986286552774e+141
// max(|f - f_Boost| / |f_Boost|): 5.3313867487051539e-10
// mean(f - f_Boost): -1.1709248285819097e+141
// variance(f - f_Boost): 1.0968519633516596e+283
// stddev(f - f_Boost): 3.3118755461998560e+141
const testcase_pochhammer_lower<double>
data009[8] =
{
  { 1.0000000000000000, 2.2500000000000000, 0.0000000000000000, 0.0 },
  { 2.2500000000000000, 2.2500000000000000, 1.0000000000000000, 0.0 },
  { 2.8125000000000000, 2.2500000000000000, 2.0000000000000000, 0.0 },
  { 0.92285156250000000, 2.2500000000000000, 5.0000000000000000, 0.0 },
  { -1754.5309782028198, 2.2500000000000000, 10.000000000000000, 0.0 },
  { -99959025929929.078, 2.2500000000000000, 20.000000000000000, 0.0 },
  { -5.6562305059888551e+58, 2.2500000000000000, 50.000000000000000, 0.0 },
  { -1.7570285312597814e+151, 2.2500000000000000, 100.00000000000000, 0.0 },
};
const double toler009 = 5.0000000000000024e-08;

// Test data for a=2.5000000000000000.
// max(|f - f_Boost|): 1.7893651514199875e+142
// max(|f - f_Boost| / |f_Boost|): 1.7341065449964261e-09
// mean(f - f_Boost): -2.2367064392749844e+141
// variance(f - f_Boost): 4.0022845563953435e+283
// stddev(f - f_Boost): 6.3263611629398325e+141
const testcase_pochhammer_lower<double>
data010[8] =
{
  { 1.0000000000000000, 2.5000000000000000, 0.0000000000000000, 0.0 },
  { 2.5000000000000000, 2.5000000000000000, 1.0000000000000000, 0.0 },
  { 3.7500000000000000, 2.5000000000000000, 2.0000000000000000, 0.0 },
  { 1.4062500000000000, 2.5000000000000000, 5.0000000000000000, 0.0 },
  { -1979.5166015625000, 2.5000000000000000, 10.000000000000000, 0.0 },
  { -90589426099245.797, 2.5000000000000000, 20.000000000000000, 0.0 },
  { -3.9800629470181124e+58, 2.5000000000000000, 50.000000000000000, 0.0 },
  { -1.0318657504540329e+151, 2.5000000000000000, 100.00000000000000, 0.0 },
};
const double toler010 = 1.0000000000000005e-07;

// Test data for a=2.7500000000000000.
// max(|f - f_Boost|): 4.0610133084493329e+141
// max(|f - f_Boost| / |f_Boost|): 1.3120186266050141e-09
// mean(f - f_Boost): -5.0762666355616662e+140
// variance(f - f_Boost): 2.0614786364253246e+282
// stddev(f - f_Boost): 1.4357850244466699e+141
const testcase_pochhammer_lower<double>
data011[8] =
{
  { 1.0000000000000000, 2.7500000000000000, 0.0000000000000000, 0.0 },
  { 2.7500000000000000, 2.7500000000000000, 1.0000000000000000, 0.0 },
  { 4.8125000000000000, 2.7500000000000000, 2.0000000000000000, 0.0 },
  { 1.1279296875000000, 2.7500000000000000, 5.0000000000000000, 0.0 },
  { -1150.2074003219604, 2.7500000000000000, 10.000000000000000, 0.0 },
  { -42060678430690.234, 2.7500000000000000, 20.000000000000000, 0.0 },
  { -1.4314536348132149e+58, 2.7500000000000000, 50.000000000000000, 0.0 },
  { -3.0952405904157255e+150, 2.7500000000000000, 100.00000000000000, 0.0 },
};
const double toler011 = 1.0000000000000005e-07;

// Failure at a=3.0000000000000000 x=5.0000000000000000 f=nan f_Boost=0.0000000000000000
// Test data for a=3.0000000000000000.
// max(|f - f_Boost|): 3.0668800832245324e-12
// max(|f - f_Boost| / |f_Boost|): 5.9093470857381669e-13
// mean(f - f_Boost): 1.6132280696486607e-12
// variance(f - f_Boost): 1.5848281324298895e-24
// stddev(f - f_Boost): 1.2588995720191066e-12
const testcase_pochhammer_lower<double>
data012[3] =
{
  { 1.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0 },
  { 3.0000000000000000, 3.0000000000000000, 1.0000000000000000, 0.0 },
  { 6.0000000000000000, 3.0000000000000000, 2.0000000000000000, 0.0 },
};
const double toler012 = 5.0000000000000028e-11;

// Test data for a=3.2500000000000000.
// max(|f - f_Boost|): 8.1149390307883784e+140
// max(|f - f_Boost| / |f_Boost|): 1.3749093335016512e-09
// mean(f - f_Boost): 1.0143673788485473e+140
// variance(f - f_Boost): 8.2315294341765782e+280
// stddev(f - f_Boost): 2.8690642087929258e+140
const testcase_pochhammer_lower<double>
data013[8] =
{
  { 1.0000000000000000, 3.2500000000000000, 0.0000000000000000, 0.0 },
  { 3.2500000000000000, 3.2500000000000000, 1.0000000000000000, 0.0 },
  { 7.3125000000000000, 3.2500000000000000, 2.0000000000000000, 0.0 },
  { -1.7138671875000000, 3.2500000000000000, 5.0000000000000000, 0.0 },
  { 844.77417469024670, 3.2500000000000000, 10.000000000000000, 0.0 },
  { 19395034881926.543, 3.2500000000000000, 20.000000000000000, 0.0 },
  { 3.9321388544307538e+57, 3.2500000000000000, 50.000000000000000, 0.0 },
  { 5.9021630249036580e+149, 3.2500000000000000, 100.00000000000000, 0.0 },
};
const double toler013 = 1.0000000000000005e-07;

// Test data for a=3.5000000000000000.
// max(|f - f_Boost|): 4.0919884492335956e+140
// max(|f - f_Boost| / |f_Boost|): 1.0933783507545615e-09
// mean(f - f_Boost): 5.1149855615419945e+139
// variance(f - f_Boost): 2.0930461835826458e+280
// stddev(f - f_Boost): 1.4467363904950499e+140
const testcase_pochhammer_lower<double>
data014[8] =
{
  { 1.0000000000000000, 3.5000000000000000, 0.0000000000000000, 0.0 },
  { 3.5000000000000000, 3.5000000000000000, 1.0000000000000000, 0.0 },
  { 8.7500000000000000, 3.5000000000000000, 2.0000000000000000, 0.0 },
  { -3.2812500000000000, 3.5000000000000000, 5.0000000000000000, 0.0 },
  { 1065.8935546875000, 3.5000000000000000, 10.000000000000000, 0.0 },
  { 19215938869536.988, 3.5000000000000000, 20.000000000000000, 0.0 },
  { 2.9957463042071814e+57, 3.5000000000000000, 50.000000000000000, 0.0 },
  { 3.7425182658954563e+149, 3.5000000000000000, 100.00000000000000, 0.0 },
};
const double toler014 = 1.0000000000000005e-07;

// Test data for a=3.7500000000000000.
// max(|f - f_Boost|): 1.1833838437195823e+140
// max(|f - f_Boost| / |f_Boost|): 9.8129750396526619e-10
// mean(f - f_Boost): 1.4792298046494779e+139
// variance(f - f_Boost): 1.7504966519706659e+279
// stddev(f - f_Boost): 4.1838937032035909e+139
const testcase_pochhammer_lower<double>
data015[8] =
{
  { 1.0000000000000000, 3.7500000000000000, 0.0000000000000000, 0.0 },
  { 3.7500000000000000, 3.7500000000000000, 1.0000000000000000, 0.0 },
  { 10.312500000000000, 3.7500000000000000, 2.0000000000000000, 0.0 },
  { -3.3837890625000000, 3.7500000000000000, 5.0000000000000000, 0.0 },
  { 690.12444019317627, 3.7500000000000000, 10.000000000000000, 0.0 },
  { 9706310407082.3613, 3.7500000000000000, 20.000000000000000, 0.0 },
  { 1.1606380822809851e+57, 3.7500000000000000, 50.000000000000000, 0.0 },
  { 1.2059378923697631e+149, 3.7500000000000000, 100.00000000000000, 0.0 },
};
const double toler015 = 5.0000000000000024e-08;

// Failure at a=4.0000000000000000 x=10.000000000000000 f=nan f_Boost=0.0000000000000000
// Test data for a=4.0000000000000000.
// max(|f - f_Boost|): 2.3581137043038325e-12
// max(|f - f_Boost| / |f_Boost|): 5.8952842607595812e-13
// mean(f - f_Boost): -5.8553162318730756e-13
// variance(f - f_Boost): 1.5237656966771695e-25
// stddev(f - f_Boost): 3.9035441545820504e-13
const testcase_pochhammer_lower<double>
data016[4] =
{
  { 1.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0 },
  { 4.0000000000000000, 4.0000000000000000, 1.0000000000000000, 0.0 },
  { 12.000000000000000, 4.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.0000000000000000, 4.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler016 = 5.0000000000000028e-11;

// Test data for a=4.2500000000000000.
// max(|f - f_Boost|): 2.1316703392431425e+138
// max(|f - f_Boost| / |f_Boost|): 4.4953595483376126e-10
// mean(f - f_Boost): 2.6645879240539281e+137
// variance(f - f_Boost): 5.6800230440112176e+275
// stddev(f - f_Boost): 7.5365927606652707e+137
const testcase_pochhammer_lower<double>
data017[8] =
{
  { 1.0000000000000000, 4.2500000000000000, 0.0000000000000000, 0.0 },
  { 4.2500000000000000, 4.2500000000000000, 1.0000000000000000, 0.0 },
  { 13.812500000000000, 4.2500000000000000, 2.0000000000000000, 0.0 },
  { 9.7119140625000000, 4.2500000000000000, 5.0000000000000000, 0.0 },
  { -624.39830303192139, 4.2500000000000000, 10.000000000000000, 0.0 },
  { -5233580841154.7803, 4.2500000000000000, 20.000000000000000, 0.0 },
  { -3.6528065860832145e+56, 4.2500000000000000, 50.000000000000000, 0.0 },
  { -2.6197590449964016e+148, 4.2500000000000000, 100.00000000000000, 0.0 },
};
const double toler017 = 2.5000000000000012e-08;

// Test data for a=4.5000000000000000.
// max(|f - f_Boost|): 1.6019536840330243e+139
// max(|f - f_Boost| / |f_Boost|): 9.0839949619115819e-10
// mean(f - f_Boost): -2.0024421050412804e+138
// variance(f - f_Boost): 3.2078195072337233e+277
// stddev(f - f_Boost): 5.6637615656326168e+138
const testcase_pochhammer_lower<double>
data018[8] =
{
  { 1.0000000000000000, 4.5000000000000000, 0.0000000000000000, 0.0 },
  { 4.5000000000000000, 4.5000000000000000, 1.0000000000000000, 0.0 },
  { 15.750000000000000, 4.5000000000000000, 2.0000000000000000, 0.0 },
  { 29.531250000000000, 4.5000000000000000, 5.0000000000000000, 0.0 },
  { -872.09472656249989, 4.5000000000000000, 10.000000000000000, 0.0 },
  { -5578820962123.6416, 4.5000000000000000, 20.000000000000000, 0.0 },
  { -2.9628260151499600e+56, 4.5000000000000000, 50.000000000000000, 0.0 },
  { -1.7634902823591160e+148, 4.5000000000000000, 100.00000000000000, 0.0 },
};
const double toler018 = 5.0000000000000024e-08;

// Test data for a=4.7500000000000000.
// max(|f - f_Boost|): 1.4361240094780982e+137
// max(|f - f_Boost| / |f_Boost|): 2.3561424169076078e-10
// mean(f - f_Boost): 1.7951550118476227e+136
// variance(f - f_Boost): 2.5780652132493108e+273
// stddev(f - f_Boost): 5.0774651286338848e+136
const testcase_pochhammer_lower<double>
data019[8] =
{
  { 1.0000000000000000, 4.7500000000000000, 0.0000000000000000, 0.0 },
  { 4.7500000000000000, 4.7500000000000000, 1.0000000000000000, 0.0 },
  { 17.812500000000000, 4.7500000000000000, 2.0000000000000000, 0.0 },
  { 64.291992187500000, 4.7500000000000000, 5.0000000000000000, 0.0 },
  { -624.39830303192139, 4.7500000000000000, 10.000000000000000, 0.0 },
  { -3023277012042.0469, 4.7500000000000000, 20.000000000000000, 0.0 },
  { -1.2183493681402606e+56, 4.7500000000000000, 50.000000000000000, 0.0 },
  { -6.0138635052560362e+147, 4.7500000000000000, 100.00000000000000, 0.0 },
};
const double toler019 = 2.5000000000000012e-08;

// Failure at a=5.0000000000000000 x=10.000000000000000 f=nan f_Boost=0.0000000000000000
// Test data for a=5.0000000000000000.
// max(|f - f_Boost|): 1.2990142295166152e-10
// max(|f - f_Boost| / |f_Boost|): 1.1468159755168017e-12
// mean(f - f_Boost): 3.6695091409910674e-11
// variance(f - f_Boost): 3.8610756619870126e-21
// stddev(f - f_Boost): 6.2137554361167232e-11
const testcase_pochhammer_lower<double>
data020[4] =
{
  { 1.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },
  { 5.0000000000000000, 5.0000000000000000, 1.0000000000000000, 0.0 },
  { 20.000000000000000, 5.0000000000000000, 2.0000000000000000, 0.0 },
  { 120.00000000000000, 5.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler020 = 1.0000000000000006e-10;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_pochhammer_lower<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::pochhammer_lower(data[i].a, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  test(data020, toler020);
  return 0;
}
