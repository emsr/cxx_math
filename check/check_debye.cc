// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  debye
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=1.
// max(|f - f_GSL|): 1.4799911911195143 at index 40
// max(|f - f_GSL| / |f_GSL|): 9.0000000000000000
// mean(f - f_GSL): 0.98240026392354507
// variance(f - f_GSL): 0.0063894301168775066
// stddev(f - f_GSL): 0.079933910931953692
const testcase_debye<double>
data001[41] =
{
  { 1.0000000000000000, 1, 0.0000000000000000, 0.0 },
  { 0.93923502719361451, 1, 0.25000000000000000, 0.0 },
  { 0.88192715679060552, 1, 0.50000000000000000, 0.0 },
  { 0.82803794107487727, 1, 0.75000000000000000, 0.0 },
  { 0.77750463411224824, 1, 1.0000000000000000, 0.0 },
  { 0.73024210002043111, 1, 1.2500000000000000, 0.0 },
  { 0.68614531078940200, 1, 1.5000000000000000, 0.0 },
  { 0.64509228258628526, 1, 1.7500000000000000, 0.0 },
  { 0.60694728460981007, 1, 2.0000000000000000, 0.0 },
  { 0.57156415469083166, 1, 2.2500000000000000, 0.0 },
  { 0.53878956907785591, 1, 2.5000000000000000, 0.0 },
  { 0.50846613697658816, 1, 2.7500000000000000, 0.0 },
  { 0.48043521957304280, 1, 3.0000000000000000, 0.0 },
  { 0.45453940463894593, 1, 3.2500000000000000, 0.0 },
  { 0.43062459812526921, 1, 3.5000000000000000, 0.0 },
  { 0.40854172097863173, 1, 3.7500000000000000, 0.0 },
  { 0.38814802129793780, 1, 4.0000000000000000, 0.0 },
  { 0.36930802829242526, 1, 4.2500000000000000, 0.0 },
  { 0.35189418541425438, 1, 4.5000000000000000, 0.0 },
  { 0.33578720610755330, 1, 4.7500000000000000, 0.0 },
  { 0.32087619770014614, 1, 5.0000000000000000, 0.0 },
  { 0.30705859801669050, 1, 5.2500000000000000, 0.0 },
  { 0.29423996623154247, 1, 5.5000000000000000, 0.0 },
  { 0.28233366511228353, 1, 5.7500000000000000, 0.0 },
  { 0.27126046678502191, 1, 6.0000000000000000, 0.0 },
  { 0.26094810897542270, 1, 6.2500000000000000, 0.0 },
  { 0.25133082369212911, 1, 6.5000000000000000, 0.0 },
  { 0.24234885574325818, 1, 6.7500000000000000, 0.0 },
  { 0.23394798443376069, 1, 7.0000000000000000, 0.0 },
  { 0.22607905832927164, 1, 7.2500000000000000, 0.0 },
  { 0.21869755008676442, 1, 7.5000000000000000, 0.0 },
  { 0.21176313600694763, 1, 7.7500000000000000, 0.0 },
  { 0.20523930310221503, 1, 8.0000000000000000, 0.0 },
  { 0.19909298503297065, 1, 8.2500000000000000, 0.0 },
  { 0.19329422717889666, 1, 8.5000000000000000, 0.0 },
  { 0.18781588031801005, 1, 8.7500000000000000, 0.0 },
  { 0.18263332182878975, 1, 9.0000000000000000, 0.0 },
  { 0.17772420295991281, 1, 9.2500000000000000, 0.0 },
  { 0.17306822048621565, 1, 9.5000000000000000, 0.0 },
  { 0.16864691095346987, 1, 9.7500000000000000, 0.0 },
  { 0.16444346567994603, 1, 10.000000000000000, 0.0 },
};
const double toler001 = 0.050000000000000003;

// Test data for n=2.
// max(|f - f_GSL|): 2.3506034029859713 at index 40
// max(|f - f_GSL| / |f_GSL|): 48.999999999999993
// mean(f - f_GSL): 1.4548126626500180
// variance(f - f_GSL): 0.021058906364616853
// stddev(f - f_GSL): 0.14511687139894125
const testcase_debye<double>
data002[41] =
{
  { 1.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { 0.91926902690009793, 2, 0.25000000000000000, 0.0 },
  { 0.84372119334725360, 2, 0.50000000000000000, 0.0 },
  { 0.77329247064874851, 2, 0.75000000000000000, 0.0 },
  { 0.70787847562782935, 2, 1.0000000000000000, 0.0 },
  { 0.64733780199449109, 2, 1.2500000000000000, 0.0 },
  { 0.59149637225671281, 2, 1.5000000000000000, 0.0 },
  { 0.54015253965950338, 2, 1.7500000000000000, 0.0 },
  { 0.49308264399053192, 2, 2.0000000000000000, 0.0 },
  { 0.45004672667261292, 2, 2.2500000000000000, 0.0 },
  { 0.41079413579749657, 2, 2.5000000000000000, 0.0 },
  { 0.37506879464025611, 2, 2.7500000000000000, 0.0 },
  { 0.34261396060786353, 2, 3.0000000000000000, 0.0 },
  { 0.31317635851733083, 2, 3.2500000000000000, 0.0 },
  { 0.28650962663067281, 2, 3.5000000000000000, 0.0 },
  { 0.26237706166880770, 2, 3.7500000000000000, 0.0 },
  { 0.24055368752127904, 2, 4.0000000000000000, 0.0 },
  { 0.22082770061202309, 2, 4.2500000000000000, 0.0 },
  { 0.20300136319375556, 2, 4.5000000000000000, 0.0 },
  { 0.18689142540590917, 2, 4.7500000000000000, 0.0 },
  { 0.17232915939014140, 2, 5.0000000000000000, 0.0 },
  { 0.15916008590203246, 2, 5.2500000000000000, 0.0 },
  { 0.14724346738730182, 2, 5.5000000000000000, 0.0 },
  { 0.13645163287612491, 2, 5.7500000000000000, 0.0 },
  { 0.12666919046715788, 2, 6.0000000000000000, 0.0 },
  { 0.11779217349902231, 2, 6.2500000000000000, 0.0 },
  { 0.10972715734115786, 2, 6.5000000000000000, 0.0 },
  { 0.10239037544722211, 2, 6.7500000000000000, 0.0 },
  { 0.095706856091518439, 2, 7.0000000000000000, 0.0 },
  { 0.089609595109549800, 2, 7.2500000000000000, 0.0 },
  { 0.084038774955576254, 2, 7.5000000000000000, 0.0 },
  { 0.078941036385448360, 2, 7.7500000000000000, 0.0 },
  { 0.074268805954862849, 2, 8.0000000000000000, 0.0 },
  { 0.069979680163255648, 2, 8.2500000000000000, 0.0 },
  { 0.066035865344715186, 2, 8.5000000000000000, 0.0 },
  { 0.062403671191251349, 2, 8.7500000000000000, 0.0 },
  { 0.059053054985066661, 2, 9.0000000000000000, 0.0 },
  { 0.055957213124277622, 2, 9.2500000000000000, 0.0 },
  { 0.053092216274581203, 2, 9.5000000000000000, 0.0 },
  { 0.050436684405129210, 2, 9.7500000000000000, 0.0 },
  { 0.047971498020121871, 2, 10.000000000000000, 0.0 },
};
const double toler002 = 0.050000000000000003;

// Test data for n=3.
// max(|f - f_GSL|): 6.4126261310914838 at index 40
// max(|f - f_GSL| / |f_GSL|): 332.33333333333331
// mean(f - f_GSL): 3.7502203587076082
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_debye<double>
data003[41] =
{
  { 1.0000000000000000, 3, 0.0000000000000000, 0.0 },
  { 0.90937267753889905, 3, 0.25000000000000000, 0.0 },
  { 0.82496296897623367, 3, 0.50000000000000000, 0.0 },
  { 0.74668860248637636, 3, 0.75000000000000000, 0.0 },
  { 0.67441556407781467, 3, 1.0000000000000000, 0.0 },
  { 0.60796253060875505, 3, 1.2500000000000000, 0.0 },
  { 0.54710665141286285, 3, 1.5000000000000000, 0.0 },
  { 0.49159031126690422, 3, 1.7500000000000000, 0.0 },
  { 0.44112847372762420, 3, 2.0000000000000000, 0.0 },
  { 0.39541620754233175, 3, 2.2500000000000000, 0.0 },
  { 0.35413603481042388, 3, 2.5000000000000000, 0.0 },
  { 0.31696479942523470, 3, 2.7500000000000000, 0.0 },
  { 0.28357982814342253, 3, 3.0000000000000000, 0.0 },
  { 0.25366423472969624, 3, 3.2500000000000000, 0.0 },
  { 0.22691129186348902, 3, 3.5000000000000000, 0.0 },
  { 0.20302786000645168, 3, 3.7500000000000000, 0.0 },
  { 0.18173691382177459, 3, 4.0000000000000000, 0.0 },
  { 0.16277924385112436, 3, 4.2500000000000000, 0.0 },
  { 0.14591443458095621, 3, 4.5000000000000000, 0.0 },
  { 0.13092123151768084, 3, 4.7500000000000000, 0.0 },
  { 0.11759741179993397, 3, 5.0000000000000000, 0.0 },
  { 0.10575926772542746, 3, 5.2500000000000000, 0.0 },
  { 0.095240802723158879, 3, 5.5000000000000000, 0.0 },
  { 0.085892726780217504, 3, 5.7500000000000000, 0.0 },
  { 0.077581324733763016, 3, 6.0000000000000000, 0.0 },
  { 0.070187257332823577, 3, 6.2500000000000000, 0.0 },
  { 0.063604342346162787, 3, 6.5000000000000000, 0.0 },
  { 0.057738351707894590, 3, 6.7500000000000000, 0.0 },
  { 0.052505850972709101, 3, 7.0000000000000000, 0.0 },
  { 0.047833099242075648, 3, 7.2500000000000000, 0.0 },
  { 0.043655021148884324, 3, 7.5000000000000000, 0.0 },
  { 0.039914257307710282, 3, 7.7500000000000000, 0.0 },
  { 0.036560295673194840, 3, 8.0000000000000000, 0.0 },
  { 0.033548683311520444, 3, 8.2500000000000000, 0.0 },
  { 0.030840315996987538, 3, 8.5000000000000000, 0.0 },
  { 0.028400801630058450, 3, 8.7500000000000000, 0.0 },
  { 0.026199892587964881, 3, 9.0000000000000000, 0.0 },
  { 0.024210981639012426, 3, 9.2500000000000000, 0.0 },
  { 0.022410655873390493, 3, 9.5000000000000000, 0.0 },
  { 0.020778303142639617, 3, 9.7500000000000000, 0.0 },
  { 0.019295765690345489, 3, 10.000000000000000, 0.0 },
};
const double toler003 = 0.050000000000000003;

// Test data for n=4.
// max(|f - f_GSL|): 24.174515225117627 at index 40
// max(|f - f_GSL| / |f_GSL|): 2498.9999999999995
// mean(f - f_GSL): 12.541263634926917
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_debye<double>
data004[41] =
{
  { 1.0000000000000000, 4, 0.0000000000000000, 0.0 },
  { 0.90346951277378540, 4, 0.25000000000000000, 0.0 },
  { 0.81384569172034049, 4, 0.50000000000000000, 0.0 },
  { 0.73103260039399998, 4, 0.75000000000000000, 0.0 },
  { 0.65487406888673705, 4, 1.0000000000000000, 0.0 },
  { 0.58515900465725901, 4, 1.2500000000000000, 0.0 },
  { 0.52162830964878737, 4, 1.5000000000000000, 0.0 },
  { 0.46398295649277044, 4, 1.7500000000000000, 0.0 },
  { 0.41189273671788529, 4, 2.0000000000000000, 0.0 },
  { 0.36500519994249869, 4, 2.2500000000000000, 0.0 },
  { 0.32295434858707317, 4, 2.5000000000000000, 0.0 },
  { 0.28536872717092265, 4, 2.7500000000000000, 0.0 },
  { 0.25187863642883324, 4, 3.0000000000000000, 0.0 },
  { 0.22212229832812391, 4, 3.2500000000000000, 0.0 },
  { 0.19575088858983070, 4, 3.5000000000000000, 0.0 },
  { 0.17243243139810516, 4, 3.7500000000000000, 0.0 },
  { 0.15185461258672017, 4, 4.0000000000000000, 0.0 },
  { 0.13372661145921416, 4, 4.2500000000000000, 0.0 },
  { 0.11778007841050860, 4, 4.5000000000000000, 0.0 },
  { 0.10376939795859030, 4, 4.7500000000000000, 0.0 },
  { 0.091471377664481171, 4, 5.0000000000000000, 0.0 },
  { 0.080684495875095213, 4, 5.2500000000000000, 0.0 },
  { 0.071227828197462539, 4, 5.5000000000000000, 0.0 },
  { 0.062939756584670298, 4, 5.7500000000000000, 0.0 },
  { 0.055676547822738870, 4, 6.0000000000000000, 0.0 },
  { 0.049310871453610905, 4, 6.2500000000000000, 0.0 },
  { 0.043730311673340190, 4, 6.5000000000000000, 0.0 },
  { 0.038835914035260009, 4, 6.7500000000000000, 0.0 },
  { 0.034540796095864371, 4, 7.0000000000000000, 0.0 },
  { 0.030768841485475738, 4, 7.2500000000000000, 0.0 },
  { 0.027453489147897230, 4, 7.5000000000000000, 0.0 },
  { 0.024536623474745837, 4, 7.7500000000000000, 0.0 },
  { 0.021967566525574963, 4, 8.0000000000000000, 0.0 },
  { 0.019702170231269640, 4, 8.2500000000000000, 0.0 },
  { 0.017702004194034039, 4, 8.5000000000000000, 0.0 },
  { 0.015933633213422081, 4, 8.7500000000000000, 0.0 },
  { 0.014367977802586217, 4, 9.0000000000000000, 0.0 },
  { 0.012979750559240199, 4, 9.2500000000000000, 0.0 },
  { 0.011746961196267312, 4, 9.5000000000000000, 0.0 },
  { 0.010650483216913566, 4, 9.7500000000000000, 0.0 },
  { 0.0096736755602711607, 4, 10.000000000000000, 0.0 },
};
const double toler004 = 0.050000000000000003;

// Failure at n=5 x=0.0000000000000000 f=0.0000000000000000 f_GSL=nan
// Failure at n=6 x=0.0000000000000000 f=0.0000000000000000 f_GSL=nan
template<typename Ret, unsigned int Num>
  void
  test(const testcase_debye<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::debye(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  return 0;
}
