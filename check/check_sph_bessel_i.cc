// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }

// Copyright (C) 2016-2018 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  sph_bessel_i
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< '\n'; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data for n=0.
// max(|f - f_GSL|): 5.3290705182007514e-15 at index 19
// max(|f - f_GSL| / |f_GSL|): 5.5701843183549869e-16
// mean(f - f_GSL): -1.7975039446312059e-16
// variance(f - f_GSL): 2.0088366429456197e-31
// stddev(f - f_GSL): 4.4820047333147919e-16
const testcase_sph_bessel_i<double>
data001[21] =
{
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0104492672326733, 0, 0.25000000000000000, 0.0 },
  { 1.0421906109874948, 0, 0.50000000000000000, 0.0 },
  { 1.0964223092477734, 0, 0.75000000000000000, 0.0 },
  { 1.1752011936438016, 0, 1.0000000000000000, 0.0 },
  { 1.2815352642406606, 0, 1.2500000000000000, 0.0 },
  { 1.4195196367298781, 0, 1.5000000000000000, 0.0 },
  { 1.5945224950157955, 0, 1.7500000000000000, 0.0 },
  { 1.8134302039235093, 0, 2.0000000000000000, 0.0 },
  { 2.0849636915103695, 0, 2.2500000000000000, 0.0 },
  { 2.4200817924159148, 0, 2.5000000000000000, 0.0 },
  { 2.8324916405420844, 0, 2.7500000000000000, 0.0 },
  { 3.3392916424699672, 0, 3.0000000000000000, 0.0 },
  { 3.9617793399017449, 0, 3.2500000000000000, 0.0 },
  { 4.7264649393242850, 0, 3.5000000000000000, 0.0 },
  { 5.6663419005609041, 0, 3.7500000000000000, 0.0 },
  { 6.8224792992819374, 0, 4.0000000000000000, 0.0 },
  { 8.2460174250328073, 0, 4.2500000000000000, 0.0 },
  { 10.000669144887063, 0, 4.5000000000000000, 0.0 },
  { 12.165856087577321, 0, 4.7500000000000000, 0.0 },
  { 14.840642115557751, 0, 5.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 3.5527136788005009e-15 at index 19
// max(|f - f_GSL| / |f_GSL|): 9.0536972201262005e-16
// mean(f - f_GSL): 3.1059810807965690e-17
// variance(f - f_GSL): 1.7150463474111917e-31
// stddev(f - f_GSL): 4.1413118059513365e-16
const testcase_sph_bessel_i<double>
data002[21] =
{
  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },
  { 0.083855330587599780, 1, 0.25000000000000000, 0.0 },
  { 0.17087070843777219, 1, 0.50000000000000000, 0.0 },
  { 0.26434796723876192, 1, 0.75000000000000000, 0.0 },
  { 0.36787944117144256, 1, 1.0000000000000000, 0.0 },
  { 0.48551089033628403, 1, 1.2500000000000000, 0.0 },
  { 0.62192665234224598, 1, 1.5000000000000000, 0.0 },
  { 0.78266617983559539, 1, 1.7500000000000000, 0.0 },
  { 0.97438274358006116, 1, 2.0000000000000000, 0.0 },
  { 1.2051572617554782, 1, 2.2500000000000000, 0.0 },
  { 1.4848830748991084, 1, 2.5000000000000000, 0.0 },
  { 1.8257411753292201, 1, 2.7500000000000000, 0.0 },
  { 2.2427901177692657, 1, 3.0000000000000000, 0.0 },
  { 2.7547008377263529, 1, 3.2500000000000000, 0.0 },
  { 3.3846742090665800, 1, 3.5000000000000000, 0.0 },
  { 4.1615887926395976, 1, 3.7500000000000000, 0.0 },
  { 5.1214383841836364, 1, 4.0000000000000000, 0.0 },
  { 6.3091343212389708, 1, 4.2500000000000000, 0.0 },
  { 7.7807668896984357, 1, 4.5000000000000000, 0.0 },
  { 9.6064446365511706, 1, 4.7500000000000000, 0.0 },
  { 11.873861281846017, 1, 5.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_GSL|): 1.7763568394002505e-15 at index 20
// max(|f - f_GSL| / |f_GSL|): 1.1128789647185389e-13
// mean(f - f_GSL): -1.6397267141971248e-17
// variance(f - f_GSL): 1.6873328254250998e-31
// stddev(f - f_GSL): 4.1077156978363289e-16
const testcase_sph_bessel_i<double>
data003[21] =
{
  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { 0.0041853001814763620, 2, 0.25000000000000000, 0.0 },
  { 0.016966360360862322, 2, 0.50000000000000000, 0.0 },
  { 0.039030440292726704, 2, 0.75000000000000000, 0.0 },
  { 0.071562870129473946, 2, 1.0000000000000000, 0.0 },
  { 0.11630912743357828, 2, 1.2500000000000000, 0.0 },
  { 0.17566633204538651, 2, 1.5000000000000000, 0.0 },
  { 0.25280904386906083, 2, 1.7500000000000000, 0.0 },
  { 0.35185608855341760, 2, 2.0000000000000000, 0.0 },
  { 0.47808734250306512, 2, 2.2500000000000000, 0.0 },
  { 0.63822210253698464, 2, 2.5000000000000000, 0.0 },
  { 0.84077399472838987, 2, 2.7500000000000000, 0.0 },
  { 1.0965015247007015, 2, 3.0000000000000000, 0.0 },
  { 1.4189785666158807, 2, 3.2500000000000000, 0.0 },
  { 1.8253156172672163, 2, 3.5000000000000000, 0.0 },
  { 2.3370708664492259, 2, 3.7500000000000000, 0.0 },
  { 2.9814005111442108, 2, 4.0000000000000000, 0.0 },
  { 3.7925108453347103, 2, 4.2500000000000000, 0.0 },
  { 4.8134912184214400, 2, 4.5000000000000000, 0.0 },
  { 6.0986278960713172, 2, 4.7500000000000000, 0.0 },
  { 7.7163253464501391, 2, 5.0000000000000000, 0.0 },
};
const double toler003 = 1.0000000000000006e-11;

// Test data for n=5.
// max(|f - f_GSL|): 7.7715611723760958e-16 at index 20
// max(|f - f_GSL| / |f_GSL|): 2.4349323796318752e-15
// mean(f - f_GSL): -3.8017984164915665e-17
// variance(f - f_GSL): 2.8682071937514839e-32
// stddev(f - f_GSL): 1.6935782219169812e-16
const testcase_sph_bessel_i<double>
data004[21] =
{
  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },
  { 9.4171472133463059e-08, 5, 0.25000000000000000, 0.0 },
  { 3.0352800236771825e-06, 5, 0.50000000000000000, 0.0 },
  { 2.3327280497022089e-05, 5, 0.75000000000000000, 0.0 },
  { 9.9962375200682592e-05, 5, 1.0000000000000000, 0.0 },
  { 0.00031168895164743486, 5, 1.2500000000000000, 0.0 },
  { 0.00079616126546980888, 5, 1.5000000000000000, 0.0 },
  { 0.0017747050338246357, 5, 1.7500000000000000, 0.0 },
  { 0.0035848483012706554, 5, 2.0000000000000000, 0.0 },
  { 0.0067233360901894374, 5, 2.2500000000000000, 0.0 },
  { 0.011903108529394538, 5, 2.5000000000000000, 0.0 },
  { 0.020128726077894975, 5, 2.7500000000000000, 0.0 },
  { 0.032796038709344506, 5, 3.0000000000000000, 0.0 },
  { 0.051823605198948984, 5, 3.2500000000000000, 0.0 },
  { 0.079825586295274878, 5, 3.5000000000000000, 0.0 },
  { 0.12033870666452313, 5, 3.7500000000000000, 0.0 },
  { 0.17811959211406247, 5, 4.0000000000000000, 0.0 },
  { 0.25953358154962847, 5, 4.2500000000000000, 0.0 },
  { 0.37306229715276251, 5, 4.5000000000000000, 0.0 },
  { 0.52996522956073666, 5, 4.7500000000000000, 0.0 },
  { 0.74514086898323684, 5, 5.0000000000000000, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_GSL|): 2.6020852139652106e-18 at index 20
// max(|f - f_GSL| / |f_GSL|): 7.2585511524649073e-15
// mean(f - f_GSL): 4.9570060715294040e-21
// variance(f - f_GSL): 3.5682512969533992e-37
// stddev(f - f_GSL): 5.9734841566320399e-19
const testcase_sph_bessel_i<double>
data005[21] =
{
  { 0.0000000000000000, 10, 0.0000000000000000, 0.0 },
  { 6.9455910134736489e-17, 10, 0.25000000000000000, 0.0 },
  { 7.1413267490447504e-14, 10, 0.50000000000000000, 0.0 },
  { 4.1461001041492784e-12, 10, 0.75000000000000000, 0.0 },
  { 7.4327935490948244e-11, 10, 1.0000000000000000, 0.0 },
  { 7.0073059882937007e-10, 10, 1.2500000000000000, 0.0 },
  { 4.4038545945543764e-09, 10, 1.5000000000000000, 0.0 },
  { 2.0938072324929073e-08, 10, 1.7500000000000000, 0.0 },
  { 8.1218232108368801e-08, 10, 2.0000000000000000, 0.0 },
  { 2.6985601525455940e-07, 10, 2.2500000000000000, 0.0 },
  { 7.9398098710350478e-07, 10, 2.5000000000000000, 0.0 },
  { 2.1182777793548696e-06, 10, 2.7500000000000000, 0.0 },
  { 5.2149461227634122e-06, 10, 3.0000000000000000, 0.0 },
  { 1.2005477394705086e-05, 10, 3.2500000000000000, 0.0 },
  { 2.6112795702696837e-05, 10, 3.5000000000000000, 0.0 },
  { 5.4103086504977796e-05, 10, 3.7500000000000000, 0.0 },
  { 0.00010748437005138937, 10, 4.0000000000000000, 0.0 },
  { 0.00020585438846387744, 10, 4.2500000000000000, 0.0 },
  { 0.00038176853054520233, 10, 4.5000000000000000, 0.0 },
  { 0.00068814966957889004, 10, 4.7500000000000000, 0.0 },
  { 0.0012094137020295750, 10, 5.0000000000000000, 0.0 },
};
const double toler005 = 5.0000000000000039e-13;

// Test data for n=20.
// max(|f - f_GSL|): 7.8355975993792661e-26 at index 19
// max(|f - f_GSL| / |f_GSL|): 2.3153664408375700e-14
// mean(f - f_GSL): 5.5332471654001896e-28
// variance(f - f_GSL): 2.8565675223794391e-52
// stddev(f - f_GSL): 1.6901383145705678e-26
const testcase_sph_bessel_i<double>
data006[21] =
{
  { 0.0000000000000000, 20, 0.0000000000000000, 0.0 },
  { 6.9408297945994195e-38, 20, 0.25000000000000000, 0.0 },
  { 7.2938712744408843e-32, 20, 0.50000000000000000, 0.0 },
  { 2.4342268546667399e-28, 20, 0.75000000000000000, 0.0 },
  { 7.7151475650656277e-26, 20, 1.0000000000000000, 0.0 },
  { 6.7357073162387499e-24, 20, 1.2500000000000000, 0.0 },
  { 2.6030142509881885e-22, 20, 1.5000000000000000, 0.0 },
  { 5.7346879859110787e-21, 20, 1.7500000000000000, 0.0 },
  { 8.3767284780476072e-20, 20, 2.0000000000000000, 0.0 },
  { 8.9428909687935903e-19, 20, 2.2500000000000000, 0.0 },
  { 7.4577378687525042e-18, 20, 2.5000000000000000, 0.0 },
  { 5.0940753287918243e-17, 20, 2.7500000000000000, 0.0 },
  { 2.9516512905661486e-16, 20, 3.0000000000000000, 0.0 },
  { 1.4899036869887540e-15, 20, 3.2500000000000000, 0.0 },
  { 6.6884264572181005e-15, 20, 3.5000000000000000, 0.0 },
  { 2.7144384541176350e-14, 20, 3.7500000000000000, 0.0 },
  { 1.0091688321190757e-13, 20, 4.0000000000000000, 0.0 },
  { 3.4743049759286458e-13, 20, 4.2500000000000000, 0.0 },
  { 1.1175810139215690e-12, 20, 4.5000000000000000, 0.0 },
  { 3.3841717065505991e-12, 20, 4.7500000000000000, 0.0 },
  { 9.7082664411470080e-12, 20, 5.0000000000000000, 0.0 },
};
const double toler006 = 2.5000000000000015e-12;
//  sph_bessel_i

// Test data for n=0.
// max(|f - f_GSL|): 5.8028439341502200e+25 at index 20
// max(|f - f_GSL| / |f_GSL|): 8.2778596073174592e-16
// mean(f - f_GSL): 2.7778196496424838e+24
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data007[21] =
{
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 14.840642115557751, 0, 5.0000000000000000, 0.0 },
  { 1101.3232874703394, 0, 10.000000000000000, 0.0 },
  { 108967.24574906015, 0, 15.000000000000000, 0.0 },
  { 12129129.885244757, 0, 20.000000000000000, 0.0 },
  { 1440097986.7477176, 0, 25.000000000000000, 0.0 },
  { 178107909692.07437, 0, 30.000000000000000, 0.0 },
  { 22657335033049.012, 0, 35.000000000000000, 0.0 },
  { 2942315835462750.0, 0, 40.000000000000000, 0.0 },
  { 3.8815856730538995e+17, 0, 45.000000000000000, 0.0 },
  { 5.1847055285870723e+19, 0, 50.000000000000000, 0.0 },
  { 6.9952593319472881e+21, 0, 55.000000000000000, 0.0 },
  { 9.5167282484640354e+23, 0, 60.000000000000000, 0.0 },
  { 1.3037609572387182e+26, 0, 65.000000000000000, 0.0 },
  { 1.7967419077994048e+28, 0, 70.000000000000000, 0.0 },
  { 2.4888279978660011e+30, 0, 75.000000000000000, 0.0 },
  { 3.4628889902459435e+32, 0, 80.000000000000000, 0.0 },
  { 4.8370663027193602e+34, 0, 85.000000000000000, 0.0 },
  { 6.7800183017657825e+36, 0, 90.000000000000000, 0.0 },
  { 9.5328372783632798e+38, 0, 95.000000000000000, 0.0 },
  { 1.3440585709080679e+41, 0, 100.00000000000000, 0.0 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 1.1805916207174113e+21 at index 18
// max(|f - f_GSL| / |f_GSL|): 6.2081625305292373e-16
// mean(f - f_GSL): 5.6225578777451839e+19
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data008[21] =
{
  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },
  { 11.873861281846017, 1, 5.0000000000000000, 0.0 },
  { 991.19096326329839, 1, 10.000000000000000, 0.0 },
  { 101702.76269914319, 1, 15.000000000000000, 0.0 },
  { 11522673.390982520, 1, 20.000000000000000, 0.0 },
  { 1382494067.2778087, 1, 25.000000000000000, 0.0 },
  { 172170979369.00522, 1, 30.000000000000000, 0.0 },
  { 22009982603533.324, 1, 35.000000000000000, 0.0 },
  { 2868757939576181.0, 1, 40.000000000000000, 0.0 },
  { 3.7953282136527014e+17, 1, 45.000000000000000, 0.0 },
  { 5.0810114180153303e+19, 1, 50.000000000000000, 0.0 },
  { 6.8680727986391566e+21, 1, 55.000000000000000, 0.0 },
  { 9.3581161109896353e+23, 1, 60.000000000000000, 0.0 },
  { 1.2837030963581225e+26, 1, 65.000000000000000, 0.0 },
  { 1.7710741662594135e+28, 1, 70.000000000000000, 0.0 },
  { 2.4556436245611209e+30, 1, 75.000000000000000, 0.0 },
  { 3.4196028778678696e+32, 1, 80.000000000000000, 0.0 },
  { 4.7801596403344268e+34, 1, 85.000000000000000, 0.0 },
  { 6.7046847650794962e+36, 1, 90.000000000000000, 0.0 },
  { 9.4324916228015628e+38, 1, 95.000000000000000, 0.0 },
  { 1.3306179851989872e+41, 1, 100.00000000000000, 0.0 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_GSL|): 5.8028439341502200e+25 at index 20
// max(|f - f_GSL| / |f_GSL|): 7.0645372237344669e-16
// mean(f - f_GSL): -2.7630899244585797e+24
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data009[21] =
{
  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { 7.7163253464501391, 2, 5.0000000000000000, 0.0 },
  { 803.96599849134986, 2, 10.000000000000000, 0.0 },
  { 88626.693209231511, 2, 15.000000000000000, 0.0 },
  { 10400728.876597380, 2, 20.000000000000000, 0.0 },
  { 1274198698.6743805, 2, 25.000000000000000, 0.0 },
  { 160890811755.17386, 2, 30.000000000000000, 0.0 },
  { 20770765095603.297, 2, 35.000000000000000, 0.0 },
  { 2727158989994536.0, 2, 40.000000000000000, 0.0 },
  { 3.6285637921437190e+17, 2, 45.000000000000000, 0.0 },
  { 4.8798448435061522e+19, 2, 50.000000000000000, 0.0 },
  { 6.6206371792942436e+21, 2, 55.000000000000000, 0.0 },
  { 9.0488224429145526e+23, 2, 60.000000000000000, 0.0 },
  { 1.2445131220221894e+26, 2, 65.000000000000000, 0.0 },
  { 1.7208387292454300e+28, 2, 70.000000000000000, 0.0 },
  { 2.3906022528835561e+30, 2, 75.000000000000000, 0.0 },
  { 3.3346538823258986e+32, 2, 80.000000000000000, 0.0 },
  { 4.6683547860016748e+34, 2, 85.000000000000000, 0.0 },
  { 6.5565288095964660e+36, 2, 90.000000000000000, 0.0 },
  { 9.2349691218537563e+38, 2, 95.000000000000000, 0.0 },
  { 1.3041400313520982e+41, 2, 100.00000000000000, 0.0 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 7.7371252455336267e+25 at index 20
// max(|f - f_GSL| / |f_GSL|): 1.3667046570518176e-15
// mean(f - f_GSL): -3.6987952993254923e+24
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data010[21] =
{
  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },
  { 0.74514086898323684, 5, 5.0000000000000000, 0.0 },
  { 236.83958270651149, 5, 10.000000000000000, 0.0 },
  { 39189.464560092289, 5, 15.000000000000000, 0.0 },
  { 5647455.5369280791, 5, 20.000000000000000, 0.0 },
  { 782610352.23648345, 5, 25.000000000000000, 0.0 },
  { 107263509635.27744, 5, 30.000000000000000, 0.0 },
  { 14681016988281.531, 5, 35.000000000000000, 0.0 },
  { 2013786901295025.8, 5, 40.000000000000000, 0.0 },
  { 2.7719753948203904e+17, 5, 45.000000000000000, 0.0 },
  { 3.8303991405619569e+19, 5, 50.000000000000000, 0.0 },
  { 5.3133223072353778e+21, 5, 55.000000000000000, 0.0 },
  { 7.3972950401893030e+23, 5, 60.000000000000000, 0.0 },
  { 1.0333682447551635e+26, 5, 65.000000000000000, 0.0 },
  { 1.4480970118782314e+28, 5, 70.000000000000000, 0.0 },
  { 2.0351160962691218e+30, 5, 75.000000000000000, 0.0 },
  { 2.8676485705927154e+32, 5, 80.000000000000000, 0.0 },
  { 4.0505412996258305e+34, 5, 85.000000000000000, 0.0 },
  { 5.7340947637554077e+36, 5, 90.000000000000000, 0.0 },
  { 8.1340004124710344e+38, 5, 95.000000000000000, 0.0 },
  { 1.1560104700065719e+41, 5, 100.00000000000000, 0.0 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_GSL|): 4.8357032784585167e+25 at index 20
// max(|f - f_GSL| / |f_GSL|): 2.1515261565157785e-15
// mean(f - f_GSL): -2.2989770905462872e+24
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data011[21] =
{
  { 0.0000000000000000, 10, 0.0000000000000000, 0.0 },
  { 0.0012094137020295750, 10, 5.0000000000000000, 0.0 },
  { 5.4645416534307270, 10, 10.000000000000000, 0.0 },
  { 2861.0331940403880, 10, 15.000000000000000, 0.0 },
  { 771563.89291744551, 10, 20.000000000000000, 0.0 },
  { 157771503.93992111, 10, 25.000000000000000, 0.0 },
  { 28144334181.074596, 10, 30.000000000000000, 0.0 },
  { 4657227944744.3965, 10, 35.000000000000000, 0.0 },
  { 737041543321430.50, 10, 40.000000000000000, 0.0 },
  { 1.1342284777394482e+17, 10, 45.000000000000000, 0.0 },
  { 1.7138050710910188e+19, 10, 50.000000000000000, 0.0 },
  { 2.5577794589282691e+21, 10, 55.000000000000000, 0.0 },
  { 3.7850074613897759e+23, 10, 60.000000000000000, 0.0 },
  { 5.5676977654845747e+25, 10, 65.000000000000000, 0.0 },
  { 8.1553674628717877e+27, 10, 70.000000000000000, 0.0 },
  { 1.1909606908007732e+30, 10, 75.000000000000000, 0.0 },
  { 1.7354540436481580e+32, 10, 80.000000000000000, 0.0 },
  { 2.5250090405342468e+34, 10, 85.000000000000000, 0.0 },
  { 3.6698383870211543e+36, 10, 90.000000000000000, 0.0 },
  { 5.3298346538524537e+38, 10, 95.000000000000000, 0.0 },
  { 7.7370381755353228e+40, 10, 100.00000000000000, 0.0 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for n=20.
// max(|f - f_GSL|): 7.2535549176877750e+24 at index 20
// max(|f - f_GSL| / |f_GSL|): 7.6550235420074353e-15
// mean(f - f_GSL): 3.5166189555521531e+23
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data012[21] =
{
  { 0.0000000000000000, 20, 0.0000000000000000, 0.0 },
  { 9.7082664411470080e-12, 20, 5.0000000000000000, 0.0 },
  { 2.3715435772561034e-05, 20, 10.000000000000000, 0.0 },
  { 0.30373354585337614, 20, 15.000000000000000, 0.0 },
  { 568.99642862605708, 20, 20.000000000000000, 0.0 },
  { 421966.07426167920, 20, 25.000000000000000, 0.0 },
  { 187264896.79220429, 20, 30.000000000000000, 0.0 },
  { 60882521775.809013, 20, 35.000000000000000, 0.0 },
  { 16186700699206.574, 20, 40.000000000000000, 0.0 },
  { 3753832736503227.0, 20, 45.000000000000000, 0.0 },
  { 7.9043041037673946e+17, 20, 50.000000000000000, 0.0 },
  { 1.5512135584359530e+20, 20, 55.000000000000000, 0.0 },
  { 2.8878682557035871e+22, 20, 60.000000000000000, 0.0 },
  { 5.1635197653100026e+24, 20, 65.000000000000000, 0.0 },
  { 8.9459878460375228e+26, 20, 70.000000000000000, 0.0 },
  { 1.5116619061153994e+29, 20, 75.000000000000000, 0.0 },
  { 2.5034952555111180e+31, 20, 80.000000000000000, 0.0 },
  { 4.0787202720664013e+33, 20, 85.000000000000000, 0.0 },
  { 6.5560361199881929e+35, 20, 90.000000000000000, 0.0 },
  { 1.0420428850962377e+38, 20, 95.000000000000000, 0.0 },
  { 1.6407475505991209e+40, 20, 100.00000000000000, 0.0 },
};
const double toler012 = 5.0000000000000039e-13;

// Test data for n=50.
// max(|f - f_GSL|): 4.8699404354593216e+21 at index 20
// max(|f - f_GSL| / |f_GSL|): 6.4393081154203940e-14
// mean(f - f_GSL): 2.3068048175655112e+20
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_i<double>
data013[21] =
{
  { 0.0000000000000000, 50, 0.0000000000000000, 0.0 },
  { 3.6424596640346334e-46, 50, 5.0000000000000000, 0.0 },
  { 5.8899161540502489e-31, 50, 10.000000000000000, 0.0 },
  { 6.8290220091889981e-22, 50, 15.000000000000000, 0.0 },
  { 2.7551965739613184e-15, 50, 20.000000000000000, 0.0 },
  { 5.4881735170878801e-10, 50, 25.000000000000000, 0.0 },
  { 1.7468643118038990e-05, 50, 30.000000000000000, 0.0 },
  { 0.16521306046026848, 50, 35.000000000000000, 0.0 },
  { 668.79008464922561, 50, 40.000000000000000, 0.0 },
  { 1459902.8720297134, 50, 45.000000000000000, 0.0 },
  { 2004898633.2778776, 50, 50.000000000000000, 0.0 },
  { 1927930196346.2388, 50, 55.000000000000000, 0.0 },
  { 1401687083158961.8, 50, 60.000000000000000, 0.0 },
  { 8.1524444290770253e+17, 50, 65.000000000000000, 0.0 },
  { 3.9575544662279809e+20, 50, 70.000000000000000, 0.0 },
  { 1.6564285518509375e+23, 50, 75.000000000000000, 0.0 },
  { 6.1304983763933921e+25, 50, 80.000000000000000, 0.0 },
  { 2.0466782848768234e+28, 50, 85.000000000000000, 0.0 },
  { 6.2624687960600826e+30, 50, 90.000000000000000, 0.0 },
  { 1.7789593692158918e+33, 50, 95.000000000000000, 0.0 },
  { 4.7409509594941738e+35, 50, 100.00000000000000, 0.0 },
};
const double toler013 = 5.0000000000000029e-12;

// Test data for n=100.
// max(|f - f_GSL|): 11010048.000000000 at index 20
// max(|f - f_GSL| / |f_GSL|): 2.7534800368006019e-13
// mean(f - f_GSL): 525703.93235893943
// variance(f - f_GSL): 1869122686362095.8
// stddev(f - f_GSL): 43233351.551343970
const testcase_sph_bessel_i<double>
data014[21] =
{
  { 0.0000000000000000, 100, 0.0000000000000000, 0.0 },
  { 6.2611369328234633e-120, 100, 5.0000000000000000, 0.0 },
  { 9.5446386609093728e-90, 100, 10.000000000000000, 0.0 },
  { 5.2732556191626321e-72, 100, 15.000000000000000, 0.0 },
  { 2.5221082180182095e-59, 100, 20.000000000000000, 0.0 },
  { 2.1406844749415110e-49, 100, 25.000000000000000, 0.0 },
  { 3.4485888797252755e-41, 100, 30.000000000000000, 0.0 },
  { 3.7283725278751719e-34, 100, 35.000000000000000, 0.0 },
  { 5.7422544260210540e-28, 100, 40.000000000000000, 0.0 },
  { 2.0450469578641674e-22, 100, 45.000000000000000, 0.0 },
  { 2.3418937401088263e-17, 100, 50.000000000000000, 0.0 },
  { 1.0898764694486447e-12, 100, 55.000000000000000, 0.0 },
  { 2.4481305851647831e-08, 100, 60.000000000000000, 0.0 },
  { 0.00030220938075344966, 100, 65.000000000000000, 0.0 },
  { 2.2661374734011708, 100, 70.000000000000000, 0.0 },
  { 11167.305724756836, 100, 75.000000000000000, 0.0 },
  { 38510672.874965981, 100, 80.000000000000000, 0.0 },
  { 97783146557.016205, 100, 85.000000000000000, 0.0 },
  { 190578297921468.88, 100, 90.000000000000000, 0.0 },
  { 2.9509429116573683e+17, 100, 95.000000000000000, 0.0 },
  { 3.7359887415969533e+20, 100, 100.00000000000000, 0.0 },
};
const double toler014 = 2.5000000000000014e-11;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_sph_bessel_i<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::sph_bessel_i(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  return 0;
}
