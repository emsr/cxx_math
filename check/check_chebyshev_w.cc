// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  chebyshev_w
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_chebyshev_w<double>
data001[21] =
{
  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },
  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },
  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },
  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },
  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },
  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 4.4408920985006262e-16 at index 15
// max(|f - f_GSL| / |f_GSL|): 1.3877787807814425e-15
// mean(f - f_GSL): 8.4329042172806634e-18
// variance(f - f_GSL): 3.7334783607360747e-36
// stddev(f - f_GSL): 1.9322210952000485e-18
const testcase_chebyshev_w<double>
data002[21] =
{
  { -1.0000000000000000, 1, -1.0000000000000000, 0.0 },
  { -0.80000000000000016, 1, -0.90000000000000002, 0.0 },
  { -0.60000000000000009, 1, -0.80000000000000004, 0.0 },
  { -0.40000000000000030, 1, -0.69999999999999996, 0.0 },
  { -0.19999999999999971, 1, -0.59999999999999998, 0.0 },
  { -3.7138001787229633e-16, 1, -0.50000000000000000, 0.0 },
  { 0.20000000000000046, 1, -0.39999999999999991, 0.0 },
  { 0.40000000000000052, 1, -0.29999999999999993, 0.0 },
  { 0.59999999999999998, 1, -0.19999999999999996, 0.0 },
  { 0.80000000000000016, 1, -0.099999999999999978, 0.0 },
  { 1.0000000000000002, 1, 0.0000000000000000, 0.0 },
  { 1.2000000000000000, 1, 0.10000000000000009, 0.0 },
  { 1.4000000000000001, 1, 0.20000000000000018, 0.0 },
  { 1.6000000000000003, 1, 0.30000000000000004, 0.0 },
  { 1.8000000000000000, 1, 0.40000000000000013, 0.0 },
  { 2.0000000000000004, 1, 0.50000000000000000, 0.0 },
  { 2.2000000000000002, 1, 0.60000000000000009, 0.0 },
  { 2.4000000000000004, 1, 0.70000000000000018, 0.0 },
  { 2.5999999999999996, 1, 0.80000000000000004, 0.0 },
  { 2.8000000000000003, 1, 0.90000000000000013, 0.0 },
  { 3.0000000000000000, 1, 1.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 2.2204460492503131e-15 at index 19
// max(|f - f_GSL| / |f_GSL|): 5.5610013477439714e-15
// mean(f - f_GSL): -1.5860328923216521e-17
// variance(f - f_GSL): 1.3206376761512475e-35
// stddev(f - f_GSL): 3.6340578918768580e-18
const testcase_chebyshev_w<double>
data003[21] =
{
  { -1.0000000000000000, 5, -1.0000000000000000, 0.0 },
  { 0.80992000000000008, 5, -0.90000000000000002, 0.0 },
  { 0.97184000000000004, 5, -0.80000000000000004, 0.0 },
  { 0.35936000000000146, 5, -0.69999999999999996, 0.0 },
  { -0.42272000000000021, 5, -0.59999999999999998, 0.0 },
  { -0.99999999999999944, 5, -0.50000000000000000, 0.0 },
  { -1.1900800000000000, 5, -0.39999999999999991, 0.0 },
  { -0.96415999999999935, 5, -0.29999999999999993, 0.0 },
  { -0.40864000000000011, 5, -0.19999999999999996, 0.0 },
  { 0.31328000000000084, 5, -0.099999999999999978, 0.0 },
  { 1.0000000000000013, 5, 0.0000000000000000, 0.0 },
  { 1.4499199999999999, 5, 0.10000000000000009, 0.0 },
  { 1.4998399999999998, 5, 0.20000000000000018, 0.0 },
  { 1.0633599999999990, 5, 0.30000000000000004, 0.0 },
  { 0.16927999999999876, 5, 0.40000000000000013, 0.0 },
  { -1.0000000000000011, 5, 0.50000000000000000, 0.0 },
  { -2.0700800000000008, 5, 0.60000000000000009, 0.0 },
  { -2.4361599999999997, 5, 0.70000000000000018, 0.0 },
  { -1.2246399999999982, 5, 0.80000000000000004, 0.0 },
  { 2.7452800000000068, 5, 0.90000000000000013, 0.0 },
  { 11.000000000000000, 5, 1.0000000000000000, 0.0 },
};
const double toler003 = 5.0000000000000039e-13;

// Test data for n=8.
// max(|f - f_GSL|): 2.8865798640254070e-15 at index 15
// max(|f - f_GSL| / |f_GSL|): 8.1720443183085951e-14
// mean(f - f_GSL): -2.6599093298311044e-16
// variance(f - f_GSL): 3.7144367625343406e-33
// stddev(f - f_GSL): 6.0946179228351479e-17
const testcase_chebyshev_w<double>
data004[21] =
{
  { 1.0000000000000000, 8, -1.0000000000000000, 0.0 },
  { -0.78988543999999905, 8, -0.90000000000000002, 0.0 },
  { 0.72417535999999993, 8, -0.80000000000000004, 0.0 },
  { 0.96322816000000056, 8, -0.69999999999999996, 0.0 },
  { -0.031331840000002782, 8, -0.59999999999999998, 0.0 },
  { -0.99999999999999967, 8, -0.50000000000000000, 0.0 },
  { -1.0868710399999990, 8, -0.39999999999999991, 0.0 },
  { -0.28722943999999689, 8, -0.29999999999999993, 0.0 },
  { 0.77578495999999975, 8, -0.19999999999999996, 0.0 },
  { 1.3454617600000003, 8, -0.099999999999999978, 0.0 },
  { 1.0000000000000004, 8, 0.0000000000000000, 0.0 },
  { -0.098352640000000116, 8, 0.10000000000000009, 0.0 },
  { -1.2638182400000015, 8, 0.20000000000000018, 0.0 },
  { -1.6443622400000002, 8, 0.30000000000000004, 0.0 },
  { -0.75960063999999949, 8, 0.40000000000000013, 0.0 },
  { 1.0000000000000029, 8, 0.50000000000000000, 0.0 },
  { 2.2351897600000004, 8, 0.60000000000000009, 0.0 },
  { 1.1870489599999976, 8, 0.70000000000000018, 0.0 },
  { -2.2978534400000030, 8, 0.80000000000000004, 0.0 },
  { -2.8540390399999929, 8, 0.90000000000000013, 0.0 },
  { 17.000000000000000, 8, 1.0000000000000000, 0.0 },
};
const double toler004 = 5.0000000000000029e-12;

// Test data for n=10.
// max(|f - f_GSL|): 3.6637359812630166e-15 at index 3
// max(|f - f_GSL| / |f_GSL|): 7.0752379412986281e-15
// mean(f - f_GSL): 1.6538140671491784e-17
// variance(f - f_GSL): 1.4359280085677661e-35
// stddev(f - f_GSL): 3.7893640740469449e-18
const testcase_chebyshev_w<double>
data005[21] =
{
  { 1.0000000000000000, 10, -1.0000000000000000, 0.0 },
  { 0.023998054399998959, 10, -0.90000000000000002, 0.0 },
  { 0.93808220160000000, 10, -0.80000000000000004, 0.0 },
  { -0.51782512639999700, 10, -0.69999999999999996, 0.0 },
  { -1.0641181695999991, 10, -0.59999999999999998, 0.0 },
  { -3.1124501748083580e-15, 10, -0.50000000000000000, 0.0 },
  { 1.1036806144000006, 10, -0.39999999999999991, 0.0 },
  { 0.92616028159999786, 10, -0.29999999999999993, 0.0 },
  { -0.30930032639999960, 10, -0.19999999999999996, 0.0 },
  { -1.3008490496000005, 10, -0.099999999999999978, 0.0 },
  { -1.0000000000000002, 10, 0.0000000000000000, 0.0 },
  { 0.39238717440000015, 10, 0.10000000000000009, 0.0 },
  { 1.5350895616000009, 10, 0.20000000000000018, 0.0 },
  { 1.1243380735999995, 10, 0.30000000000000004, 0.0 },
  { -0.70076712960000320, 10, 0.40000000000000013, 0.0 },
  { -2.0000000000000004, 10, 0.50000000000000000, 0.0 },
  { -0.68601026559999589, 10, 0.60000000000000009, 0.0 },
  { 2.2687420416000039, 10, 0.70000000000000018, 0.0 },
  { 1.4422260735999965, 10, 0.80000000000000004, 0.0 },
  { -4.4709124096000030, 10, 0.90000000000000013, 0.0 },
  { 21.000000000000000, 10, 1.0000000000000000, 0.0 },
};
const double toler005 = 5.0000000000000039e-13;

// Test data for n=20.
// max(|f - f_GSL|): 6.9944050551384862e-15 at index 9
// max(|f - f_GSL| / |f_GSL|): 1.7397449173271265e-14
// mean(f - f_GSL): -2.7755575615628914e-16
// variance(f - f_GSL): 4.0444528832131953e-33
// stddev(f - f_GSL): 6.3596013107845015e-17
const testcase_chebyshev_w<double>
data006[21] =
{
  { 1.0000000000000000, 20, -1.0000000000000000, 0.0 },
  { -1.0096350973538502, 20, -0.90000000000000002, 0.0 },
  { 0.85458211259118788, 20, -0.80000000000000004, 0.0 },
  { -0.89660062573515698, 20, -0.69999999999999996, 0.0 },
  { 1.1037543614593990, 20, -0.59999999999999998, 0.0 },
  { -0.99999999999999600, 20, -0.50000000000000000, 0.0 },
  { 0.24130140035436093, 20, -0.39999999999999991, 0.0 },
  { 0.84402681417869085, 20, -0.29999999999999993, 0.0 },
  { -1.2650429316715133, 20, -0.19999999999999996, 0.0 },
  { 0.40203624022563067, 20, -0.099999999999999978, 0.0 },
  { 0.99999999999999623, 20, 0.0000000000000000, 0.0 },
  { -1.4229092060125628, 20, 0.10000000000000009, 0.0 },
  { 0.31543552675929620, 20, 0.20000000000000018, 0.0 },
  { 1.2386077195392602, 20, 0.30000000000000004, 0.0 },
  { -1.7881475926508605, 20, 0.40000000000000013, 0.0 },
  { 1.0000000000000069, 20, 0.50000000000000000, 0.0 },
  { 0.35623761485475725, 20, 0.60000000000000009, 0.0 },
  { -1.4530226431858648, 20, 0.70000000000000018, 0.0 },
  { 1.8512711080640294, 20, 0.80000000000000004, 0.0 },
  { 0.79504869890744312, 20, 0.90000000000000013, 0.0 },
  { 41.000000000000000, 20, 1.0000000000000000, 0.0 },
};
const double toler006 = 1.0000000000000008e-12;

// Test data for n=40.
// max(|f - f_GSL|): 9.9364960703951510e-15 at index 16
// max(|f - f_GSL| / |f_GSL|): 3.1039930526159287e-14
// mean(f - f_GSL): 1.2091445658744375e-15
// variance(f - f_GSL): 7.6756605512143294e-32
// stddev(f - f_GSL): 2.7704982496320636e-16
const testcase_chebyshev_w<double>
data007[21] =
{
  { 1.0000000000000000, 40, -1.0000000000000000, 0.0 },
  { 0.85651884958432201, 40, -0.90000000000000002, 0.0 },
  { 0.63097169179115631, 40, -0.80000000000000004, 0.0 },
  { 0.75745186284308497, 40, -0.69999999999999996, 0.0 },
  { 1.1065174331497729, 40, -0.59999999999999998, 0.0 },
  { -8.4888903334451777e-15, 40, -0.50000000000000000, 0.0 },
  { -1.1773725987499923, 40, -0.39999999999999991, 0.0 },
  { 0.65788833124631596, 40, -0.29999999999999993, 0.0 },
  { 0.60116875594653163, 40, -0.19999999999999996, 0.0 },
  { -1.3370585083307165, 40, -0.099999999999999978, 0.0 },
  { 0.99999999999999478, 40, 0.0000000000000000, 0.0 },
  { 0.19293637359528412, 40, 0.10000000000000009, 0.0 },
  { -1.3992477229963809, 40, 0.20000000000000018, 0.0 },
  { 1.4329479238333860, 40, 0.30000000000000004, 0.0 },
  { 0.31440756245615642, 40, 0.40000000000000013, 0.0 },
  { -2.0000000000000004, 40, 0.50000000000000000, 0.0 },
  { -0.32011979092611192, 40, 0.60000000000000009, 0.0 },
  { 1.8481101593325120, 40, 0.70000000000000018, 0.0 },
  { 2.5331546572256292, 40, 0.80000000000000004, 0.0 },
  { -2.4619369906292436, 40, 0.90000000000000013, 0.0 },
  { 81.000000000000000, 40, 1.0000000000000000, 0.0 },
};
const double toler007 = 2.5000000000000015e-12;

// Test data for n=100.
// max(|f - f_GSL|): 2.5701663020072374e-14 at index 3
// max(|f - f_GSL| / |f_GSL|): 1.0057378098660902e-12
// mean(f - f_GSL): 4.6365131959433446e-15
// variance(f - f_GSL): 1.1286058673482304e-30
// stddev(f - f_GSL): 1.0623586340535998e-15
const testcase_chebyshev_w<double>
data008[21] =
{
  { 1.0000000000000000, 100, -1.0000000000000000, 0.0 },
  { 0.22880117622182833, 100, -0.90000000000000002, 0.0 },
  { -0.28035903752475666, 100, -0.80000000000000004, 0.0 },
  { -0.18674254467754675, 100, -0.69999999999999996, 0.0 },
  { 0.55182443700502926, 100, -0.59999999999999998, 0.0 },
  { -1.9241770650718760e-14, 100, -0.50000000000000000, 0.0 },
  { -1.1523528299091810, 100, -0.39999999999999991, 0.0 },
  { -0.011059589108461852, 100, -0.29999999999999993, 0.0 },
  { 1.0643966872442276, 100, -0.19999999999999996, 0.0 },
  { -1.3345690929659346, 100, -0.099999999999999978, 0.0 },
  { 0.99999999999999822, 100, 0.0000000000000000, 0.0 },
  { -0.21296288072517755, 100, 0.10000000000000009, 0.0 },
  { -0.89475669222160348, 100, 0.20000000000000018, 0.0 },
  { 1.6902413146121977, 100, 0.30000000000000004, 0.0 },
  { -0.48462380179611242, 100, 0.40000000000000013, 0.0 },
  { -2.0000000000000004, 100, 0.50000000000000000, 0.0 },
  { -1.9447259865843485, 100, 0.60000000000000009, 0.0 },
  { -2.5434335568364412, 100, 0.70000000000000018, 0.0 },
  { 3.0483748605943708, 100, 0.80000000000000004, 0.0 },
  { 4.3595126348515461, 100, 0.90000000000000013, 0.0 },
  { 201.00000000000000, 100, 1.0000000000000000, 0.0 },
};
const double toler008 = 1.0000000000000006e-10;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_chebyshev_w<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::chebyshev_w(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  return 0;
}
