// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  sinint

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 2.2204460492503131e-15 at index 22
// max(|f - f_GSL| / |f_GSL|): 1.2893022894793568e-15
// mean(f - f_GSL): -4.0939474033052650e-17
// variance(f - f_GSL): 1.7100709459269380e-35
// stddev(f - f_GSL): 4.1353004073790550e-18
const testcase_sinint<double>
data001[100] =
{
  { 0.099944461108276969, 0.10000000000000001, 0.0 },
  { 0.19955608852623385, 0.20000000000000001, 0.0 },
  { 0.29850404380704321, 0.30000000000000004, 0.0 },
  { 0.39646146475137289, 0.40000000000000002, 0.0 },
  { 0.49310741804306674, 0.50000000000000000, 0.0 },
  { 0.58812880960808012, 0.60000000000000009, 0.0 },
  { 0.68122223911661139, 0.70000000000000007, 0.0 },
  { 0.77209578548199664, 0.80000000000000004, 0.0 },
  { 0.86047071074529291, 0.90000000000000002, 0.0 },
  { 0.94608307036718298, 1.0000000000000000, 0.0 },
  { 1.0286852186737336, 1.1000000000000001, 0.0 },
  { 1.1080471990137188, 1.2000000000000002, 0.0 },
  { 1.1839580090760631, 1.3000000000000000, 0.0 },
  { 1.2562267327792180, 1.4000000000000001, 0.0 },
  { 1.3246835311721197, 1.5000000000000000, 0.0 },
  { 1.3891804858704386, 1.6000000000000001, 0.0 },
  { 1.4495922896833213, 1.7000000000000002, 0.0 },
  { 1.5058167802555786, 1.8000000000000000, 0.0 },
  { 1.5577753137488186, 1.9000000000000001, 0.0 },
  { 1.6054129768026948, 2.0000000000000000, 0.0 },
  { 1.6486986362444189, 2.1000000000000001, 0.0 },
  { 1.6876248272410985, 2.2000000000000002, 0.0 },
  { 1.7222074818055033, 2.3000000000000003, 0.0 },
  { 1.7524855007617677, 2.4000000000000004, 0.0 },
  { 1.7785201734438267, 2.5000000000000000, 0.0 },
  { 1.8003944505267702, 2.6000000000000001, 0.0 },
  { 1.8182120764708660, 2.7000000000000002, 0.0 },
  { 1.8320965890813223, 2.8000000000000003, 0.0 },
  { 1.8421901946458585, 2.9000000000000004, 0.0 },
  { 1.8486525279994683, 3.0000000000000000, 0.0 },
  { 1.8516593076745198, 3.1000000000000001, 0.0 },
  { 1.8514008970184399, 3.2000000000000002, 0.0 },
  { 1.8480807827952115, 3.3000000000000003, 0.0 },
  { 1.8419139833261431, 3.4000000000000004, 0.0 },
  { 1.8331253986659970, 3.5000000000000000, 0.0 },
  { 1.8219481156495034, 3.6000000000000001, 0.0 },
  { 1.8086216808784537, 3.7000000000000002, 0.0 },
  { 1.7933903548495700, 3.8000000000000003, 0.0 },
  { 1.7765013604478053, 3.9000000000000004, 0.0 },
  { 1.7582031389490531, 4.0000000000000000, 0.0 },
  { 1.7387436264917688, 4.1000000000000005, 0.0 },
  { 1.7183685636908683, 4.2000000000000002, 0.0 },
  { 1.6973198506824685, 4.2999999999999998, 0.0 },
  { 1.6758339594083742, 4.4000000000000004, 0.0 },
  { 1.6541404143792440, 4.5000000000000000, 0.0 },
  { 1.6324603525003496, 4.6000000000000005, 0.0 },
  { 1.6110051718097811, 4.7000000000000002, 0.0 },
  { 1.5899752781723655, 4.8000000000000007, 0.0 },
  { 1.5695589381006518, 4.9000000000000004, 0.0 },
  { 1.5499312449446740, 5.0000000000000000, 0.0 },
  { 1.5312532047129215, 5.1000000000000005, 0.0 },
  { 1.5136709467664804, 5.2000000000000002, 0.0 },
  { 1.4973150635753310, 5.3000000000000007, 0.0 },
  { 1.4823000826492898, 5.4000000000000004, 0.0 },
  { 1.4687240726650985, 5.5000000000000000, 0.0 },
  { 1.4566683847148312, 5.6000000000000005, 0.0 },
  { 1.4461975285082345, 5.7000000000000002, 0.0 },
  { 1.4373591822818204, 5.8000000000000007, 0.0 },
  { 1.4301843341093661, 5.9000000000000004, 0.0 },
  { 1.4246875512805066, 6.0000000000000000, 0.0 },
  { 1.4208673734246202, 6.1000000000000005, 0.0 },
  { 1.4187068241140941, 6.2000000000000002, 0.0 },
  { 1.4181740347917269, 6.3000000000000007, 0.0 },
  { 1.4192229740384332, 6.4000000000000004, 0.0 },
  { 1.4217942744358816, 6.5000000000000000, 0.0 },
  { 1.4258161485899785, 6.6000000000000005, 0.0 },
  { 1.4312053852702635, 6.7000000000000002, 0.0 },
  { 1.4378684160916848, 6.8000000000000007, 0.0 },
  { 1.4457024427225011, 6.9000000000000004, 0.0 },
  { 1.4545966142480935, 7.0000000000000000, 0.0 },
  { 1.4644332440573409, 7.1000000000000005, 0.0 },
  { 1.4750890554472462, 7.2000000000000002, 0.0 },
  { 1.4864364450631682, 7.3000000000000007, 0.0 },
  { 1.4983447533060557, 7.4000000000000004, 0.0 },
  { 1.5106815309433859, 7.5000000000000000, 0.0 },
  { 1.5233137913552581, 7.6000000000000005, 0.0 },
  { 1.5361092381286596, 7.7000000000000002, 0.0 },
  { 1.5489374580779958, 7.8000000000000007, 0.0 },
  { 1.5616710702145500, 7.9000000000000004, 0.0 },
  { 1.5741868217069421, 8.0000000000000000, 0.0 },
  { 1.5863666224636430, 8.0999999999999996, 0.0 },
  { 1.5980985106213734, 8.2000000000000011, 0.0 },
  { 1.6092775419334209, 8.3000000000000007, 0.0 },
  { 1.6198065968128845, 8.4000000000000004, 0.0 },
  { 1.6295970995903857, 8.5000000000000000, 0.0 },
  { 1.6385696453865486, 8.5999999999999996, 0.0 },
  { 1.6466545308687808, 8.7000000000000011, 0.0 },
  { 1.6537921860518139, 8.8000000000000007, 0.0 },
  { 1.6599335052041071, 8.9000000000000004, 0.0 },
  { 1.6650400758296022, 9.0000000000000000, 0.0 },
  { 1.6690843055985152, 9.0999999999999996, 0.0 },
  { 1.6720494479940158, 9.2000000000000011, 0.0 },
  { 1.6739295283161346, 9.3000000000000007, 0.0 },
  { 1.6747291725325948, 9.4000000000000004, 0.0 },
  { 1.6744633422814330, 9.5000000000000000, 0.0 },
  { 1.6731569801054447, 9.6000000000000014, 0.0 },
  { 1.6708445697273633, 9.7000000000000011, 0.0 },
  { 1.6675696168513867, 9.8000000000000007, 0.0 },
  { 1.6633840565958646, 9.9000000000000004, 0.0 },
  { 1.6583475942188739, 10.000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_sinint<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::sinint(data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
