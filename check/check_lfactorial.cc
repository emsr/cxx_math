// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  lfactorial

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Divergence at n=172 f=inf f_GSL=716.86222027910344
// Divergence at n=173 f=inf f_GSL=722.01551187360121
// Divergence at n=174 f=inf f_GSL=727.17456717281561
//  ...
// Divergence at n=500 f=inf f_GSL=2611.3304584601556
// Test data.
// max(|f - f_GSL|): 711.71472580228999
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): -4.1378763128040115
// variance(f - f_GSL): 2944.9875053710980
// stddev(f - f_GSL): 54.267739084755483
const testcase_lfactorial<double>
data001[172] =
{
  { 0.0000000000000000, 0, 0.0 },
  { 0.0000000000000000, 1, 0.0 },
  { 0.69314718055994529, 2, 0.0 },
  { 1.7917594692280550, 3, 0.0 },
  { 3.1780538303479458, 4, 0.0 },
  { 4.7874917427820458, 5, 0.0 },
  { 6.5792512120101012, 6, 0.0 },
  { 8.5251613610654147, 7, 0.0 },
  { 10.604602902745251, 8, 0.0 },
  { 12.801827480081469, 9, 0.0 },
  { 15.104412573075516, 10, 0.0 },
  { 17.502307845873887, 11, 0.0 },
  { 19.987214495661885, 12, 0.0 },
  { 22.552163853123425, 13, 0.0 },
  { 25.191221182738680, 14, 0.0 },
  { 27.899271383840890, 15, 0.0 },
  { 30.671860106080672, 16, 0.0 },
  { 33.505073450136891, 17, 0.0 },
  { 36.395445208033053, 18, 0.0 },
  { 39.339884187199495, 19, 0.0 },
  { 42.335616460753485, 20, 0.0 },
  { 45.380138898476908, 21, 0.0 },
  { 48.471181351835227, 22, 0.0 },
  { 51.606675567764377, 23, 0.0 },
  { 54.784729398112319, 24, 0.0 },
  { 58.003605222980518, 25, 0.0 },
  { 61.261701761002001, 26, 0.0 },
  { 64.557538627006338, 27, 0.0 },
  { 67.889743137181540, 28, 0.0 },
  { 71.257038967168015, 29, 0.0 },
  { 74.658236348830158, 30, 0.0 },
  { 78.092223553315307, 31, 0.0 },
  { 81.557959456115043, 32, 0.0 },
  { 85.054467017581516, 33, 0.0 },
  { 88.580827542197682, 34, 0.0 },
  { 92.136175603687093, 35, 0.0 },
  { 95.719694542143202, 36, 0.0 },
  { 99.330612454787428, 37, 0.0 },
  { 102.96819861451381, 38, 0.0 },
  { 106.63176026064346, 39, 0.0 },
  { 110.32063971475739, 40, 0.0 },
  { 114.03421178146171, 41, 0.0 },
  { 117.77188139974507, 42, 0.0 },
  { 121.53308151543864, 43, 0.0 },
  { 125.31727114935690, 44, 0.0 },
  { 129.12393363912722, 45, 0.0 },
  { 132.95257503561632, 46, 0.0 },
  { 136.80272263732635, 47, 0.0 },
  { 140.67392364823425, 48, 0.0 },
  { 144.56574394634490, 49, 0.0 },
  { 148.47776695177302, 50, 0.0 },
  { 152.40959258449735, 51, 0.0 },
  { 156.36083630307880, 52, 0.0 },
  { 160.33112821663090, 53, 0.0 },
  { 164.32011226319517, 54, 0.0 },
  { 168.32744544842765, 55, 0.0 },
  { 172.35279713916279, 56, 0.0 },
  { 176.39584840699735, 57, 0.0 },
  { 180.45629141754378, 58, 0.0 },
  { 184.53382886144948, 59, 0.0 },
  { 188.62817342367160, 60, 0.0 },
  { 192.73904728784490, 61, 0.0 },
  { 196.86618167289001, 62, 0.0 },
  { 201.00931639928152, 63, 0.0 },
  { 205.16819948264120, 64, 0.0 },
  { 209.34258675253685, 65, 0.0 },
  { 213.53224149456327, 66, 0.0 },
  { 217.73693411395422, 67, 0.0 },
  { 221.95644181913033, 68, 0.0 },
  { 226.19054832372760, 69, 0.0 },
  { 230.43904356577696, 70, 0.0 },
  { 234.70172344281826, 71, 0.0 },
  { 238.97838956183432, 72, 0.0 },
  { 243.26884900298271, 73, 0.0 },
  { 247.57291409618688, 74, 0.0 },
  { 251.89040220972319, 75, 0.0 },
  { 256.22113555000954, 76, 0.0 },
  { 260.56494097186322, 77, 0.0 },
  { 264.92164979855278, 78, 0.0 },
  { 269.29109765101981, 79, 0.0 },
  { 273.67312428569369, 80, 0.0 },
  { 278.06757344036612, 81, 0.0 },
  { 282.47429268763040, 82, 0.0 },
  { 286.89313329542699, 83, 0.0 },
  { 291.32395009427029, 84, 0.0 },
  { 295.76660135076065, 85, 0.0 },
  { 300.22094864701415, 86, 0.0 },
  { 304.68685676566872, 87, 0.0 },
  { 309.16419358014690, 88, 0.0 },
  { 313.65282994987905, 89, 0.0 },
  { 318.15263962020930, 90, 0.0 },
  { 322.66349912672615, 91, 0.0 },
  { 327.18528770377520, 92, 0.0 },
  { 331.71788719692847, 93, 0.0 },
  { 336.26118197919845, 94, 0.0 },
  { 340.81505887079902, 95, 0.0 },
  { 345.37940706226686, 96, 0.0 },
  { 349.95411804077025, 97, 0.0 },
  { 354.53908551944079, 98, 0.0 },
  { 359.13420536957540, 99, 0.0 },
  { 363.73937555556347, 100, 0.0 },
  { 368.35449607240474, 101, 0.0 },
  { 372.97946888568902, 102, 0.0 },
  { 377.61419787391867, 103, 0.0 },
  { 382.25858877306001, 104, 0.0 },
  { 386.91254912321756, 105, 0.0 },
  { 391.57598821732961, 106, 0.0 },
  { 396.24881705179155, 107, 0.0 },
  { 400.93094827891576, 108, 0.0 },
  { 405.62229616114490, 109, 0.0 },
  { 410.32277652693733, 110, 0.0 },
  { 415.03230672824964, 111, 0.0 },
  { 419.75080559954472, 112, 0.0 },
  { 424.47819341825709, 113, 0.0 },
  { 429.21439186665157, 114, 0.0 },
  { 433.95932399501481, 115, 0.0 },
  { 438.71291418612117, 116, 0.0 },
  { 443.47508812091894, 117, 0.0 },
  { 448.24577274538461, 118, 0.0 },
  { 453.02489623849613, 119, 0.0 },
  { 457.81238798127816, 120, 0.0 },
  { 462.60817852687489, 121, 0.0 },
  { 467.41219957160820, 122, 0.0 },
  { 472.22438392698058, 123, 0.0 },
  { 477.04466549258564, 124, 0.0 },
  { 481.87297922988796, 125, 0.0 },
  { 486.70926113683942, 126, 0.0 },
  { 491.55344822329801, 127, 0.0 },
  { 496.40547848721764, 128, 0.0 },
  { 501.26529089157930, 129, 0.0 },
  { 506.13282534203489, 130, 0.0 },
  { 511.00802266523601, 131, 0.0 },
  { 515.89082458782241, 132, 0.0 },
  { 520.78117371604412, 133, 0.0 },
  { 525.67901351599505, 134, 0.0 },
  { 530.58428829443346, 135, 0.0 },
  { 535.49694318016952, 136, 0.0 },
  { 540.41692410599762, 137, 0.0 },
  { 545.34417779115483, 138, 0.0 },
  { 550.27865172428551, 139, 0.0 },
  { 555.22029414689484, 140, 0.0 },
  { 560.16905403727299, 141, 0.0 },
  { 565.12488109487435, 142, 0.0 },
  { 570.08772572513419, 143, 0.0 },
  { 575.05753902471020, 144, 0.0 },
  { 580.03427276713080, 145, 0.0 },
  { 585.01787938883911, 146, 0.0 },
  { 590.00831197561786, 147, 0.0 },
  { 595.00552424938201, 148, 0.0 },
  { 600.00947055532743, 149, 0.0 },
  { 605.02010584942366, 150, 0.0 },
  { 610.03738568623862, 151, 0.0 },
  { 615.06126620708494, 152, 0.0 },
  { 620.09170412847732, 153, 0.0 },
  { 625.12865673089095, 154, 0.0 },
  { 630.17208184781020, 155, 0.0 },
  { 635.22193785505976, 156, 0.0 },
  { 640.27818366040799, 157, 0.0 },
  { 645.34077869343503, 158, 0.0 },
  { 650.40968289565524, 159, 0.0 },
  { 655.48485671088906, 160, 0.0 },
  { 660.56626107587351, 161, 0.0 },
  { 665.65385741110595, 162, 0.0 },
  { 670.74760761191271, 163, 0.0 },
  { 675.84747403973688, 164, 0.0 },
  { 680.95341951363741, 165, 0.0 },
  { 686.06540730199401, 166, 0.0 },
  { 691.18340111441080, 167, 0.0 },
  { 696.30736509381404, 168, 0.0 },
  { 701.43726380873704, 169, 0.0 },
  { 706.57306224578736, 170, 0.0 },
  { 711.71472580228999, 171, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_lfactorial<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::lfactorial<Ret>(data[i].n);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
