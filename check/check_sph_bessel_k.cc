// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  sph_bessel_k
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 1.3322676295501878e-15 at index 1
// max(|f - f_GSL| / |f_GSL|): 1.6014974920990943e-15
// mean(f - f_GSL): 4.1026210206851485e-17
// variance(f - f_GSL): 9.3249303265194745e-35
// stddev(f - f_GSL): 9.6565678822858569e-18
const testcase_sph_bessel_k<double>
data001[20] =
{
  { 4.8933496374142074, 0, 0.25000000000000000, 0.0 },
  { 1.9054722647301798, 0, 0.50000000000000000, 0.0 },
  { 0.98932219459513815, 0, 0.75000000000000000, 0.0 },
  { 0.57786367489546075, 0, 1.0000000000000000, 0.0 },
  { 0.36003254601368367, 0, 1.2500000000000000, 0.0 },
  { 0.23366135730554036, 0, 1.5000000000000000, 0.0 },
  { 0.15597912689407045, 0, 1.7500000000000000, 0.0 },
  { 0.10629208289690908, 0, 2.0000000000000000, 0.0 },
  { 0.073582539906136418, 0, 2.2500000000000000, 0.0 },
  { 0.051575525729353748, 0, 2.5000000000000000, 0.0 },
  { 0.036515508932127350, 0, 2.7500000000000000, 0.0 },
  { 0.026068448038042355, 0, 3.0000000000000000, 0.0 },
  { 0.018740425611215642, 0, 3.2500000000000000, 0.0 },
  { 0.013552553988170001, 0, 3.5000000000000000, 0.0 },
  { 0.0098510903480306684, 0, 3.7500000000000000, 0.0 },
  { 0.0071925345723313537, 0, 4.0000000000000000, 0.0 },
  { 0.0052720485244233508, 0, 4.2500000000000000, 0.0 },
  { 0.0038777713236996087, 0, 4.5000000000000000, 0.0 },
  { 0.0028610633780233514, 0, 4.7500000000000000, 0.0 },
  { 0.0021167884792604296, 0, 5.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 3.5527136788005009e-15 at index 0
// max(|f - f_GSL| / |f_GSL|): 7.1271285767638060e-16
// mean(f - f_GSL): 3.3109365943362336e-16
// variance(f - f_GSL): 6.0573973088288642e-33
// stddev(f - f_GSL): 7.7829283106224647e-17
const testcase_sph_bessel_k<double>
data002[20] =
{
  { 24.466748187071037, 1, 0.25000000000000000, 0.0 },
  { 5.7164167941905397, 1, 0.50000000000000000, 0.0 },
  { 2.3084184540553219, 1, 0.75000000000000000, 0.0 },
  { 1.1557273497909215, 1, 1.0000000000000000, 0.0 },
  { 0.64805858282463069, 1, 1.2500000000000000, 0.0 },
  { 0.38943559550923390, 1, 1.5000000000000000, 0.0 },
  { 0.24511005654782500, 1, 1.7500000000000000, 0.0 },
  { 0.15943812434536364, 1, 2.0000000000000000, 0.0 },
  { 0.10628589097553037, 1, 2.2500000000000000, 0.0 },
  { 0.072205736021095243, 1, 2.5000000000000000, 0.0 },
  { 0.049793875816537297, 1, 2.7500000000000000, 0.0 },
  { 0.034757930717389800, 1, 3.0000000000000000, 0.0 },
  { 0.024506710414666608, 1, 3.2500000000000000, 0.0 },
  { 0.017424712270504284, 1, 3.5000000000000000, 0.0 },
  { 0.012478047774172180, 1, 3.7500000000000000, 0.0 },
  { 0.0089906682154141920, 1, 4.0000000000000000, 0.0 },
  { 0.0065125305301700215, 1, 4.2500000000000000, 0.0 },
  { 0.0047394982845217438, 1, 4.5000000000000000, 0.0 },
  { 0.0034633925102387935, 1, 4.7500000000000000, 0.0 },
  { 0.0025401461751125153, 1, 5.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_GSL|): 5.6843418860808015e-14 at index 0
// max(|f - f_GSL| / |f_GSL|): 6.5871573295562867e-16
// mean(f - f_GSL): -2.2194052151647272e-15
// variance(f - f_GSL): 2.7289526366207137e-31
// stddev(f - f_GSL): 5.2239378218167126e-16
const testcase_sph_bessel_k<double>
data003[20] =
{
  { 298.49432788226665, 2, 0.25000000000000000, 0.0 },
  { 36.203973029873417, 2, 0.50000000000000000, 0.0 },
  { 10.222996010816427, 2, 0.75000000000000000, 0.0 },
  { 4.0450457242682250, 2, 1.0000000000000000, 0.0 },
  { 1.9153731447927975, 2, 1.2500000000000000, 0.0 },
  { 1.0125325483240082, 2, 1.5000000000000000, 0.0 },
  { 0.57616779526177042, 2, 1.7500000000000000, 0.0 },
  { 0.34544926941495457, 2, 2.0000000000000000, 0.0 },
  { 0.21529706120684353, 2, 2.2500000000000000, 0.0 },
  { 0.13822240895466803, 2, 2.5000000000000000, 0.0 },
  { 0.090836100731986225, 2, 2.7500000000000000, 0.0 },
  { 0.060826378755432155, 2, 3.0000000000000000, 0.0 },
  { 0.041362004455523280, 2, 3.2500000000000000, 0.0 },
  { 0.028488021648602247, 2, 3.5000000000000000, 0.0 },
  { 0.019833528567368416, 2, 3.7500000000000000, 0.0 },
  { 0.013935535733891996, 2, 4.0000000000000000, 0.0 },
  { 0.0098691288986610132, 2, 4.2500000000000000, 0.0 },
  { 0.0070374368467141053, 2, 4.5000000000000000, 0.0 },
  { 0.0050484691739636411, 2, 4.7500000000000000, 0.0 },
  { 0.0036408761843279391, 2, 5.0000000000000000, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 9.3132257461547852e-10 at index 0
// max(|f - f_GSL| / |f_GSL|): 6.3363305964939052e-16
// mean(f - f_GSL): 4.6686319914168719e-11
// variance(f - f_GSL): 1.2075409946116082e-22
// stddev(f - f_GSL): 1.0988817018276390e-11
const testcase_sph_bessel_k<double>
data004[20] =
{
  { 6059048.2813886562, 5, 0.25000000000000000, 0.0 },
  { 93693.976729047688, 5, 0.50000000000000000, 0.0 },
  { 8084.8508989197571, 5, 0.75000000000000000, 0.0 },
  { 1404.7865936708652, 5, 1.0000000000000000, 0.0 },
  { 357.14134065617543, 5, 1.2500000000000000, 0.0 },
  { 115.24697389769929, 5, 1.5000000000000000, 0.0 },
  { 43.761272568725801, 5, 1.7500000000000000, 0.0 },
  { 18.690798451903358, 5, 2.0000000000000000, 0.0 },
  { 8.7224749533818677, 5, 2.2500000000000000, 0.0 },
  { 4.3606488097859852, 5, 2.5000000000000000, 0.0 },
  { 2.3028935785742730, 5, 2.7500000000000000, 0.0 },
  { 1.2715609654111775, 5, 3.0000000000000000, 0.0 },
  { 0.72839562860502316, 5, 3.2500000000000000, 0.0 },
  { 0.43028935571519678, 5, 3.5000000000000000, 0.0 },
  { 0.26089715242971956, 5, 3.7500000000000000, 0.0 },
  { 0.16175476432247923, 5, 4.0000000000000000, 0.0 },
  { 0.10223456266082936, 5, 4.2500000000000000, 0.0 },
  { 0.065705794212316579, 5, 4.5000000000000000, 0.0 },
  { 0.042852207894995956, 5, 4.7500000000000000, 0.0 },
  { 0.028310775837020685, 5, 5.0000000000000000, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_GSL|): 1.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 1.1911275255341132e-15
// mean(f - f_GSL): -0.049976150124713389
// variance(f - f_GSL): 0.00013839701636444480
// stddev(f - f_GSL): 0.011764226126883348
const testcase_sph_bessel_k<double>
data005[20] =
{
  { 4306527035290151.5, 10, 0.25000000000000000, 0.0 },
  { 2092451307900.8257, 10, 0.50000000000000000, 0.0 },
  { 23992996405.457897, 10, 0.75000000000000000, 0.0 },
  { 1001775282.2335223, 10, 1.0000000000000000, 0.0 },
  { 84792362.981751829, 10, 1.2500000000000000, 0.0 },
  { 11208602.984859787, 10, 1.5000000000000000, 0.0 },
  { 2013380.5346866103, 10, 1.7500000000000000, 0.0 },
  { 452287.16516776424, 10, 2.0000000000000000, 0.0 },
  { 120436.61941684347, 10, 2.2500000000000000, 0.0 },
  { 36650.773950946095, 10, 2.5000000000000000, 0.0 },
  { 12418.508403096645, 10, 2.7500000000000000, 0.0 },
  { 4595.8396399769954, 10, 3.0000000000000000, 0.0 },
  { 1830.7582054816417, 10, 3.2500000000000000, 0.0 },
  { 776.14923484042708, 10, 3.5000000000000000, 0.0 },
  { 347.06399161829961, 10, 3.7500000000000000, 0.0 },
  { 162.51206974443068, 10, 4.0000000000000000, 0.0 },
  { 79.215536284603999, 10, 4.2500000000000000, 0.0 },
  { 40.000402363725662, 10, 4.5000000000000000, 0.0 },
  { 20.838946705107976, 10, 4.7500000000000000, 0.0 },
  { 11.162178171949053, 10, 5.0000000000000000, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for n=20.
// max(|f - f_GSL|): 8.8544371553805848e+20 at index 0
// max(|f - f_GSL| / |f_GSL|): 1.8249541235969551e-15
// mean(f - f_GSL): 4.4272206877211910e+19
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_k<double>
data006[20] =
{
  { 2.2077619699234933e+36, 20, 0.25000000000000000, 0.0 },
  { 1.0502156241326757e+30, 20, 0.50000000000000000, 0.0 },
  { 2.0971165254728385e+26, 20, 0.75000000000000000, 0.0 },
  { 4.9599176332036881e+23, 20, 1.0000000000000000, 0.0 },
  { 4.5418735144579162e+21, 20, 1.2500000000000000, 0.0 },
  { 9.7860176555357831e+19, 20, 1.5000000000000000, 0.0 },
  { 3.8037135783400694e+18, 20, 1.7500000000000000, 0.0 },
  { 2.2759868191804317e+17, 20, 2.0000000000000000, 0.0 },
  { 18926458413526928., 20, 2.2500000000000000, 0.0 },
  { 2039745115287745.8, 20, 2.5000000000000000, 0.0 },
  { 271054298478616.78, 20, 2.7500000000000000, 0.0 },
  { 42809295307663.344, 20, 3.0000000000000000, 0.0 },
  { 7814337739435.1016, 20, 3.2500000000000000, 0.0 },
  { 1613210668525.4053, 20, 3.5000000000000000, 0.0 },
  { 370221718737.44995, 20, 3.7500000000000000, 0.0 },
  { 93149579165.257706, 20, 4.0000000000000000, 0.0 },
  { 25405146003.138054, 20, 4.2500000000000000, 0.0 },
  { 7440532377.7094021, 20, 4.5000000000000000, 0.0 },
  { 2321723647.5513868, 20, 4.7500000000000000, 0.0 },
  { 766744623.53833878, 20, 5.0000000000000000, 0.0 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for n=50.
// max(|f - f_GSL|): 1.2515549038599083e+94 at index 0
// max(|f - f_GSL| / |f_GSL|): 4.1203472175887959e-15
// mean(f - f_GSL): 6.2577745192995445e+92
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_k<double>
data007[20] =
{
  { 2.1700580238746589e+109, 50, 0.25000000000000000, 0.0 },
  { 9.6278720586414376e+93, 50, 0.50000000000000000, 0.0 },
  { 1.0050569893616437e+85, 50, 0.75000000000000000, 0.0 },
  { 4.2594701960569597e+78, 50, 1.0000000000000000, 0.0 },
  { 4.8496600184969048e+73, 50, 1.2500000000000000, 0.0 },
  { 4.4254768946237161e+69, 50, 1.5000000000000000, 0.0 },
  { 1.6978219985095516e+66, 50, 1.7500000000000000, 0.0 },
  { 1.8631477550504623e+63, 50, 2.0000000000000000, 0.0 },
  { 4.5618316808119246e+60, 50, 2.2500000000000000, 0.0 },
  { 2.1033139414763459e+58, 50, 2.5000000000000000, 0.0 },
  { 1.6180814488845404e+56, 50, 2.7500000000000000, 0.0 },
  { 1.8994744922884448e+54, 50, 3.0000000000000000, 0.0 },
  { 3.1793792285568088e+52, 50, 3.2500000000000000, 0.0 },
  { 7.1982428243753771e+50, 50, 3.5000000000000000, 0.0 },
  { 2.1141314304621381e+49, 50, 3.7500000000000000, 0.0 },
  { 7.7879648898608050e+47, 50, 4.0000000000000000, 0.0 },
  { 3.5005171005115849e+46, 50, 4.2500000000000000, 0.0 },
  { 1.8764668193894352e+45, 50, 4.5000000000000000, 0.0 },
  { 1.1769120353359331e+44, 50, 4.7500000000000000, 0.0 },
  { 8.4979587573695257e+42, 50, 5.0000000000000000, 0.0 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for n=100.
// max(|f - f_GSL|): 2.4840289476811343e+232 at index 0
// max(|f - f_GSL| / |f_GSL|): 7.1883921394233692e-15
// mean(f - f_GSL): 1.2420144738405672e+231
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_k<double>
data008[20] =
{
  { 6.7297079984270407e+247, 100, 0.25000000000000000, 0.0 },
  { 2.6531515679038356e+217, 100, 0.50000000000000000, 0.0 },
  { 4.3471427556562998e+199, 100, 0.75000000000000000, 0.0 },
  { 1.0445136448796249e+187, 100, 1.0000000000000000, 0.0 },
  { 1.6997655712536574e+177, 100, 1.2500000000000000, 0.0 },
  { 1.7073911241227390e+169, 100, 1.5000000000000000, 0.0 },
  { 2.9499912862276867e+162, 100, 1.7500000000000000, 0.0 },
  { 4.0889442367684486e+156, 100, 2.0000000000000000, 0.0 },
  { 2.7800151521182881e+151, 100, 2.2500000000000000, 0.0 },
  { 6.6259020668614736e+146, 100, 2.5000000000000000, 0.0 },
  { 4.3566420012943831e+142, 100, 2.7500000000000000, 0.0 },
  { 6.6212344610231445e+138, 100, 3.0000000000000000, 0.0 },
  { 2.0335819196823237e+135, 100, 3.2500000000000000, 0.0 },
  { 1.1370192046167044e+132, 100, 3.5000000000000000, 0.0 },
  { 1.0653814149925662e+129, 100, 3.7500000000000000, 0.0 },
  { 1.5649146564814860e+126, 100, 4.0000000000000000, 0.0 },
  { 3.4120724182247106e+123, 100, 4.2500000000000000, 0.0 },
  { 1.0554811127393014e+121, 100, 4.5000000000000000, 0.0 },
  { 4.4600299993536427e+118, 100, 4.7500000000000000, 0.0 },
  { 2.4932380414356957e+116, 100, 5.0000000000000000, 0.0 },
};
const double toler008 = 5.0000000000000039e-13;
//  sph_bessel_k

// Test data for n=0.
// max(|f - f_GSL|): 1.6940658945086007e-21 at index 1
// max(|f - f_GSL| / |f_GSL|): 2.3755011291425420e-16
// mean(f - f_GSL): 8.4704597332000972e-23
// variance(f - f_GSL): 3.9749965701808458e-46
// stddev(f - f_GSL): 1.9937393435905423e-23
const testcase_sph_bessel_k<double>
data009[20] =
{
  { 0.0021167884792604296, 0, 5.0000000000000000, 0.0 },
  { 7.1314042907657501e-06, 0, 10.000000000000000, 0.0 },
  { 3.2034016093486874e-08, 0, 15.000000000000000, 0.0 },
  { 1.6188262695432408e-10, 0, 20.000000000000000, 0.0 },
  { 8.7260524839276822e-13, 0, 25.000000000000000, 0.0 },
  { 4.8996399289952335e-15, 0, 30.000000000000000, 0.0 },
  { 2.8297297848148087e-17, 0, 35.000000000000000, 0.0 },
  { 1.6683248147838741e-19, 0, 40.000000000000000, 0.0 },
  { 9.9920748260202866e-22, 0, 45.000000000000000, 0.0 },
  { 6.0593463529758750e-24, 0, 50.000000000000000, 0.0 },
  { 3.7115958704957512e-26, 0, 55.000000000000000, 0.0 },
  { 2.2924491569306120e-28, 0, 60.000000000000000, 0.0 },
  { 1.4258216231535345e-30, 0, 65.000000000000000, 0.0 },
  { 8.9208883464614908e-33, 0, 70.000000000000000, 0.0 },
  { 5.6101241339002269e-35, 0, 75.000000000000000, 0.0 },
  { 3.5438174130478116e-37, 0, 80.000000000000000, 0.0 },
  { 2.2473462497461013e-39, 0, 85.000000000000000, 0.0 },
  { 1.4301249923861458e-41, 0, 90.000000000000000, 0.0 },
  { 9.1289429059882345e-44, 0, 95.000000000000000, 0.0 },
  { 5.8434816785314687e-46, 0, 100.00000000000000, 0.0 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 4.3368086899420177e-19 at index 0
// max(|f - f_GSL| / |f_GSL|): 3.3379551565535723e-16
// mean(f - f_GSL): 2.1768414594906366e-20
// variance(f - f_GSL): 2.6252846203641689e-41
// stddev(f - f_GSL): 5.1237531364851767e-21
const testcase_sph_bessel_k<double>
data010[20] =
{
  { 0.0025401461751125153, 1, 5.0000000000000000, 0.0 },
  { 7.8445447198423253e-06, 1, 10.000000000000000, 0.0 },
  { 3.4169617166385998e-08, 1, 15.000000000000000, 0.0 },
  { 1.6997675830204032e-10, 1, 20.000000000000000, 0.0 },
  { 9.0750945832847893e-13, 1, 25.000000000000000, 0.0 },
  { 5.0629612599617413e-15, 1, 30.000000000000000, 0.0 },
  { 2.9105792072380887e-17, 1, 35.000000000000000, 0.0 },
  { 1.7100329351534706e-19, 1, 40.000000000000000, 0.0 },
  { 1.0214120933265182e-21, 1, 45.000000000000000, 0.0 },
  { 6.1805332800353925e-24, 1, 50.000000000000000, 0.0 },
  { 3.7790794317774917e-26, 1, 55.000000000000000, 0.0 },
  { 2.3306566428794551e-28, 1, 60.000000000000000, 0.0 },
  { 1.4477573404328197e-30, 1, 65.000000000000000, 0.0 },
  { 9.0483296085537982e-33, 1, 70.000000000000000, 0.0 },
  { 5.6849257890188964e-35, 1, 75.000000000000000, 0.0 },
  { 3.5881151307109089e-37, 1, 80.000000000000000, 0.0 },
  { 2.2737856173901729e-39, 1, 85.000000000000000, 0.0 },
  { 1.4460152700793253e-41, 1, 90.000000000000000, 0.0 },
  { 9.2250370418407426e-44, 1, 95.000000000000000, 0.0 },
  { 5.9019164953167835e-46, 1, 100.00000000000000, 0.0 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_GSL|): 1.6940658945086007e-21 at index 1
// max(|f - f_GSL| / |f_GSL|): 1.7860910745432643e-16
// mean(f - f_GSL): 8.4373714989561383e-23
// variance(f - f_GSL): 3.9440020948142575e-46
// stddev(f - f_GSL): 1.9859511813773917e-23
const testcase_sph_bessel_k<double>
data011[20] =
{
  { 0.0036408761843279391, 2, 5.0000000000000000, 0.0 },
  { 9.4847677067184489e-06, 2, 10.000000000000000, 0.0 },
  { 3.8867939526764077e-08, 2, 15.000000000000000, 0.0 },
  { 1.8737914069963011e-10, 2, 20.000000000000000, 0.0 },
  { 9.8150638339218580e-13, 2, 25.000000000000000, 0.0 },
  { 5.4059360549914073e-15, 2, 30.000000000000000, 0.0 },
  { 3.0792080025780731e-17, 2, 35.000000000000000, 0.0 },
  { 1.7965772849203843e-19, 2, 40.000000000000000, 0.0 },
  { 1.0673016221571298e-21, 2, 45.000000000000000, 0.0 },
  { 6.4301783497779986e-24, 2, 50.000000000000000, 0.0 },
  { 3.9177274758654325e-26, 2, 55.000000000000000, 0.0 },
  { 2.4089819890745845e-28, 2, 60.000000000000000, 0.0 },
  { 1.4926411927119725e-30, 2, 65.000000000000000, 0.0 },
  { 9.3086739011137971e-33, 2, 70.000000000000000, 0.0 },
  { 5.8375211654609825e-35, 2, 75.000000000000000, 0.0 },
  { 3.6783717304494705e-37, 2, 80.000000000000000, 0.0 },
  { 2.3275975068304602e-39, 2, 85.000000000000000, 0.0 },
  { 1.4783255013887902e-41, 2, 90.000000000000000, 0.0 },
  { 9.4202598652042564e-44, 2, 95.000000000000000, 0.0 },
  { 6.0205391733909718e-46, 2, 100.00000000000000, 0.0 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 1.0408340855860843e-17 at index 0
// max(|f - f_GSL| / |f_GSL|): 3.8627808503192494e-16
// mean(f - f_GSL): 5.2092592175131648e-19
// variance(f - f_GSL): 1.5034006423958930e-38
// stddev(f - f_GSL): 1.2261323918712422e-19
const testcase_sph_bessel_k<double>
data012[20] =
{
  { 0.028310775837020685, 5, 5.0000000000000000, 0.0 },
  { 2.9052984510365127e-05, 5, 10.000000000000000, 0.0 },
  { 8.3641527887118510e-08, 5, 15.000000000000000, 0.0 },
  { 3.3529154988940075e-10, 5, 20.000000000000000, 0.0 },
  { 1.5684171551168000e-12, 5, 25.000000000000000, 0.0 },
  { 8.0032079611299538e-15, 5, 30.000000000000000, 0.0 },
  { 4.3145720915992788e-17, 5, 35.000000000000000, 0.0 },
  { 2.4150100605214907e-19, 5, 40.000000000000000, 0.0 },
  { 1.3889281897184502e-21, 5, 45.000000000000000, 0.0 },
  { 8.1529367060715644e-24, 5, 50.000000000000000, 0.0 },
  { 4.8624414332134506e-26, 5, 55.000000000000000, 0.0 },
  { 2.9370520303146487e-28, 5, 60.000000000000000, 0.0 },
  { 1.7925492378700152e-30, 5, 65.000000000000000, 0.0 },
  { 1.1034948837326334e-32, 5, 70.000000000000000, 0.0 },
  { 6.8426262578788363e-35, 5, 75.000000000000000, 0.0 },
  { 4.2694137525901018e-37, 5, 80.000000000000000, 0.0 },
  { 2.6781752823796736e-39, 5, 85.000000000000000, 0.0 },
  { 1.6878625827978109e-41, 5, 90.000000000000000, 0.0 },
  { 1.0681143252683740e-43, 5, 95.000000000000000, 0.0 },
  { 6.7838705233516332e-46, 5, 100.00000000000000, 0.0 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_GSL|): 7.1054273576010019e-15 at index 0
// max(|f - f_GSL| / |f_GSL|): 6.5658665969538796e-16
// mean(f - f_GSL): 3.5530390449193903e-16
// variance(f - f_GSL): 6.9939537145272539e-33
// stddev(f - f_GSL): 8.3629861380533532e-17
const testcase_sph_bessel_k<double>
data013[20] =
{
  { 11.162178171949053, 10, 5.0000000000000000, 0.0 },
  { 0.00099076229144390597, 10, 10.000000000000000, 0.0 },
  { 9.9935752412415236e-07, 10, 15.000000000000000, 0.0 },
  { 2.2531468015242627e-09, 10, 20.000000000000000, 0.0 },
  { 7.3437751497731042e-12, 10, 25.000000000000000, 0.0 },
  { 2.9267452438242307e-14, 10, 30.000000000000000, 0.0 },
  { 1.3186663823034996e-16, 10, 35.000000000000000, 0.0 },
  { 6.4421116021384212e-19, 10, 40.000000000000000, 0.0 },
  { 3.3302002049982622e-21, 10, 45.000000000000000, 0.0 },
  { 1.7940441087570414e-23, 10, 50.000000000000000, 0.0 },
  { 9.9710703418826213e-26, 10, 55.000000000000000, 0.0 },
  { 5.6778301200262273e-28, 10, 60.000000000000000, 0.0 },
  { 3.2961309210209855e-30, 10, 65.000000000000000, 0.0 },
  { 1.9436946604697646e-32, 10, 70.000000000000000, 0.0 },
  { 1.1610833753124036e-34, 10, 75.000000000000000, 0.0 },
  { 7.0112499239017688e-37, 10, 80.000000000000000, 0.0 },
  { 4.2727482119940375e-39, 10, 85.000000000000000, 0.0 },
  { 2.6243897223328648e-41, 10, 90.000000000000000, 0.0 },
  { 1.6229227146207225e-43, 10, 95.000000000000000, 0.0 },
  { 1.0095764614345580e-45, 10, 100.00000000000000, 0.0 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for n=20.
// max(|f - f_GSL|): 5.9604644775390625e-07 at index 0
// max(|f - f_GSL| / |f_GSL|): 1.3704285573133014e-15
// mean(f - f_GSL): 2.9802332335337000e-08
// variance(f - f_GSL): 4.9206593497278313e-17
// stddev(f - f_GSL): 7.0147411568266948e-09
const testcase_sph_bessel_k<double>
data014[20] =
{
  { 766744623.53833878, 20, 5.0000000000000000, 0.0 },
  { 145.17500014949303, 20, 10.000000000000000, 0.0 },
  { 0.0067854045587496569, 20, 15.000000000000000, 0.0 },
  { 2.4094995544457175e-06, 20, 20.000000000000000, 0.0 },
  { 2.3026655147394297e-09, 20, 25.000000000000000, 0.0 },
  { 3.8474018695243489e-12, 20, 30.000000000000000, 0.0 },
  { 9.0867047947713390e-15, 20, 35.000000000000000, 0.0 },
  { 2.6987839821045190e-17, 20, 40.000000000000000, 0.0 },
  { 9.4025010494866326e-20, 20, 45.000000000000000, 0.0 },
  { 3.6774830166338424e-22, 20, 50.000000000000000, 0.0 },
  { 1.5683775658147727e-24, 20, 55.000000000000000, 0.0 },
  { 7.1489209175428263e-27, 20, 60.000000000000000, 0.0 },
  { 3.4334597023050129e-29, 20, 65.000000000000000, 0.0 },
  { 1.7195040482680292e-31, 20, 70.000000000000000, 0.0 },
  { 8.9098884578810683e-34, 20, 75.000000000000000, 0.0 },
  { 4.7485185888641451e-36, 20, 80.000000000000000, 0.0 },
  { 2.5909322370180929e-38, 20, 85.000000000000000, 0.0 },
  { 1.4420636470684505e-40, 20, 90.000000000000000, 0.0 },
  { 8.1635343584831748e-43, 20, 95.000000000000000, 0.0 },
  { 4.6893542182612181e-45, 20, 100.00000000000000, 0.0 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for n=50.
// max(|f - f_GSL|): 1.8569100589280704e+28 at index 0
// max(|f - f_GSL| / |f_GSL|): 2.9714160556331394e-15
// mean(f - f_GSL): 9.2845502946403562e+26
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_k<double>
data015[20] =
{
  { 8.4979587573695257e+42, 50, 5.0000000000000000, 0.0 },
  { 2.5902065716583193e+27, 50, 10.000000000000000, 0.0 },
  { 1.4554032925752645e+18, 50, 15.000000000000000, 0.0 },
  { 262403485212.24203, 50, 20.000000000000000, 0.0 },
  { 1015834.4318368509, 50, 25.000000000000000, 0.0 },
  { 25.513680368079051, 50, 30.000000000000000, 0.0 },
  { 0.0022105152302389357, 50, 35.000000000000000, 0.0 },
  { 4.5571412171778537e-07, 50, 40.000000000000000, 0.0 },
  { 1.7674071460320788e-10, 50, 45.000000000000000, 0.0 },
  { 1.1024601623961401e-13, 50, 50.000000000000000, 0.0 },
  { 9.9196628865373291e-17, 50, 55.000000000000000, 0.0 },
  { 1.1907912346904111e-19, 50, 60.000000000000000, 0.0 },
  { 1.8006180832966091e-22, 50, 65.000000000000000, 0.0 },
  { 3.2845517366265810e-25, 50, 70.000000000000000, 0.0 },
  { 6.9920227189963067e-28, 50, 75.000000000000000, 0.0 },
  { 1.6927182898646000e-30, 50, 80.000000000000000, 0.0 },
  { 4.5662132186003229e-33, 50, 85.000000000000000, 0.0 },
  { 1.3502715909388468e-35, 50, 90.000000000000000, 0.0 },
  { 4.3195120028866727e-38, 50, 95.000000000000000, 0.0 },
  { 1.4787616332112231e-40, 50, 100.00000000000000, 0.0 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for n=100.
// max(|f - f_GSL|): 1.1898643942819585e+102 at index 0
// max(|f - f_GSL| / |f_GSL|): 5.4214342172000852e-15
// mean(f - f_GSL): 5.9493219714097923e+100
// variance(f - f_GSL): inf
// stddev(f - f_GSL): inf
const testcase_sph_bessel_k<double>
data016[20] =
{
  { 2.4932380414356957e+116, 100, 5.0000000000000000, 0.0 },
  { 8.1475076243333876e+85, 100, 10.000000000000000, 0.0 },
  { 9.7716761315876726e+67, 100, 15.000000000000000, 0.0 },
  { 1.5194821355918144e+55, 100, 20.000000000000000, 0.0 },
  { 1.4170736001639316e+45, 100, 25.000000000000000, 0.0 },
  { 7.2380982776347000e+36, 100, 30.000000000000000, 0.0 },
  { 5.6555760333834243e+29, 100, 35.000000000000000, 0.0 },
  { 3.1611695071410724e+23, 100, 40.000000000000000, 0.0 },
  { 7.7504401278178330e+17, 100, 45.000000000000000, 0.0 },
  { 5975311343975.9443, 100, 50.000000000000000, 0.0 },
  { 114365072.37607120, 100, 55.000000000000000, 0.0 },
  { 4568.1147894596479, 100, 60.000000000000000, 0.0 },
  { 0.33405244629577024, 100, 65.000000000000000, 0.0 },
  { 4.0425327086557919e-05, 100, 70.000000000000000, 0.0 },
  { 7.4778836237705124e-09, 100, 75.000000000000000, 0.0 },
  { 1.9845904438479557e-12, 100, 80.000000000000000, 0.0 },
  { 7.1790121813980906e-16, 100, 85.000000000000000, 0.0 },
  { 3.3941645673590678e-19, 100, 90.000000000000000, 0.0 },
  { 2.0258146639501922e-22, 100, 95.000000000000000, 0.0 },
  { 1.4827965292343242e-25, 100, 100.00000000000000, 0.0 },
};
const double toler016 = 5.0000000000000039e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_sph_bessel_k<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::sph_bessel_k(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  return 0;
}
