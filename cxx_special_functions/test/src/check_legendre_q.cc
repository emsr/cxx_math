
//  legendre_q

#include "verify.h"

// Test data for l=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_legendre_q<double>
data001[19] =
{
  { -1.4722194895832204, 0, -0.90000000000000002, 0.0 },
  { -1.0986122886681098, 0, -0.80000000000000004, 0.0 },
  { -0.86730052769405308, 0, -0.69999999999999996, 0.0 },
  { -0.69314718055994529, 0, -0.59999999999999998, 0.0 },
  { -0.54930614433405489, 0, -0.50000000000000000, 0.0 },
  { -0.42364893019360172, 0, -0.39999999999999991, 0.0 },
  { -0.30951960420311164, 0, -0.29999999999999993, 0.0 },
  { -0.20273255405408214, 0, -0.19999999999999996, 0.0 },
  { -0.10033534773107562, 0, -0.099999999999999978, 0.0 },
  { 0.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 0.10033534773107571, 0, 0.10000000000000009, 0.0 },
  { 0.20273255405408241, 0, 0.20000000000000018, 0.0 },
  { 0.30951960420311181, 0, 0.30000000000000004, 0.0 },
  { 0.42364893019360195, 0, 0.40000000000000013, 0.0 },
  { 0.54930614433405489, 0, 0.50000000000000000, 0.0 },
  { 0.69314718055994540, 0, 0.60000000000000009, 0.0 },
  { 0.86730052769405352, 0, 0.70000000000000018, 0.0 },
  { 1.0986122886681098, 0, 0.80000000000000004, 0.0 },
  { 1.4722194895832210, 0, 0.90000000000000013, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for l=1.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_legendre_q<double>
data002[19] =
{
  { 0.32499754062489838, 1, -0.90000000000000002, 0.0 },
  { -0.12111016906551209, 1, -0.80000000000000004, 0.0 },
  { -0.39288963061416293, 1, -0.69999999999999996, 0.0 },
  { -0.58411169166403276, 1, -0.59999999999999998, 0.0 },
  { -0.72534692783297250, 1, -0.50000000000000000, 0.0 },
  { -0.83054042792255933, 1, -0.39999999999999991, 0.0 },
  { -0.90714411873906653, 1, -0.29999999999999993, 0.0 },
  { -0.95945348918918361, 1, -0.19999999999999996, 0.0 },
  { -0.98996646522689247, 1, -0.099999999999999978, 0.0 },
  { -1.0000000000000000, 1, 0.0000000000000000, 0.0 },
  { -0.98996646522689247, 1, 0.10000000000000009, 0.0 },
  { -0.95945348918918349, 1, 0.20000000000000018, 0.0 },
  { -0.90714411873906642, 1, 0.30000000000000004, 0.0 },
  { -0.83054042792255922, 1, 0.40000000000000013, 0.0 },
  { -0.72534692783297250, 1, 0.50000000000000000, 0.0 },
  { -0.58411169166403276, 1, 0.60000000000000009, 0.0 },
  { -0.39288963061416238, 1, 0.70000000000000018, 0.0 },
  { -0.12111016906551209, 1, 0.80000000000000004, 0.0 },
  { 0.32499754062489905, 1, 0.90000000000000013, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for l=2.
// max(|f - f_GSL|): 2.2204460492503131e-16 at index 4
// max(|f - f_GSL| / |f_GSL|): 2.8525601127754091e-16
// mean(f - f_GSL): -1.4608197692436269e-18
// variance(f - f_GSL): 1.9034044479616541e-34
// stddev(f - f_GSL): 1.3796392455861983e-17
const testcase_legendre_q<double>
data003[19] =
{
  { 0.29736306494799730, 2, -0.90000000000000002, 0.0 },
  { 0.69463834721266937, 2, -0.80000000000000004, 0.0 },
  { 0.84618437599189755, 2, -0.69999999999999996, 0.0 },
  { 0.87227411277760214, 2, -0.59999999999999998, 0.0 },
  { 0.81866326804175693, 2, -0.50000000000000000, 0.0 },
  { 0.71014872185033640, 2, -0.39999999999999991, 0.0 },
  { 0.56297465553413573, 2, -0.29999999999999993, 0.0 },
  { 0.38920232378379604, 2, -0.19999999999999996, 0.0 },
  { 0.19866264364957165, 2, -0.099999999999999978, 0.0 },
  { -0.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { -0.19866264364957187, 2, 0.10000000000000009, 0.0 },
  { -0.38920232378379649, 2, 0.20000000000000018, 0.0 },
  { -0.56297465553413584, 2, 0.30000000000000004, 0.0 },
  { -0.71014872185033662, 2, 0.40000000000000013, 0.0 },
  { -0.81866326804175693, 2, 0.50000000000000000, 0.0 },
  { -0.87227411277760225, 2, 0.60000000000000009, 0.0 },
  { -0.84618437599189744, 2, 0.70000000000000018, 0.0 },
  { -0.69463834721266937, 2, 0.80000000000000004, 0.0 },
  { -0.29736306494799675, 2, 0.90000000000000013, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for l=5.
// max(|f - f_GSL|): 3.3306690738754696e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 1.2505997636345452e-15
// mean(f - f_GSL): -1.9721066884788965e-17
// variance(f - f_GSL): 1.0024158763500881e-33
// stddev(f - f_GSL): 3.1660951917939678e-17
const testcase_legendre_q<double>
data004[19] =
{
  { -0.79943978340914879, 5, -0.90000000000000002, 0.0 },
  { -0.27785091490201691, 5, -0.80000000000000004, 0.0 },
  { 0.26039209807845826, 5, -0.69999999999999996, 0.0 },
  { 0.54526468102599657, 5, -0.59999999999999998, 0.0 },
  { 0.55508089057167953, 5, -0.50000000000000000, 0.0 },
  { 0.35972301313426286, 5, -0.39999999999999991, 0.0 },
  { 0.061032982063863449, 5, -0.29999999999999993, 0.0 },
  { -0.23858901831062207, 5, -0.19999999999999996, 0.0 },
  { -0.45492798851776978, 5, -0.099999999999999978, 0.0 },
  { -0.53333333333333333, 5, 0.0000000000000000, 0.0 },
  { -0.45492798851776967, 5, 0.10000000000000009, 0.0 },
  { -0.23858901831062154, 5, 0.20000000000000018, 0.0 },
  { 0.061032982063863803, 5, 0.30000000000000004, 0.0 },
  { 0.35972301313426336, 5, 0.40000000000000013, 0.0 },
  { 0.55508089057167953, 5, 0.50000000000000000, 0.0 },
  { 0.54526468102599635, 5, 0.60000000000000009, 0.0 },
  { 0.26039209807845742, 5, 0.70000000000000018, 0.0 },
  { -0.27785091490201691, 5, 0.80000000000000004, 0.0 },
  { -0.79943978340914956, 5, 0.90000000000000013, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for l=10.
// max(|f - f_GSL|): 3.8857805861880479e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 2.2498641059758228e-15
// mean(f - f_GSL): -2.4286128663675299e-17
// variance(f - f_GSL): 2.2933947028736198e-33
// stddev(f - f_GSL): 4.7889400736213225e-17
const testcase_legendre_q<double>
data005[19] =
{
  { -0.41282287864965400, 10, -0.90000000000000002, 0.0 },
  { -0.16037523423961558, 10, -0.80000000000000004, 0.0 },
  { 0.43687329620194665, 10, -0.69999999999999996, 0.0 },
  { 0.20044846435823035, 10, -0.59999999999999998, 0.0 },
  { -0.29165813966586757, 10, -0.50000000000000000, 0.0 },
  { -0.37399122844670757, 10, -0.39999999999999991, 0.0 },
  { -0.024286096138320269, 10, -0.29999999999999993, 0.0 },
  { 0.33376564881540038, 10, -0.19999999999999996, 0.0 },
  { 0.33672259360745604, 10, -0.099999999999999978, 0.0 },
  { -0.0000000000000000, 10, 0.0000000000000000, 0.0 },
  { -0.33672259360745632, 10, 0.10000000000000009, 0.0 },
  { -0.33376564881540005, 10, 0.20000000000000018, 0.0 },
  { 0.024286096138320799, 10, 0.30000000000000004, 0.0 },
  { 0.37399122844670785, 10, 0.40000000000000013, 0.0 },
  { 0.29165813966586757, 10, 0.50000000000000000, 0.0 },
  { -0.20044846435823094, 10, 0.60000000000000009, 0.0 },
  { -0.43687329620194637, 10, 0.70000000000000018, 0.0 },
  { 0.16037523423961558, 10, 0.80000000000000004, 0.0 },
  { 0.41282287864965328, 10, 0.90000000000000013, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for l=20.
// max(|f - f_GSL|): 1.5265566588595902e-16 at index 1
// max(|f - f_GSL| / |f_GSL|): 5.4122753932244671e-15
// mean(f - f_GSL): -2.9490299091605721e-17
// variance(f - f_GSL): 3.9705586961108379e-35
// stddev(f - f_GSL): 6.3012369389754249e-18
const testcase_legendre_q<double>
data006[19] =
{
  { 0.34714843734221873, 20, -0.90000000000000002, 0.0 },
  { -0.059764644633137999, 20, -0.80000000000000004, 0.0 },
  { 0.063017066510894004, 20, -0.69999999999999996, 0.0 },
  { -0.18228010129064998, 20, -0.59999999999999998, 0.0 },
  { 0.28752901194538261, 20, -0.50000000000000000, 0.0 },
  { -0.24105630318869825, 20, -0.39999999999999991, 0.0 },
  { 0.0099360109839581774, 20, -0.29999999999999993, 0.0 },
  { 0.23337253641234040, 20, -0.19999999999999996, 0.0 },
  { -0.24569310089740162, 20, -0.099999999999999978, 0.0 },
  { 0.0000000000000000, 20, 0.0000000000000000, 0.0 },
  { 0.24569310089740140, 20, 0.10000000000000009, 0.0 },
  { -0.23337253641234107, 20, 0.20000000000000018, 0.0 },
  { -0.0099360109839574662, 20, 0.30000000000000004, 0.0 },
  { 0.24105630318869750, 20, 0.40000000000000013, 0.0 },
  { -0.28752901194538261, 20, 0.50000000000000000, 0.0 },
  { 0.18228010129065073, 20, 0.60000000000000009, 0.0 },
  { -0.063017066510896044, 20, 0.70000000000000018, 0.0 },
  { 0.059764644633137999, 20, 0.80000000000000004, 0.0 },
  { -0.34714843734221995, 20, 0.90000000000000013, 0.0 },
};
const double toler006 = 5.0000000000000039e-13;

// Test data for l=50.
// max(|f - f_GSL|): 5.2735593669694936e-16 at index 1
// max(|f - f_GSL| / |f_GSL|): 1.6785265864105990e-13
// mean(f - f_GSL): -4.2226821454698592e-18
// variance(f - f_GSL): 2.8209689411474081e-33
// stddev(f - f_GSL): 5.3112794514574433e-17
const testcase_legendre_q<double>
data007[19] =
{
  { 0.0012815150666188658, 50, -0.90000000000000002, 0.0 },
  { 0.065579310326438017, 50, -0.80000000000000004, 0.0 },
  { 0.20743039841636576, 50, -0.69999999999999996, 0.0 },
  { 0.17415389519261512, 50, -0.59999999999999998, 0.0 },
  { 0.18312359476005244, 50, -0.50000000000000000, 0.0 },
  { 0.17225734675773841, 50, -0.39999999999999991, 0.0 },
  { 0.056836147884549423, 50, -0.29999999999999993, 0.0 },
  { -0.12070303035700877, 50, -0.19999999999999996, 0.0 },
  { -0.16630816230487153, 50, -0.099999999999999978, 0.0 },
  { -0.0000000000000000, 50, 0.0000000000000000, 0.0 },
  { 0.16630816230487128, 50, 0.10000000000000009, 0.0 },
  { 0.12070303035701023, 50, 0.20000000000000018, 0.0 },
  { -0.056836147884548376, 50, 0.30000000000000004, 0.0 },
  { -0.17225734675773766, 50, 0.40000000000000013, 0.0 },
  { -0.18312359476005244, 50, 0.50000000000000000, 0.0 },
  { -0.17415389519261584, 50, 0.60000000000000009, 0.0 },
  { -0.20743039841636615, 50, 0.70000000000000018, 0.0 },
  { -0.065579310326438017, 50, 0.80000000000000004, 0.0 },
  { -0.0012815150666222763, 50, 0.90000000000000013, 0.0 },
};
const double toler007 = 1.0000000000000006e-11;

// Test data for l=100.
// max(|f - f_GSL|): 3.3306690738754696e-16 at index 1
// max(|f - f_GSL| / |f_GSL|): 3.4331537298928619e-15
// mean(f - f_GSL): 2.0451476769410777e-17
// variance(f - f_GSL): 4.7331699364253562e-34
// stddev(f - f_GSL): 2.1755849641936201e-17
const testcase_legendre_q<double>
data008[19] =
{
  { 0.10025020208733919, 100, -0.90000000000000002, 0.0 },
  { 0.14023543725869372, 100, -0.80000000000000004, 0.0 },
  { -0.084887997128288165, 100, -0.69999999999999996, 0.0 },
  { -0.13470512371671842, 100, -0.59999999999999998, 0.0 },
  { -0.094925073952072891, 100, -0.50000000000000000, 0.0 },
  { 0.064578337404908245, 100, -0.39999999999999991, 0.0 },
  { 0.091278775426190215, 100, -0.29999999999999993, 0.0 },
  { -0.12417746517398688, 100, -0.19999999999999996, 0.0 },
  { 0.075066548335351299, 100, -0.099999999999999978, 0.0 },
  { 0.0000000000000000, 100, 0.0000000000000000, 0.0 },
  { -0.075066548335352368, 100, 0.10000000000000009, 0.0 },
  { 0.12417746517398744, 100, 0.20000000000000018, 0.0 },
  { -0.091278775426189174, 100, 0.30000000000000004, 0.0 },
  { -0.064578337404910952, 100, 0.40000000000000013, 0.0 },
  { 0.094925073952072891, 100, 0.50000000000000000, 0.0 },
  { 0.13470512371671797, 100, 0.60000000000000009, 0.0 },
  { 0.084887997128284237, 100, 0.70000000000000018, 0.0 },
  { -0.14023543725869372, 100, 0.80000000000000004, 0.0 },
  { -0.10025020208733526, 100, 0.90000000000000013, 0.0 },
};
const double toler008 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  int
  test(const testcase_legendre_q<Ret> (&data)[Num], Ret toler)
  {
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    bool failure = false;
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = emsr::legendre_q(data[i].l, data[i].x);
	const bool failure_f = std::isnan(f);
	if (!failure && failure_f)
	  failure = true;
	if (!failure_f)
	  {
	    const Ret f0 = data[i].f0;
	    const Ret diff = f - f0;
	    if (std::abs(diff) > max_abs_diff)
	      max_abs_diff = std::abs(diff);
	    if (std::abs(f0) > Ret(10) * eps
	     && std::abs(f) > Ret(10) * eps)
	      {
		const Ret frac = diff / f0;
		if (std::abs(frac) > max_abs_frac)
		  max_abs_frac = std::abs(frac);
	      }
	  }
      }
    int num_errors = 0;
    VERIFY(!failure && max_abs_frac < toler);
    return num_errors;
  }

int
main()
{
  int num_errors = 0;
  num_errors += test(data001, toler001);
  num_errors += test(data002, toler002);
  num_errors += test(data003, toler003);
  num_errors += test(data004, toler004);
  num_errors += test(data005, toler005);
  num_errors += test(data006, toler006);
  num_errors += test(data007, toler007);
  num_errors += test(data008, toler008);
  return num_errors;
}
