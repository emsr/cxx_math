
//  clausen_cl

#include "verify.h"

// Test data for m=2.
// max(|f - f_GSL|): 9.4368957093138306e-16 at index 0
// max(|f - f_GSL| / |f_GSL|): 9.9845549689259114e-15
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 2.2820343911044357e-32
// stddev(f - f_GSL): 1.5106403910608360e-16
const testcase_clausen_cl<double>
data001[41] =
{
  { 0.39071647608680155, 2, -10.000000000000000, 0.0 },
  { 0.052122207190274598, 2, -9.5000000000000000, 0.0 },
  { -0.29122555781958798, 2, -9.0000000000000000, 0.0 },
  { -0.60731897904008003, 2, -8.5000000000000000, 0.0 },
  { -0.86027963733231172, 2, -8.0000000000000000, 0.0 },
  { -1.0032427051361714, 2, -7.5000000000000000, 0.0 },
  { -0.96059820624535719, 2, -7.0000000000000000, 0.0 },
  { -0.54840355866757695, 2, -6.5000000000000000, 0.0 },
  { 0.64078266570172315, 2, -6.0000000000000000, 0.0 },
  { 0.98127747477447369, 2, -5.5000000000000000, 0.0 },
  { 0.99282013254695667, 2, -5.0000000000000000, 0.0 },
  { 0.83183922082321915, 2, -4.5000000000000000, 0.0 },
  { 0.56814394442986960, 2, -4.0000000000000000, 0.0 },
  { 0.24650453023476912, 2, -3.5000000000000000, 0.0 },
  { -0.098026209391301133, 2, -3.0000000000000000, 0.0 },
  { -0.43359820323553289, 2, -2.5000000000000000, 0.0 },
  { -0.72714605086327944, 2, -2.0000000000000000, 0.0 },
  { -0.93921859275409214, 2, -1.5000000000000000, 0.0 },
  { -1.0139591323607684, 2, -1.0000000000000000, 0.0 },
  { -0.84831187770367933, 2, -0.50000000000000000, 0.0 },
  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },
  { 0.84831187770367933, 2, 0.50000000000000000, 0.0 },
  { 1.0139591323607684, 2, 1.0000000000000000, 0.0 },
  { 0.93921859275409214, 2, 1.5000000000000000, 0.0 },
  { 0.72714605086327944, 2, 2.0000000000000000, 0.0 },
  { 0.43359820323553289, 2, 2.5000000000000000, 0.0 },
  { 0.098026209391301133, 2, 3.0000000000000000, 0.0 },
  { -0.24650453023476912, 2, 3.5000000000000000, 0.0 },
  { -0.56814394442986960, 2, 4.0000000000000000, 0.0 },
  { -0.83183922082321915, 2, 4.5000000000000000, 0.0 },
  { -0.99282013254695667, 2, 5.0000000000000000, 0.0 },
  { -0.98127747477447369, 2, 5.5000000000000000, 0.0 },
  { -0.64078266570172315, 2, 6.0000000000000000, 0.0 },
  { 0.54840355866757695, 2, 6.5000000000000000, 0.0 },
  { 0.96059820624535719, 2, 7.0000000000000000, 0.0 },
  { 1.0032427051361714, 2, 7.5000000000000000, 0.0 },
  { 0.86027963733231172, 2, 8.0000000000000000, 0.0 },
  { 0.60731897904008003, 2, 8.5000000000000000, 0.0 },
  { 0.29122555781958798, 2, 9.0000000000000000, 0.0 },
  { -0.052122207190274598, 2, 9.5000000000000000, 0.0 },
  { -0.39071647608680155, 2, 10.000000000000000, 0.0 },
};
const double toler001 = 5.0000000000000039e-13;

template<typename Ret, unsigned int Num>
  int
  test(const testcase_clausen_cl<Ret> (&data)[Num], Ret toler)
  {
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    bool failure = false;
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = emsr::clausen_cl(data[i].m, data[i].w);
	const bool failure_f = std::isnan(f);
	if (!failure && failure_f)
	  failure = true;
	if (!failure_f)
	  {
	    const Ret f0 = data[i].f0;
	    const Ret diff = f - f0;
	    if (std::abs(diff) > max_abs_diff)
	      max_abs_diff = std::abs(diff);
	    if (std::abs(f0) > Ret(10) * eps
	     && std::abs(f) > Ret(10) * eps)
	      {
		const Ret frac = diff / f0;
		if (std::abs(frac) > max_abs_frac)
		  max_abs_frac = std::abs(frac);
	      }
	  }
      }
    int num_errors = 0;
    VERIFY(!failure && max_abs_frac < toler);
    return num_errors;
  }

int
main()
{
  return test(data001, toler001);
}
