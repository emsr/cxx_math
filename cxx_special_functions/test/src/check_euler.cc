
//  euler

#include "verify.h"

// Test data.
// max(|f - f_Burkhardt|): 2.1778071482940062e+40 at index 50
// max(|f - f_Burkhardt| / |f_Burkhardt|): 1.3058270164753991e-12
// mean(f - f_Burkhardt): 4.2660440358180539e+38
// variance(f - f_Burkhardt): inf
// stddev(f - f_Burkhardt): inf
const testcase_euler<double>
data001[51] =
{
  { 1.0000000000000000, 0, 0.0 },
  { 0.0000000000000000, 1, 0.0 },
  { -1.0000000000000000, 2, 0.0 },
  { 0.0000000000000000, 3, 0.0 },
  { 5.0000000000000000, 4, 0.0 },
  { 0.0000000000000000, 5, 0.0 },
  { -61.000000000000000, 6, 0.0 },
  { 0.0000000000000000, 7, 0.0 },
  { 1385.0000000000000, 8, 0.0 },
  { 0.0000000000000000, 9, 0.0 },
  { -50521.000000000000, 10, 0.0 },
  { 0.0000000000000000, 11, 0.0 },
  { 2702765.0000000000, 12, 0.0 },
  { 0.0000000000000000, 13, 0.0 },
  { -199360981.00004119, 14, 0.0 },
  { 0.0000000000000000, 15, 0.0 },
  { 19391512144.974678, 16, 0.0 },
  { 0.0000000000000000, 17, 0.0 },
  { -2404879675440.8755, 18, 0.0 },
  { 0.0000000000000000, 19, 0.0 },
  { 370371188237524.50, 20, 0.0 },
  { 0.0000000000000000, 21, 0.0 },
  { -69348874393137952., 22, 0.0 },
  { 0.0000000000000000, 23, 0.0 },
  { 1.5514534163557102e+19, 24, 0.0 },
  { 0.0000000000000000, 25, 0.0 },
  { -4.0870725092931288e+21, 26, 0.0 },
  { 0.0000000000000000, 27, 0.0 },
  { 1.2522596414036313e+24, 28, 0.0 },
  { 0.0000000000000000, 29, 0.0 },
  { -4.4154389324902359e+26, 30, 0.0 },
  { 0.0000000000000000, 31, 0.0 },
  { 1.7751939157953948e+29, 32, 0.0 },
  { 0.0000000000000000, 33, 0.0 },
  { -8.0723299235887997e+31, 34, 0.0 },
  { 0.0000000000000000, 35, 0.0 },
  { 4.1222060339517759e+34, 36, 0.0 },
  { 0.0000000000000000, 37, 0.0 },
  { -2.3489580527043140e+37, 38, 0.0 },
  { 0.0000000000000000, 39, 0.0 },
  { 1.4851150718115004e+40, 40, 0.0 },
  { 0.0000000000000000, 41, 0.0 },
  { -1.0364622733519629e+43, 42, 0.0 },
  { 0.0000000000000000, 43, 0.0 },
  { 7.9475794225976063e+45, 44, 0.0 },
  { 0.0000000000000000, 45, 0.0 },
  { -6.6675375166855565e+48, 46, 0.0 },
  { 0.0000000000000000, 47, 0.0 },
  { 6.0962786455685538e+51, 48, 0.0 },
  { 0.0000000000000000, 49, 0.0 },
  { -6.0532852481886335e+54, 50, 0.0 },
};
const double toler001 = 1.0000000000000006e-10;

template<typename Ret, unsigned int Num>
  int
  test(const testcase_euler<Ret> (&data)[Num], Ret toler)
  {
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    bool failure = false;
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = emsr::euler<Ret>(data[i].n);
	const bool failure_f = std::isnan(f);
	if (!failure && failure_f)
	  failure = true;
	if (!failure_f)
	  {
	    const Ret f0 = data[i].f0;
	    const Ret diff = f - f0;
	    if (std::abs(diff) > max_abs_diff)
	      max_abs_diff = std::abs(diff);
	    if (std::abs(f0) > Ret(10) * eps
	     && std::abs(f) > Ret(10) * eps)
	      {
		const Ret frac = diff / f0;
		if (std::abs(frac) > max_abs_frac)
		  max_abs_frac = std::abs(frac);
	      }
	  }
      }
    int num_errors = 0;
    VERIFY(!failure && max_abs_frac < toler);
    return num_errors;
  }

int
main()
{
  return test(data001, toler001);
}
