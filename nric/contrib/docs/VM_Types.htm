<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
  "http://www.w3.org/TR/REC-html40/transitional.dtd">
<HTML>
<HEAD>
  <TITLE>VecMat - Types</TITLE>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
  <META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
  <META NAME="Author" CONTENT="Kevin Dolan">
  <LINK HREF="vecmat.css" REL="stylesheet" TYPE="text/css">
</HEAD>

<BODY>

<H1>5. Typedefs.</H1>

<P>Several <CODE>typedef</CODE> declarations are included for convenience
purposes. These are also designed to be compatible with those used by
<EM>Numerical Recipes in C++</EM>.</P>

<H2>5.1. Complex types.</H2>

<CODE><STRONG>
<P>typedef std::complex&lt;float&gt; CPLX_SP</P>
<P>typedef std::complex&lt;double&gt; CPLX_DP</P>
</STRONG></CODE>

<H2>5.2. Vector Types.</H2>

<CODE><STRONG>
<P>typedef Vector&lt;bool&gt; Vec_BOOL</P>
<P>typedef Vector&lt;char&gt; Vec_CHR</P>
<P>typedef Vector&lt;signed char&gt; Vec_SCHR</P>
<P>typedef Vector&lt;unsigned char&gt; Vec_UCHR</P>
<P>typedef Vector&lt;short&gt; Vec_SHRT</P>
<P>typedef Vector&lt;unsigned short&gt; Vec_USHRT</P>
<P>typedef Vector&lt;int&gt; Vec_INT</P>
<P>typedef Vector&lt;unsigned int&gt; Vec_UINT</P>
<P>typedef Vector&lt;long&gt; Vec_LNG</P>
<P>typedef Vector&lt;unsigned long&gt; Vec_ULNG</P>
<P>typedef Vector&lt;float&gt; Vec_SP</P>
<P>typedef Vector&lt;double&gt; Vec_DP</P>
<P>typedef Vector&lt;CPLX_SP&gt; Vec_CPLX_SP</P>
<P>typedef Vector&lt;CPLX_DP&gt; Vec_CPLX_DP</P>
</STRONG></CODE>

<H2>5.3. Matrix Types.</H2>

<CODE><STRONG>
<P>typedef Matrix&lt;bool&gt; Mat_BOOL</P>
<P>typedef Matrix&lt;char&gt; Mat_CHR</P>
<P>typedef Matrix&lt;signed char&gt; Mat_SCHR</P>
<P>typedef Matrix&lt;unsigned char&gt; Mat_UCHR</P>
<P>typedef Matrix&lt;short&gt; Mat_SHRT</P>
<P>typedef Matrix&lt;unsigned short&gt; Mat_USHRT</P>
<P>typedef Matrix&lt;int&gt; Mat_INT</P>
<P>typedef Matrix&lt;unsigned int&gt; Mat_UINT</P>
<P>typedef Matrix&lt;long&gt; Mat_LNG</P>
<P>typedef Matrix&lt;unsigned long&gt; Mat_ULNG</P>
<P>typedef Matrix&lt;float&gt; Mat_SP</P>
<P>typedef Matrix&lt;double&gt; Mat_DP</P>
<P>typedef Matrix&lt;CPLX_SP&gt; Mat_CPLX_SP</P>
<P>typedef Matrix&lt;CPLX_DP&gt; Mat_CPLX_DP</P>
</STRONG></CODE>

<H2>5.4 Types for use with <EM>FFTW</EM>.</H2>

<P>These definitions are only included if the header file "vm_fftw.h" is
included.</P>

<CODE><STRONG>
<P>typedef fftw_real REAL</P>
<P>typedef fftw_complex FFTW_CPLX</P>
<P>typedef std::complex&lt;REAL&gt; CPLX_REAL</P>
<P>typedef Vector&lt;REAL&gt; Vec_REAL</P>
<P>typedef Vector&lt;FFTW_CPLX&gt; Vec_FFTW_CPLX</P>
<P>typedef Vector&lt;CPLX_REAL&gt; Vec_CPLX_REAL</P>
</STRONG></CODE>

<H2>5.5 Types for use with "random.h" header file.</H2>

<P>These definitions are provided by the "random.h" header file. They provide
32 bit integer types for the generators.</P>

<CODE><STRONG>
<P>typedef int INT32</P>
<P>typedef unsigned int UINT32</P>
</STRONG></CODE>

<P></P>
<P>Note that these are just provided to make it easier to modify the code if
<CODE>int</CODE> is not 32 bit on your platform. When actually using the
routines, you can use standard integer types.</P>

<P><A HREF="VM_ErrCheck.htm">Next Section</A></P>
<P><A HREF="VecMat.htm">Back to Index</A></P>

</BODY>
</HTML>