<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
  "http://www.w3.org/TR/REC-html40/transitional.dtd">
<HTML>
<HEAD>
  <TITLE>VecMat - FFTWPlan</TITLE>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
  <META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
  <META NAME="Author" CONTENT="Kevin Dolan">
  <LINK HREF="vecmat.css" REL="stylesheet" TYPE="text/css">
</HEAD>

<BODY>

<H2>3.5. FFTWPlan</H2>

<P>This class serves as a wrapper for the <EM>FFTW</EM> Fourier transform
libraries for use with complex vectors. It serves two major purposes. First, it
encapsulates the allocation of the forward and reverse plan structures used by
the <EM>FFTW</EM> functions to keep track of information that only needs to be
calculated once for transforms of a given size. Second, it provides routines
for automatically converting from the <CODE>std::complex&lt;T&gt;</CODE>
classes used by <EM>VecMat</EM> to the <CODE>fftw_complex</CODE> structure used
by <EM>FFTW</EM>. It also provides routines for operating directly on vectors
of <CODE>fftw_complex</CODE> values.</P>

<P>Use of this class requires you to include the header file "vm_fftw.h", which
automatically includes the "fftw.h" and "rfftw.h" headers.</P>

<H3>3.5.1. Constructors.</H3>

<H4><CODE>explicit FFTWPlan(size_t len = 0)</CODE></H4>
<P>Construct a plan of size <CODE>len</CODE>. If len is zero then the
<CODE>resize()</CODE> member function can be used to set a valid plan size, or
the plan size will be set automatically when <CODE>fourier()</CODE> or
<CODE>ifourier()</CODE> are called. Note that any size can be used, but the
transforms will be very slow if <CODE>len</CODE> has large prime factors.</P>

<H4><CODE>FFTWPlan(const FFTWPlan&amp; plan)</CODE></H4>
<P>This constructs an exact copy of <CODE>plan</CODE>. Note that two plans of
the same size will function identically, so this constructor is only provided
for the sake of completeness. For example, it might be necessary if you want to
include an <CODE>FFTWPlan</CODE> object as a data member of another class.</P>

<H3>3.5.2. Member functions.</H3>

<H4><CODE>FFTWPlan&amp; operator=(const FFTWPlan&amp; plan)</CODE></H4>
<P>The assignment operator simply resizes the plan it is called for to the size
of <CODE>plan</CODE>. Like the copy constructor, this is included only for
the sake of completeness.</P>
 
<H4><CODE>size_t size() const</CODE></H4>
<P>This member function returns the current size of the plan.</P>

<H4><CODE>void resize(size_t len)</CODE></H4>
Reinitializes the plan to size <CODE>len</CODE>. Resizing to zero can be done
to free up any memory being used by the plan once it is no longer needed.</P>

<H4><CODE>void fourier(const Vec_CPLX_REAL&amp; array, Vec_CPLX_REAL&amp;
    arrayft)</CODE></H4>
<P>Performs the forward Fourier transform of <CODE>array</CODE>, and stores the
results in <CODE>arrayft</CODE>. Pointer casting is used to allow the function
to send pointers of type <CODE>FFTW_CPLX *</CODE>, that point to the vector's
data. This will only work if the <CODE>CPLX_REAL</CODE> class uses the same
storage scheme as <CODE>FFTW_CPLX</CODE>. This means that it must only have two
data members, and they must be stored with the real value first, and the
imaginary value second. The vectors <CODE>array</CODE> and <CODE>arrayft</CODE>
must be the same size. If the plan is not set to this size, it will be resized.
If the vectors are size zero, the function simply returns, and the plan size is
not altered.</P>

<H4><CODE>void fourier(const Vec_FFTW_CPLX&amp; array, Vec_FFTW_CPLX&amp;
    arrayft)</CODE></H4>
<P>Performs the forward Fourier transform of <CODE>array</CODE>, and stores the
results in <CODE>arrayft</CODE>. The data in <CODE>array</CODE> is directly
operated on. The vectors <CODE>array</CODE> and <CODE>arrayft</CODE> must be
the same size. If the plan is not set to this size, it will be resized. If the
vectors are size zero, the function simply returns, and the plan size is not
altered.</P>

<H4><CODE>void ifourier(const Vec_CPLX_REAL&amp; arrayft, Vec_CPLX_REAL&amp;
    array)</CODE></H4>
<P>Performs the inverse Fourier transform of <CODE>arrayft</CODE>, and stores
the results in <CODE>array</CODE>. Pointer casting is used to allow the function
to send pointers of type <CODE>FFTW_CPLX *</CODE>, that point to the vector's
data. This will only work if the <CODE>CPLX_REAL</CODE> class uses the same
storage scheme as <CODE>FFTW_CPLX</CODE>. This means that it must only have two
data members, and they must be stored with the real value first, and the
imaginary value second. The vectors <CODE>array</CODE> and <CODE>arrayft</CODE>
must be the same size. If the plan is not set to this size, it will be resized.
If the vectors are size zero, the function simply returns, and the plan size is
not altered.</P>

<H4><CODE>void ifourier(const Vec_FFTW_CPLX&amp; arrayft, Vec_FFTW_CPLX&amp;
    array)</CODE></H4>
<P>Performs the inverse Fourier transform of <CODE>arrayft</CODE>, and stores
the results in <CODE>array</CODE>. The data in <CODE>array</CODE> is directly
operated on. The vectors <CODE>array</CODE> and <CODE>arrayft</CODE> must be
the same size. If the plan is not set to this size, it will be resized. If
the vectors are size zero, the function simply returns, and the plan size is
not altered.</P>

<H2><A NAME=rfftw>3.6. RFFTWPlan</A></H2>

<P>This class serves as a wrapper for the <EM>FFTW</EM> Fourier transform
libraries for use with real vectors It encapsulates the allocation of the
forward and reverse plan structures used by the <EM>FFTW</EM> functions to keep
track of information that only needs to be calculated once for transforms of a
given size. Note that the <EM>FFTW</EM> libraries have a special format for
storing the Fourier transforms of real arrays. The real part of the positive
frequencies are stored in the indices where the positive frequencies would
normally be stored, and the imaginary part of the positive frequencies are
stored in the indices where the negative frequencies would normally be stored.
This allows the result to be stored in a real array of the same size as the
input array. See the <EM>FFTW</EM> documentation for more details.</P>

<P>Use of this class requires you to include the header file "vm_fftw.h".</P>

<H3>3.6.1. Constructors.</H3>

<H4><CODE>explicite RFFTWPlan(size_t len = 0)</CODE></H4>
<P>Construct a plan of size <CODE>len</CODE>. If <CODE>len</CODE> is zero then
the <CODE>resize()</CODE> member function can be used to set a valid plan size,
or the plan size will be set automatically when <CODE>fourier()</CODE> or
<CODE>ifourier()</CODE> are called. Note that any size can be used, but the
transforms will be very slow if <CODE>len</CODE> has large prime factors.</P>

<H4><CODE>RFFTWPlan(const RFFTWPlan&amp; plan)</CODE></H4>
<P>This constructs an exact copy of <CODE>plan</CODE>. Note that two plans of
the same size will function identically, so this constructor is only provided
for the sake of completeness. For example, it might be necessary if you want to
include an <CODE>RFFTWPlan</CODE> object as a data member of another class.</P>

<H3>3.6.2. Member functions.</H3>

<H4><CODE>RFFTWPlan&amp; operator=(const RFFTWPlan&amp; plan)</CODE></H4>
<P>The assignment operator simply resizes the plan it is called for to the
size of <CODE>plan</CODE>. Like the copy constructor, this is included only for
the sake of completeness.</P>

<H4><CODE>size_t size() const</CODE></H4>
<P>This member function returns the current size of the plan.</P>

<H4><CODE>void resize(size_t len)</CODE></H4>
<P>Reinitializes the plan to size <CODE>len</CODE>. Resizing to zero can be
done to free up any memory being used by the plan once it is no longer
needed.</P>

<H4><CODE>void fourier(const Vec_REAL&amp; array, Vec_REAL&amp;
    arrayft)</CODE></H4>
<P>Performs the forward Fourier transform of <CODE>array</CODE>, and stores the
results in <CODE>arrayft</CODE>. This function operates directly on the data of
the vectors, so no copying is done. The vectors <CODE>array</CODE> and
<CODE>arrayft</CODE> must be the same size. If the plan is not set to this
size, it will be resized. If the vectors are size zero, the function simply
returns, and the plan size is not altered.</P>

<H4><CODE>void ifourier(const Vec_REAL&amp; arrayft, Vec_REAL&amp;
    array)</CODE></H4>
<P>Performs the inverse Fourier transform of <CODE>arrayft</CODE>, and stores
the results in <CODE>array</CODE>. This function operates directly on the data
of the vectors, so no copying is done. The vectors <CODE>array</CODE> and
<CODE>arrayft</CODE> must be the same size. If the plan is not set to this
size, it will be resized. If the vectors are size zero, the function simply
returns, and the plan size is not altered. Note that due to how the
<EM>FFTW</EM> transforms for real data work, the inverse transform will corrupt
the contents of <CODE>arrayft</CODE>.</P>

<H4><CODE>Vec_REAL power(const Vec_REAL&amp; array, size_t res)</CODE></H4>
<P>This function calculates the power-spectrum of <CODE>array</CODE>. The
parameter <CODE>res</CODE> sets the window size to be used for the calculation.
The power is estimated by averaging over 50% overlapping periodograms of length
<CODE>res</CODE>. A Welch windowing function is used to eliminate aperiodicity
artifacts. The resulting power is returned in a real vector of length
<CODE>res</CODE>. Note that only the first <CODE>res / 2 + 1</CODE> frequency
bins will be non-zero. This returned vector can therefore be immediately
inverse Fourier transformed to give the auto-correlation function. As with
<CODE>fourier()</CODE> and <CODE>ifourier()</CODE>, if the size of the plan is
not equal to <CODE>res</CODE>, then it will be resized. If <CODE>res</CODE> is
zero then an empty vector will be returned, and the plan will not be
resized.</P>
   
<H4><CODE>Vec_REAL cross_spectrum(const Vec_REAL&amp; array1, const
    Vec_REAL&amp; array2, size_t res)</CODE></H4>
<P>This function calculates the cross-spectrum of <CODE>array1</CODE> and
<CODE>array2</CODE>. The parameter <CODE>res</CODE> sets the window size to be
used for the calculation. The cross-spectrum is estimated by averaging over 50%
overlapping windows of length <CODE>res</CODE>. A Welch windowing function is
used to eliminate aperiodicity artifacts. The result is returned in a real
vector of size <CODE>res</CODE>. This returned vector can then be immediately
inverse Fourier transformed to give the cross-correlation function. As with
<CODE>fourier()</CODE> and <CODE>ifourier()</CODE>, if the size of the plan is
not equal to <CODE>res</CODE>, then it will be resized. If <CODE>res</CODE> is
zero, then an empty vector will be returned, and the plan will not be resized.
Both arrays must be non-empty and the same size.</P>

<H4><CODE>Vec_REAL convolve(const Vec_REAL&amp; signal, const Vec_REAL&amp;
    response, size_t pad = 0)</CODE></H4>
<P>This function convolves <CODE>signal</CODE> with <CODE>response</CODE>. The
two vectors do not need to be the same length, but <CODE>response</CODE> must
not be longer than <CODE>signal</CODE>. If necessary, <CODE>response</CODE>
will be padded with zeros to give the proper length. This padding is done by
the convention that <CODE>response[0]</CODE> is the response function at time
zero, and that the last half of <CODE>response</CODE> represents negative time.
This means that the zero padding is done in the middle, not at the end. The
optional parameter <CODE>pad</CODE> can be used to pad <CODE>signal</CODE> to
remove aperiodicity artifacts. If <CODE>signal</CODE> is not periodic, then a
padding value equal of at least half the size of <CODE>response</CODE> should
be used. For best results, pick a value of <CODE>pad</CODE> such that the
padded length has only small prime factors. If the plan size is not equal to
the size of the padded <CODE>signal</CODE>, then it will be resized.</P>

<P><A HREF="VM_Random.htm">Next Section</A></P>
<P><A HREF="VM_Classes.htm">Back to Classes</A></P>

</BODY>
</HTML>