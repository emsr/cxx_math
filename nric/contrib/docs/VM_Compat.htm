<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
  "http://www.w3.org/TR/REC-html40/transitional.dtd">
<HTML>
<HEAD>
  <TITLE>VecMat - Compatability Issues</TITLE>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
  <META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
  <META NAME="Author" CONTENT="Kevin Dolan">
  <LINK HREF="vecmat.css" REL="stylesheet" TYPE="text/css">
</HEAD>

<BODY>

<H1>10. Compatibility Issues.</H1>

<P>This software makes extensive use of the <EM>C++ Standard Library</EM>. It
is therefore necessary that your compiler properly support the <EM>Standard
Library</EM>, and in particular, the <EM>Standard Template Library</EM>
(<EM>STL</EM>). One possible source of compiler difficulties may be in the use
of streaming IO. The <EM>VecMat</EM> software uses the <EM>Standard
Library</EM> header files "iostream" and "fstream". The <EM>Standard
Library</EM> streaming IO headers cannot be used within the same project as the
nonstandard streaming IO headers "iostream.h". If you want to combine the
<EM>VecMat</EM> software with software that uses the nonstandard streaming IO,
then you must either modify your code to use the <EM>Standard Library</EM> for
these functions, or modify the <EM>VecMat</EM> software to use the nonstandard
header files.</P>

<P>I have only tested this software on three platforms so far.</P>

<UL>
  <LI>Microsoft Visual C++ 6.0 SP4 (Windows 2000 Pro)</LI>
  <LI>g++ 2.95.1 (Solaris 2.6)</LI>
  <LI>g++ 2.95.3 (Solaris 2.6)</LI></UL>

<P>It seems to work ok on these platforms. The only compatibility issue I have
seen so far is that the iterator class inheritance is different under
<EM>VC++</EM> than under <EM>g++</EM>. It appears that <EM>g++</EM> conforms to
the standard, but that <EM>VC++</EM> does not. I have included a workaround for
<EM>VC++</EM>, and if you get many compiler errors having to do with iterators,
I would suggest trying the same workaround on your own platform. The workaround
is at the beginning of the "vector.h" source file.</P>

<DIV CLASS=sc><CODE>
<P>#ifdef _MSC_VER</P>
<P>namespace std {</P>
<P>template &lt;class T, class pd&gt;</P>
<P>struct random_access_iterator :
public std::iterator&lt;std::random_access_iterator_tag, T, pd&gt; {};</P>
<P>}</P>
<P>#endif</P>
</CODE></DIV>

<P>For some reason <EM>Microsoft</EM> does not provide the
<CODE>random_access_iterator</CODE> base-class, so this workaround provides it,
and adds it to the standard namespace. I understand that the <EM>Intel</EM>
compiler is source compatible with the <EM>Microsoft</EM> compiler, so it is
likely that this workaround will be needed on that platform as well.</P>

<P><A HREF="VecMat.htm">Back to Index</A></P>

</BODY>
</HTML>