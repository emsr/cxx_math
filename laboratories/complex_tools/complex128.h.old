// -*- C++ -*- header.

// Copyright (C) 2015 Free Software Foundation, Inc.
// Copyright (C) 2020-2022 Edward M. Smith-Rowland
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or (at
// your option) any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/complex128.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{xxxxx}
 */

#ifndef COMPLEX128_H
#define COMPLEX128_H 1

#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)

#include <float128.h>
#include <complex>

namespace std
{

  inline __float128
  abs(__complex128 z) noexcept
  { return cabsq(z); }

  inline __float128
  arg(__complex128 z) noexcept
  { return cargq(z); }

  inline __float128
  imag(__complex128 z) noexcept
  { return cimagq(z); }

  inline __float128
  real(__complex128 z) noexcept
  { return crealq(z); }

  inline __complex128
  acos(__complex128 z) noexcept
  { return cacosq(z); }

  inline __complex128
  acosh(__complex128 z) noexcept
  { return cacoshq(z); }

  inline __complex128
  asin(__complex128 z) noexcept
  { return casinq(z); }

  inline __complex128
  asinh(__complex128 z) noexcept
  { return casinhq(z); }

  inline __complex128
  atan(__complex128 z) noexcept
  { return catanq(z); }

  inline __complex128
  atanh(__complex128 z) noexcept
  { return catanhq(z); }

  inline __complex128
  cos(__complex128 z) noexcept
  { return ccosq(z); }

  inline __complex128
  cosh(__complex128 z) noexcept
  { return ccoshq(z); }

  inline __complex128
  exp(__complex128 z) noexcept
  { return cexpq(z); }

  inline __complex128
  expi(__float128 z) noexcept
  { return cexpiq(z); }

  inline __complex128
  log(__complex128 z) noexcept
  { return clogq(z); }

  inline __complex128
  log10(__complex128 z) noexcept
  { return clog10q(z); }

  inline __complex128
  conj(__complex128 z) noexcept
  { return conjq(z); }

  inline __complex128
  pow(__complex128 z, __complex128 w) noexcept
  { return cpowq(z, w); }

  inline __complex128
  proj(__complex128 z) noexcept
  { return cprojq(z); }

  inline __complex128
  sin(__complex128 z) noexcept
  { return csinq(z); }

  inline __complex128
  sinh(__complex128 z) noexcept
  { return csinhq(z); }

  inline __complex128
  sqrt(__complex128 z) noexcept
  { return csqrtq(z); }

  inline __complex128
  tan(__complex128 z) noexcept
  { return ctanq(z); }

  inline __complex128
  tanh(__complex128 z) noexcept
  { return ctanhq(z); }

  /// complex<__float128> specialization
  template<>
    struct complex<__float128>
    {
      typedef __float128 value_type;

      // From quadmath.h
      //typedef _Complex float __attribute__((mode(TC))) __complex128;
      typedef __complex128 _ComplexT;

      _GLIBCXX_CONSTEXPR complex(_ComplexT z) : m_value(z) { }

      _GLIBCXX_CONSTEXPR complex(__float128 r = 0.0Q, 
				 __float128 i = 0.0Q)
#if __cplusplus >= 201103L
      : m_value{ r, i } { }
#else
      {
	__real__ m_value = r;
	__imag__ m_value = i;
      }
#endif

      _GLIBCXX_CONSTEXPR complex(const complex<float>& z)
      : m_value(z.__rep()) { }

      _GLIBCXX_CONSTEXPR complex(const complex<double>& z)
      : m_value(z.__rep()) { }

      _GLIBCXX_CONSTEXPR complex(const complex<long double>& z)
      : m_value(z.__rep()) { }

#if __cplusplus >= 201103L
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      __attribute ((__abi_tag__ ("cxx11")))
      constexpr __float128 
      real() const
      { return __real__ m_value; }

      __attribute ((__abi_tag__ ("cxx11")))
      constexpr __float128 
      imag() const
      { return __imag__ m_value; }
#else
      __float128& 
      real()
      { return __real__ m_value; }

      const __float128& 
      real() const
      { return __real__ m_value; }

      __float128& 
      imag()
      { return __imag__ m_value; }

      const __float128& 
      imag()
      const { return __imag__ m_value; }
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      void 
      real(__float128 val)
      { __real__ m_value = val; }

      void 
      imag(__float128 val)
      { __imag__ m_value = val; }

      complex&
      operator=(__float128 r)
      {
	m_value = r;
	return *this;
      }

      complex&
      operator+=(__float128 r)
      {
	m_value += r;
	return *this;
      }

      complex&
      operator-=(__float128 r)
      {
	m_value -= r;
	return *this;
      }

      complex&
      operator*=(__float128 r)
      {
	m_value *= r;
	return *this;
      }

      complex&
      operator/=(__float128 r)
      {
	m_value /= r;
	return *this;
      }

      // The compiler knows how to do this efficiently
      // complex& operator=(const complex&);

      template<typename Tp>
        complex&
        operator=(const complex<Tp>& z)
	{
	  __real__ m_value = z.real();
	  __imag__ m_value = z.imag();
	  return *this;
	}

      template<typename Tp>
        complex&
	operator+=(const complex<Tp>& z)
	{
	  __real__ m_value += z.real();
	  __imag__ m_value += z.imag();
	  return *this;
	}

      template<typename Tp>
        complex&
	operator-=(const complex<Tp>& z)
	{
	  __real__ m_value -= z.real();
	  __imag__ m_value -= z.imag();
	  return *this;
	}

      template<typename Tp>
        complex&
	operator*=(const complex<Tp>& z)
	{
	  _ComplexT __t;
	  __real__ __t = z.real();
	  __imag__ __t = z.imag();
	  m_value *= __t;
	  return *this;
	}

      template<typename Tp>
        complex&
	operator/=(const complex<Tp>& z)
	{
	  _ComplexT __t;
	  __real__ __t = z.real();
	  __imag__ __t = z.imag();
	  m_value /= __t;
	  return *this;
	}

      _GLIBCXX_CONSTEXPR _ComplexT __rep() const { return m_value; }

    private:
      _ComplexT m_value;
    };

  // @todo Ctors from larger types are marked explicit in the smaller classes.
  //inline _GLIBCXX_CONSTEXPR
  //complex<float>::complex(const complex<__float128>& z)
  //: m_value(z.__rep()) { }

  //inline _GLIBCXX_CONSTEXPR
  //complex<double>::complex(const complex<__float128>& z)
  //: m_value(z.__rep()) { }

  //inline _GLIBCXX_CONSTEXPR
  //complex<long double>::complex(const complex<__float128>& z)
  //: m_value(z.__rep()) { }

#if _GLIBCXX_USE_C99_COMPLEX

  inline __float128
  __complex_abs(__complex128 z)
  { return cabsq(z); }

  inline __float128
  __complex_arg(__complex128 z)
  { return cargq(z); }

  inline __complex128
  __complex_cos(__complex128 z)
  { return ccosq(z); }

  inline __complex128
  __complex_cosh(__complex128 z)
  { return ccoshq(z); }

  inline __complex128
  __complex_exp(__complex128 z)
  { return cexpq(z); }

  inline __complex128
  __complex_log(__complex128 z)
  { return clogq(z); }

  inline __complex128
  __complex_sin(__complex128 z)
  { return csinq(z); }

  inline __complex128
  __complex_sinh(__complex128 z)
  { return csinhq(z); }      

  inline __complex128
  __complex_sqrt(__complex128 z)
  { return csqrtq(z); }

  inline __complex128
  __complex_tan(__complex128 z)
  { return ctanq(z); }

  inline __complex128
  __complex_tanh(__complex128 z)
  { return ctanhq(z); }

  inline __complex128
  __complex_pow(__complex128 x, __complex128 y)
  { return cpowq(x, y); }

#endif  

#if __cplusplus > 201103L

inline namespace literals {
inline namespace complex_literals {

  std::complex<__float128>
  operator""iq(const char* str)
  { return complex<__float128>(0.0Q, strtoflt128(str, 0)); }

} // inline namespace complex_literals
} // inline namespace literals

#endif // C++14

} // namespace std

#endif // __STRICT_ANSI__ && _GLIBCXX_USE_FLOAT128

#endif // COMPLEX128_H
