// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  lpochhammer_l
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

//  Divergence at a=1.0000000000000000 x=1.0000000000000000 f1=0.0000000000000000 f2=inf

// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 1.1897506882762638
// max(|f - f_GSL| / |f_GSL|): 0.92370332464112082
const testcase_lpochhammer_l<double>
data001[3] =
{
  { 0.20328095143129579, 1.0000000000000000, 0.25000000000000000 },
  { 0.57236494292470042, 1.0000000000000000, 0.50000000000000000 },
  { 1.2880225246980770, 1.0000000000000000, 0.75000000000000000 },
};
const double toler001 = 0.050000000000000003;
//  Divergence at a=2.0000000000000000 x=2.0000000000000000 f1=0.69314718055994529 f2=inf

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 0.69314718055994529
// max(|f - f_GSL| / |f_GSL|): 6.7826889814935347
const testcase_lpochhammer_l<double>
data002[7] =
{
  { -0.084401121020484915, 2.0000000000000000, 0.25000000000000000 },
  { -0.12078223763524432, 2.0000000000000000, 0.50000000000000000 },
  { -0.098271836421812253, 2.0000000000000000, 0.75000000000000000 },
  { -0.0000000000000000, 2.0000000000000000, 1.0000000000000000 },
  { 0.20328095143129579, 2.0000000000000000, 1.2500000000000000 },
  { 0.57236494292470042, 2.0000000000000000, 1.5000000000000000 },
  { 1.2880225246980770, 2.0000000000000000, 1.7500000000000000 },
};
const double toler002 = 0.050000000000000003;
//  Divergence at a=5.0000000000000000 x=5.0000000000000000 f1=4.7874917427820458 f2=inf

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 7.9655455731299911
// max(|f - f_GSL| / |f_GSL|): 3.5850172770148578
const testcase_lpochhammer_l<double>
data003[19] =
{
  { -0.36948241177220842, 5.0000000000000000, 0.25000000000000000 },
  { -0.72431725950550252, 5.0000000000000000, 0.50000000000000000 },
  { -1.0635969028975727, 5.0000000000000000, 0.75000000000000000 },
  { -1.3862943611198881, 5.0000000000000000, 1.0000000000000000 },
  { -1.6912382517545277, 5.0000000000000000, 1.2500000000000000 },
  { -1.9770802280008706, 5.0000000000000000, 1.5000000000000000 },
  { -2.2422518992392195, 5.0000000000000000, 1.7500000000000000 },
  { -2.4849066497879990, 5.0000000000000000, 2.0000000000000000 },
  { -2.7028391634330067, 5.0000000000000000, 2.2500000000000000 },
  { -2.8933709598750252, 5.0000000000000000, 2.5000000000000000 },
  { -3.0531821154555479, 5.0000000000000000, 2.7500000000000000 },
  { -3.1780538303479453, 5.0000000000000000, 3.0000000000000000 },
  { -3.2624549513684302, 5.0000000000000000, 3.2500000000000000 },
  { -3.2988360679831894, 5.0000000000000000, 3.5000000000000000 },
  { -3.2763256667697576, 5.0000000000000000, 3.7500000000000000 },
  { -3.1780538303479453, 5.0000000000000000, 4.0000000000000000 },
  { -2.9747728789166494, 5.0000000000000000, 4.2500000000000000 },
  { -2.6056888874232449, 5.0000000000000000, 4.5000000000000000 },
  { -1.8900313056498683, 5.0000000000000000, 4.7500000000000000 },
};
const double toler003 = 0.050000000000000003;

// Test data for a=10.000000000000000.
// max(|f - f_GSL|): 19.940694480027005
// max(|f - f_GSL| / |f_GSL|): 2.0720244683413909
const testcase_lpochhammer_l<double>
data004[20] =
{
  { -0.55962254003071088, 10.000000000000000, 0.25000000000000000 },
  { -1.1124940592842041, 10.000000000000000, 0.50000000000000000 },
  { -1.6584273601297621, 10.000000000000000, 0.75000000000000000 },
  { -2.1972245773362236, 10.000000000000000, 1.0000000000000000 },
  { -2.7286762404002367, 10.000000000000000, 1.2500000000000000 },
  { -3.2525602227804757, 10.000000000000000, 1.5000000000000000 },
  { -3.7686405604763511, 10.000000000000000, 1.7500000000000000 },
  { -4.2766661190160580, 10.000000000000000, 2.0000000000000000 },
  { -4.7763690837654895, 10.000000000000000, 2.2500000000000000 },
  { -5.2674632433227417, 10.000000000000000, 2.5000000000000000 },
  { -5.7496420293429322, 10.000000000000000, 2.7500000000000000 },
  { -6.2225762680713741, 10.000000000000000, 3.0000000000000000 },
  { -6.6859115886499296, 10.000000000000000, 3.2500000000000000 },
  { -7.1392654202243309, 10.000000000000000, 3.5000000000000000 },
  { -7.5822234930912451, 10.000000000000000, 3.7500000000000000 },
  { -8.0143357372994277, 10.000000000000000, 4.0000000000000000 },
  { -8.4351114434591867, 10.000000000000000, 4.2500000000000000 },
  { -8.8440135124627588, 10.000000000000000, 4.5000000000000000 },
  { -9.2404515696947769, 10.000000000000000, 4.7500000000000000 },
  { -9.6237736497335309, 10.000000000000000, 5.0000000000000000 },
};
const double toler004 = 0.050000000000000003;

// Test data for a=20.000000000000000.
// max(|f - f_GSL|): 28.585008081373410
// max(|f - f_GSL| / |f_GSL|): 2.0203328097051347
const testcase_lpochhammer_l<double>
data005[20] =
{
  { -0.74102189659172524, 20.000000000000000, 0.25000000000000000 },
  { -1.4787976782384007, 20.000000000000000, 0.50000000000000000 },
  { -2.2132846500159431, 20.000000000000000, 0.75000000000000000 },
  { -2.9444389791664278, 20.000000000000000, 1.0000000000000000 },
  { -3.6722156490081446, 20.000000000000000, 1.2500000000000000 },
  { -4.3965684103226792, 20.000000000000000, 1.5000000000000000 },
  { -5.1174497300444415, 20.000000000000000, 1.7500000000000000 },
  { -5.8348107370626039, 20.000000000000000, 2.0000000000000000 },
  { -6.5486011649295719, 20.000000000000000, 2.2500000000000000 },
  { -7.2587692912521362, 20.000000000000000, 2.5000000000000000 },
  { -7.9652618735218041, 20.000000000000000, 2.7500000000000000 },
  { -8.6680240811188156, 20.000000000000000, 3.0000000000000000 },
  { -9.3669994232006424, 20.000000000000000, 3.2500000000000000 },
  { -10.062129672158679, 20.000000000000000, 3.5000000000000000 },
  { -10.753354782297553, 20.000000000000000, 3.7500000000000000 },
  { -11.440612803358604, 20.000000000000000, 4.0000000000000000 },
  { -12.123839788472285, 20.000000000000000, 4.2500000000000000 },
  { -12.802969696083878, 20.000000000000000, 4.5000000000000000 },
  { -13.477934285350976, 20.000000000000000, 4.7500000000000000 },
  { -14.148663004460815, 20.000000000000000, 5.0000000000000000 },
};
const double toler005 = 0.050000000000000003;

// Test data for a=50.000000000000000.
// max(|f - f_GSL|): 38.602306109633787
// max(|f - f_GSL| / |f_GSL|): 2.0054737077984863
const testcase_lpochhammer_l<double>
data006[20] =
{
  { -0.97486506129385475, 50.000000000000000, 0.25000000000000000 },
  { -1.9484611251988895, 50.000000000000000, 0.50000000000000000 },
  { -2.9207817176308879, 50.000000000000000, 0.75000000000000000 },
  { -3.8918202981106162, 50.000000000000000, 1.0000000000000000 },
  { -4.8615702587377143, 50.000000000000000, 1.2500000000000000 },
  { -5.8300249231423322, 50.000000000000000, 1.5000000000000000 },
  { -6.7971775454158774, 50.000000000000000, 1.7500000000000000 },
  { -7.7630213090185123, 50.000000000000000, 2.0000000000000000 },
  { -8.7275493256644268, 50.000000000000000, 2.2500000000000000 },
  { -9.6907546341829232, 50.000000000000000, 2.5000000000000000 },
  { -10.652630199355599, 50.000000000000000, 2.7500000000000000 },
  { -11.613168910728575, 50.000000000000000, 3.0000000000000000 },
  { -12.572363581399117, 50.000000000000000, 3.2500000000000000 },
  { -13.530206946776246, 50.000000000000000, 3.5000000000000000 },
  { -14.486691663314048, 50.000000000000000, 3.7500000000000000 },
  { -15.441810307217679, 50.000000000000000, 4.0000000000000000 },
  { -16.395555373120658, 50.000000000000000, 4.2500000000000000 },
  { -17.347919272733151, 50.000000000000000, 4.5000000000000000 },
  { -18.298894333459984, 50.000000000000000, 4.7500000000000000 },
  { -19.248472796987983, 50.000000000000000, 5.0000000000000000 },
};
const double toler006 = 0.050000000000000003;

// Test data for a=100.00000000000000.
// max(|f - f_GSL|): 45.797340075141392
// max(|f - f_GSL| / |f_GSL|): 2.0022425235838828
const testcase_lpochhammer_l<double>
data007[20] =
{
  { -1.1497261321114820, 100.00000000000000, 0.25000000000000000 },
  { -2.2988225459623663, 100.00000000000000, 0.50000000000000000 },
  { -3.4472876513784172, 100.00000000000000, 0.75000000000000000 },
  { -4.5951198501346084, 100.00000000000000, 1.0000000000000000 },
  { -5.7423175358927097, 100.00000000000000, 1.2500000000000000 },
  { -6.8888790941404068, 100.00000000000000, 1.5000000000000000 },
  { -8.0348029021278649, 100.00000000000000, 1.7500000000000000 },
  { -9.1800873288051434, 100.00000000000000, 2.0000000000000000 },
  { -10.324730734758248, 100.00000000000000, 2.2500000000000000 },
  { -11.468731472144157, 100.00000000000000, 2.5000000000000000 },
  { -12.612087884626419, 100.00000000000000, 2.7500000000000000 },
  { -13.754798307308533, 100.00000000000000, 3.0000000000000000 },
  { -14.896861066668066, 100.00000000000000, 3.2500000000000000 },
  { -16.038274480489122, 100.00000000000000, 3.5000000000000000 },
  { -17.179036857794244, 100.00000000000000, 3.7500000000000000 },
  { -18.319146498776320, 100.00000000000000, 4.0000000000000000 },
  { -19.458601694728884, 100.00000000000000, 4.2500000000000000 },
  { -20.597400727975810, 100.00000000000000, 4.5000000000000000 },
  { -21.735541871801104, 100.00000000000000, 4.7500000000000000 },
  { -22.873023390376886, 100.00000000000000, 5.0000000000000000 },
};
const double toler007 = 0.050000000000000003;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_lpochhammer_l<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::lpochhammer_l(data[i].a, data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  return 0;
}
