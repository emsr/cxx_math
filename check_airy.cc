// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  airy_ai
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data.
// max(|f - f_GSL|): 1.5126788710517758e-15
// max(|f - f_GSL| / |f_GSL|): 5.7527019513802774e-14
testcase_airy_ai<Tp>
data001[] =
{
  { 0.040241238486444071, -10.000000000000000 },
  { 0.31910324771912801, -9.5000000000000000 },
  { -0.022133721547341240, -9.0000000000000000 },
  { -0.33029023763020882, -8.5000000000000000 },
  { -0.052705050356385910, -8.0000000000000000 },
  { 0.32177571638064789, -7.5000000000000000 },
  { 0.18428083525050609, -7.0000000000000000 },
  { -0.23802030199711663, -6.5000000000000000 },
  { -0.32914517362982321, -6.0000000000000000 },
  { 0.017781541276574383, -5.5000000000000000 },
  { 0.35076100902411411, -5.0000000000000000 },
  { 0.29215278105595921, -4.5000000000000000 },
  { -0.070265532949289680, -4.0000000000000000 },
  { -0.37553382314043182, -3.5000000000000000 },
  { -0.37881429367765823, -3.0000000000000000 },
  { -0.11232506769296607, -2.5000000000000000 },
  { 0.22740742820168561, -2.0000000000000000 },
  { 0.46425657774886947, -1.5000000000000000 },
  { 0.53556088329235207, -1.0000000000000000 },
  { 0.47572809161053958, -0.50000000000000000 },
  { 0.35502805388781722, 0.0000000000000000 },
  { 0.23169360648083348, 0.50000000000000000 },
  { 0.13529241631288141, 1.0000000000000000 },
  { 0.071749497008105428, 1.5000000000000000 },
  { 0.034924130423274372, 2.0000000000000000 },
  { 0.015725923380470481, 2.5000000000000000 },
  { 0.0065911393574607175, 3.0000000000000000 },
  { 0.0025840987869896349, 3.5000000000000000 },
  { 0.00095156385120480195, 4.0000000000000000 },
  { 0.00033025032351430934, 4.5000000000000000 },
  { 0.00010834442813607434, 5.0000000000000000 },
  { 3.3685311908599812e-05, 5.5000000000000000 },
  { 9.9476943602528973e-06, 6.0000000000000000 },
  { 2.7958823432049148e-06, 6.5000000000000000 },
  { 7.4921288639971570e-07, 7.0000000000000000 },
  { 1.9172560675134295e-07, 7.5000000000000000 },
  { 4.6922076160992236e-08, 8.0000000000000000 },
  { 1.0997009755195515e-08, 8.5000000000000000 },
  { 2.4711684308724904e-09, 9.0000000000000000 },
  { 5.3302637046174900e-10, 9.5000000000000000 },
  { 1.1047532552898652e-10, 10.000000000000000 },
};

// Test function.
template<typename Tp>
  void
  test001()
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_airy_ai<Tp>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::airy_ai(Tp(data001[i].x));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(5.0000000000000029e-12));
  }
//  airy_bi

// Test data.
// max(|f - f_GSL|): 1.1920928955078125e-07
// max(|f - f_GSL| / |f_GSL|): 1.3892218807298919e-13
testcase_airy_bi<Tp>
data002[] =
{
  { -0.31467982964383845, -10.000000000000000 },
  { 0.037785432489467467, -9.5000000000000000 },
  { 0.32494732345524480, -9.0000000000000000 },
  { 0.0077544364476580746, -8.5000000000000000 },
  { -0.33125158075113792, -8.0000000000000000 },
  { -0.11246348507649087, -7.5000000000000000 },
  { 0.29376207185441372, -7.0000000000000000 },
  { 0.26101265763648318, -6.5000000000000000 },
  { -0.14669837667055663, -6.0000000000000000 },
  { -0.36781345391571185, -5.5000000000000000 },
  { -0.13836913490160088, -5.0000000000000000 },
  { 0.25387265769693296, -4.5000000000000000 },
  { 0.39223470570699931, -4.0000000000000000 },
  { 0.16893983748105870, -3.5000000000000000 },
  { -0.19828962637492650, -3.0000000000000000 },
  { -0.43242247184070520, -2.5000000000000000 },
  { -0.41230258795639835, -2.0000000000000000 },
  { -0.19178486115704119, -1.5000000000000000 },
  { 0.10399738949694459, -1.0000000000000000 },
  { 0.38035265975105381, -0.50000000000000000 },
  { 0.61492662744600068, 0.0000000000000000 },
  { 0.85427704310315555, 0.50000000000000000 },
  { 1.2074235949528713, 1.0000000000000000 },
  { 1.8789415037478949, 1.5000000000000000 },
  { 3.2980949999782148, 2.0000000000000000 },
  { 6.4816607384605804, 2.5000000000000000 },
  { 14.037328963730236, 3.0000000000000000 },
  { 33.055506754611478, 3.5000000000000000 },
  { 83.847071408468111, 4.0000000000000000 },
  { 227.58808183559950, 4.5000000000000000 },
  { 657.79204417117160, 5.0000000000000000 },
  { 2016.5800386595315, 5.5000000000000000 },
  { 6536.4461048098583, 6.0000000000000000 },
  { 22340.607718396990, 6.5000000000000000 },
  { 80327.790709430337, 7.0000000000000000 },
  { 303229.61511253362, 7.5000000000000000 },
  { 1199586.0041244617, 8.0000000000000000 },
  { 4965319.5414712988, 8.5000000000000000 },
  { 21472868.891435351, 9.0000000000000000 },
  { 96892265.580451161, 9.5000000000000000 },
  { 455641153.54822654, 10.000000000000000 },
};

// Test function.
template<typename Tp>
  void
  test002()
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_airy_bi<Tp>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::airy_bi(Tp(data002[i].x));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(1.0000000000000006e-11));
  }

int
main()
{
  test001<double>();
  test002<double>();
  return 0;
}
