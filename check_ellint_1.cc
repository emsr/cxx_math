// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_1
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 6.6613381477509392e-16
// max(|f - f_GSL| / |f_GSL|): 4.3381508715713370e-16
const testcase_ellint_1<double>
data001[10] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.17525427376115024, -0.90000000000000002, 0.17453292519943295 },
  { 0.35492464591297446, -0.90000000000000002, 0.34906585039886590 },
  { 0.54388221416157112, -0.90000000000000002, 0.52359877559829882 },
  { 0.74797400423532490, -0.90000000000000002, 0.69813170079773179 },
  { 0.97463898451966458, -0.90000000000000002, 0.87266462599716477 },
  { 1.2334463254523440, -0.90000000000000002, 1.0471975511965976 },
  { 1.5355247765594913, -0.90000000000000002, 1.2217304763960306 },
  { 1.8882928567775121, -0.90000000000000002, 1.3962634015954636 },
  { 2.2805491384227703, -0.90000000000000002, 1.5707963267948966 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16
const testcase_ellint_1<double>
data002[10] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.17510154241338899, -0.80000000000000004, 0.17453292519943295 },
  { 0.35365068839779390, -0.80000000000000004, 0.34906585039886590 },
  { 0.53926804409084550, -0.80000000000000004, 0.52359877559829882 },
  { 0.73587926028070361, -0.80000000000000004, 0.69813170079773179 },
  { 0.94770942970071170, -0.80000000000000004, 0.87266462599716477 },
  { 1.1789022995388236, -0.80000000000000004, 1.0471975511965976 },
  { 1.4323027881876009, -0.80000000000000004, 1.2217304763960306 },
  { 1.7069629739121674, -0.80000000000000004, 1.3962634015954636 },
  { 1.9953027776647296, -0.80000000000000004, 1.5707963267948966 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 3.3306690738754696e-16
// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16
const testcase_ellint_1<double>
data003[10] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.17496737466916723, -0.69999999999999996, 0.17453292519943295 },
  { 0.35254687535677925, -0.69999999999999996, 0.34906585039886590 },
  { 0.53536740275997119, -0.69999999999999996, 0.52359877559829882 },
  { 0.72603797651684454, -0.69999999999999996, 0.69813170079773179 },
  { 0.92698296348313458, -0.69999999999999996, 0.87266462599716477 },
  { 1.1400447527693316, -0.69999999999999996, 1.0471975511965976 },
  { 1.3657668117194073, -0.69999999999999996, 1.2217304763960306 },
  { 1.6024686895959159, -0.69999999999999996, 1.3962634015954636 },
  { 1.8456939983747236, -0.69999999999999996, 1.5707963267948966 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16
const testcase_ellint_1<double>
data004[10] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.17485154362988359, -0.59999999999999998, 0.17453292519943295 },
  { 0.35160509865544326, -0.59999999999999998, 0.34906585039886590 },
  { 0.53210652578446138, -0.59999999999999998, 0.52359877559829882 },
  { 0.71805304664485659, -0.59999999999999998, 0.69813170079773179 },
  { 0.91082759030195970, -0.59999999999999998, 0.87266462599716477 },
  { 1.1112333229323361, -0.59999999999999998, 1.0471975511965976 },
  { 1.3191461190365270, -0.59999999999999998, 1.2217304763960306 },
  { 1.5332022105084773, -0.59999999999999998, 1.3962634015954636 },
  { 1.7507538029157526, -0.59999999999999998, 1.5707963267948966 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16
const testcase_ellint_1<double>
data005[10] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.17475385514035785, -0.50000000000000000, 0.17453292519943295 },
  { 0.35081868470101585, -0.50000000000000000, 0.34906585039886590 },
  { 0.52942862705190574, -0.50000000000000000, 0.52359877559829882 },
  { 0.71164727562630314, -0.50000000000000000, 0.69813170079773179 },
  { 0.89824523594227768, -0.50000000000000000, 0.87266462599716477 },
  { 1.0895506700518851, -0.50000000000000000, 1.0471975511965976 },
  { 1.2853005857432931, -0.50000000000000000, 1.2217304763960306 },
  { 1.4845545520549484, -0.50000000000000000, 1.3962634015954636 },
  { 1.6857503548125963, -0.50000000000000000, 1.5707963267948966 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 6.6613381477509392e-16
// max(|f - f_GSL| / |f_GSL|): 4.0617918857203532e-16
const testcase_ellint_1<double>
data006[10] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.17467414669441528, -0.40000000000000002, 0.17453292519943295 },
  { 0.35018222772483443, -0.40000000000000002, 0.34906585039886590 },
  { 0.52729015917508737, -0.40000000000000002, 0.52359877559829882 },
  { 0.70662374407341244, -0.40000000000000002, 0.69813170079773179 },
  { 0.88859210497602170, -0.40000000000000002, 0.87266462599716477 },
  { 1.0733136290471379, -0.40000000000000002, 1.0471975511965976 },
  { 1.2605612170157061, -0.40000000000000002, 1.2217304763960306 },
  { 1.4497513956433439, -0.40000000000000002, 1.3962634015954636 },
  { 1.6399998658645112, -0.40000000000000002, 1.5707963267948966 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16
const testcase_ellint_1<double>
data007[10] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.17461228653000099, -0.30000000000000004, 0.17453292519943295 },
  { 0.34969146102798415, -0.30000000000000004, 0.34906585039886590 },
  { 0.52565822873726320, -0.30000000000000004, 0.52359877559829882 },
  { 0.70284226512408532, -0.30000000000000004, 0.69813170079773179 },
  { 0.88144139195111182, -0.30000000000000004, 0.87266462599716477 },
  { 1.0614897067260520, -0.30000000000000004, 1.0471975511965976 },
  { 1.2428416824174218, -0.30000000000000004, 1.2217304763960306 },
  { 1.4251795877015927, -0.30000000000000004, 1.3962634015954636 },
  { 1.6080486199305128, -0.30000000000000004, 1.5707963267948966 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16
const testcase_ellint_1<double>
data008[10] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.17456817290292809, -0.19999999999999996, 0.17453292519943295 },
  { 0.34934315932086801, -0.19999999999999996, 0.34906585039886590 },
  { 0.52450880529443988, -0.19999999999999996, 0.52359877559829882 },
  { 0.70020491009844876, -0.19999999999999996, 0.69813170079773179 },
  { 0.87651006649967955, -0.19999999999999996, 0.87266462599716477 },
  { 1.0534305870298994, -0.19999999999999996, 1.0471975511965976 },
  { 1.2308975521670784, -0.19999999999999996, 1.2217304763960306 },
  { 1.4087733584990738, -0.19999999999999996, 1.3962634015954636 },
  { 1.5868678474541660, -0.19999999999999996, 1.5707963267948966 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16
const testcase_ellint_1<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.17454173353063659, -0.099999999999999978, 0.17453292519943295 },
  { 0.34913506721468091, -0.099999999999999978, 0.34906585039886590 },
  { 0.52382550016538942, -0.099999999999999978, 0.52359877559829882 },
  { 0.69864700854177020, -0.099999999999999978, 0.69813170079773179 },
  { 0.87361792586964870, -0.099999999999999978, 0.87266462599716477 },
  { 1.0487386319621683, -0.099999999999999978, 1.0471975511965976 },
  { 1.2239913752078757, -0.099999999999999978, 1.2217304763960306 },
  { 1.3993423113684049, -0.099999999999999978, 1.3962634015954636 },
  { 1.5747455615173562, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for k=0.0000000000000000.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 2.1203697876423452e-16
const testcase_ellint_1<double>
data010[10] =
{
  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },
  { 0.17453292519943292, 0.0000000000000000, 0.17453292519943295 },
  { 0.34906585039886584, 0.0000000000000000, 0.34906585039886590 },
  { 0.52359877559829870, 0.0000000000000000, 0.52359877559829882 },
  { 0.69813170079773168, 0.0000000000000000, 0.69813170079773179 },
  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477 },
  { 1.0471975511965974, 0.0000000000000000, 1.0471975511965976 },
  { 1.2217304763960304, 0.0000000000000000, 1.2217304763960306 },
  { 1.3962634015954631, 0.0000000000000000, 1.3962634015954636 },
  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16
const testcase_ellint_1<double>
data011[10] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.17454173353063659, 0.10000000000000009, 0.17453292519943295 },
  { 0.34913506721468091, 0.10000000000000009, 0.34906585039886590 },
  { 0.52382550016538942, 0.10000000000000009, 0.52359877559829882 },
  { 0.69864700854177020, 0.10000000000000009, 0.69813170079773179 },
  { 0.87361792586964870, 0.10000000000000009, 0.87266462599716477 },
  { 1.0487386319621683, 0.10000000000000009, 1.0471975511965976 },
  { 1.2239913752078757, 0.10000000000000009, 1.2217304763960306 },
  { 1.3993423113684049, 0.10000000000000009, 1.3962634015954636 },
  { 1.5747455615173562, 0.10000000000000009, 1.5707963267948966 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16
const testcase_ellint_1<double>
data012[10] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.17456817290292809, 0.19999999999999996, 0.17453292519943295 },
  { 0.34934315932086801, 0.19999999999999996, 0.34906585039886590 },
  { 0.52450880529443988, 0.19999999999999996, 0.52359877559829882 },
  { 0.70020491009844876, 0.19999999999999996, 0.69813170079773179 },
  { 0.87651006649967955, 0.19999999999999996, 0.87266462599716477 },
  { 1.0534305870298994, 0.19999999999999996, 1.0471975511965976 },
  { 1.2308975521670784, 0.19999999999999996, 1.2217304763960306 },
  { 1.4087733584990738, 0.19999999999999996, 1.3962634015954636 },
  { 1.5868678474541660, 0.19999999999999996, 1.5707963267948966 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16
const testcase_ellint_1<double>
data013[10] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.17461228653000099, 0.30000000000000004, 0.17453292519943295 },
  { 0.34969146102798415, 0.30000000000000004, 0.34906585039886590 },
  { 0.52565822873726320, 0.30000000000000004, 0.52359877559829882 },
  { 0.70284226512408532, 0.30000000000000004, 0.69813170079773179 },
  { 0.88144139195111182, 0.30000000000000004, 0.87266462599716477 },
  { 1.0614897067260520, 0.30000000000000004, 1.0471975511965976 },
  { 1.2428416824174218, 0.30000000000000004, 1.2217304763960306 },
  { 1.4251795877015927, 0.30000000000000004, 1.3962634015954636 },
  { 1.6080486199305128, 0.30000000000000004, 1.5707963267948966 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 5.4157225142938039e-16
const testcase_ellint_1<double>
data014[10] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.17467414669441528, 0.39999999999999991, 0.17453292519943295 },
  { 0.35018222772483443, 0.39999999999999991, 0.34906585039886590 },
  { 0.52729015917508737, 0.39999999999999991, 0.52359877559829882 },
  { 0.70662374407341244, 0.39999999999999991, 0.69813170079773179 },
  { 0.88859210497602170, 0.39999999999999991, 0.87266462599716477 },
  { 1.0733136290471379, 0.39999999999999991, 1.0471975511965976 },
  { 1.2605612170157061, 0.39999999999999991, 1.2217304763960306 },
  { 1.4497513956433439, 0.39999999999999991, 1.3962634015954636 },
  { 1.6399998658645112, 0.39999999999999991, 1.5707963267948966 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16
const testcase_ellint_1<double>
data015[10] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.17475385514035785, 0.50000000000000000, 0.17453292519943295 },
  { 0.35081868470101585, 0.50000000000000000, 0.34906585039886590 },
  { 0.52942862705190574, 0.50000000000000000, 0.52359877559829882 },
  { 0.71164727562630314, 0.50000000000000000, 0.69813170079773179 },
  { 0.89824523594227768, 0.50000000000000000, 0.87266462599716477 },
  { 1.0895506700518851, 0.50000000000000000, 1.0471975511965976 },
  { 1.2853005857432931, 0.50000000000000000, 1.2217304763960306 },
  { 1.4845545520549484, 0.50000000000000000, 1.3962634015954636 },
  { 1.6857503548125963, 0.50000000000000000, 1.5707963267948966 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16
const testcase_ellint_1<double>
data016[10] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.17485154362988359, 0.60000000000000009, 0.17453292519943295 },
  { 0.35160509865544326, 0.60000000000000009, 0.34906585039886590 },
  { 0.53210652578446138, 0.60000000000000009, 0.52359877559829882 },
  { 0.71805304664485659, 0.60000000000000009, 0.69813170079773179 },
  { 0.91082759030195970, 0.60000000000000009, 0.87266462599716477 },
  { 1.1112333229323361, 0.60000000000000009, 1.0471975511965976 },
  { 1.3191461190365270, 0.60000000000000009, 1.2217304763960306 },
  { 1.5332022105084775, 0.60000000000000009, 1.3962634015954636 },
  { 1.7507538029157526, 0.60000000000000009, 1.5707963267948966 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 3.3306690738754696e-16
// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16
const testcase_ellint_1<double>
data017[10] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.17496737466916723, 0.69999999999999996, 0.17453292519943295 },
  { 0.35254687535677925, 0.69999999999999996, 0.34906585039886590 },
  { 0.53536740275997119, 0.69999999999999996, 0.52359877559829882 },
  { 0.72603797651684454, 0.69999999999999996, 0.69813170079773179 },
  { 0.92698296348313458, 0.69999999999999996, 0.87266462599716477 },
  { 1.1400447527693316, 0.69999999999999996, 1.0471975511965976 },
  { 1.3657668117194073, 0.69999999999999996, 1.2217304763960306 },
  { 1.6024686895959159, 0.69999999999999996, 1.3962634015954636 },
  { 1.8456939983747236, 0.69999999999999996, 1.5707963267948966 },
};
const double toler017 = 2.5000000000000020e-13;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16
const testcase_ellint_1<double>
data018[10] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.17510154241338899, 0.80000000000000004, 0.17453292519943295 },
  { 0.35365068839779390, 0.80000000000000004, 0.34906585039886590 },
  { 0.53926804409084550, 0.80000000000000004, 0.52359877559829882 },
  { 0.73587926028070361, 0.80000000000000004, 0.69813170079773179 },
  { 0.94770942970071170, 0.80000000000000004, 0.87266462599716477 },
  { 1.1789022995388236, 0.80000000000000004, 1.0471975511965976 },
  { 1.4323027881876009, 0.80000000000000004, 1.2217304763960306 },
  { 1.7069629739121674, 0.80000000000000004, 1.3962634015954636 },
  { 1.9953027776647296, 0.80000000000000004, 1.5707963267948966 },
};
const double toler018 = 2.5000000000000020e-13;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 3.8945813740035884e-16
const testcase_ellint_1<double>
data019[10] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.17525427376115024, 0.89999999999999991, 0.17453292519943295 },
  { 0.35492464591297446, 0.89999999999999991, 0.34906585039886590 },
  { 0.54388221416157112, 0.89999999999999991, 0.52359877559829882 },
  { 0.74797400423532490, 0.89999999999999991, 0.69813170079773179 },
  { 0.97463898451966458, 0.89999999999999991, 0.87266462599716477 },
  { 1.2334463254523440, 0.89999999999999991, 1.0471975511965976 },
  { 1.5355247765594910, 0.89999999999999991, 1.2217304763960306 },
  { 1.8882928567775117, 0.89999999999999991, 1.3962634015954636 },
  { 2.2805491384227703, 0.89999999999999991, 1.5707963267948966 },
};
const double toler019 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_ellint_1<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = std::ellint_1(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  return 0;
}
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  heuman_lambda
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 4.5519144009631418e-15
// max(|f - f_GSL| / |f_GSL|): 5.0108632207628440e-15
const testcase_heuman_lambda<double>
data001[9] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.12982697580745808, -0.90000000000000002, 0.17453292519943295 },
  { 0.25752498383895317, -0.90000000000000002, 0.34906585039886590 },
  { 0.38116720359439771, -0.90000000000000002, 0.52359877559829882 },
  { 0.49922731621729377, -0.90000000000000002, 0.69813170079773179 },
  { 0.61076532928819771, -0.90000000000000002, 0.87266462599716477 },
  { 0.71558223929052334, -0.90000000000000002, 1.0471975511965976 },
  { 0.81431191434980899, -0.90000000000000002, 1.2217304763960306 },
  { 0.90840923019051545, -0.90000000000000002, 1.3962634015954636 },
};
const double toler001 = 5.0000000000000039e-13;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 2.6468222272894167e-16
const testcase_heuman_lambda<double>
data002[9] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.14126742816292986, -0.80000000000000004, 0.17453292519943295 },
  { 0.27928713607126193, -0.80000000000000004, 0.34906585039886590 },
  { 0.41105302042041136, -0.80000000000000004, 0.52359877559829882 },
  { 0.53405685578205797, -0.80000000000000004, 0.69813170079773179 },
  { 0.64656998728035819, -0.80000000000000004, 0.87266462599716477 },
  { 0.74794690182714274, -0.80000000000000004, 1.0471975511965976 },
  { 0.83891015662364632, -0.80000000000000004, 1.2217304763960306 },
  { 0.92171087660102025, -0.80000000000000004, 1.3962634015954636 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 2.3314683517128287e-15
// max(|f - f_GSL| / |f_GSL|): 2.4986914608470095e-15
const testcase_heuman_lambda<double>
data003[9] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.14995891526474947, -0.69999999999999996, 0.17453292519943295 },
  { 0.29594267142594466, -0.69999999999999996, 0.34906585039886590 },
  { 0.43420836208514768, -0.69999999999999996, 0.52359877559829882 },
  { 0.56150272604917162, -0.69999999999999996, 0.69813170079773179 },
  { 0.67537565506518926, -0.69999999999999996, 0.87266462599716477 },
  { 0.77458446996088093, -0.69999999999999996, 1.0471975511965976 },
  { 0.85959635233652065, -0.69999999999999996, 1.2217304763960306 },
  { 0.93307572713379527, -0.69999999999999996, 1.3962634015954636 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 9.4155496136245940e-16
const testcase_heuman_lambda<double>
data004[9] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.15681433121910107, -0.59999999999999998, 0.17453292519943295 },
  { 0.30916651305959242, -0.59999999999999998, 0.34906585039886590 },
  { 0.45280289551350805, -0.59999999999999998, 0.52359877559829882 },
  { 0.58391106083307376, -0.59999999999999998, 0.69813170079773179 },
  { 0.69941589446161700, -0.59999999999999998, 0.87266462599716477 },
  { 0.79740965737703906, -0.59999999999999998, 1.0471975511965976 },
  { 0.87781712551231406, -0.59999999999999998, 1.2217304763960306 },
  { 0.94331022207657789, -0.59999999999999998, 1.3962634015954636 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.9669123877958787e-16
const testcase_heuman_lambda<double>
data005[9] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.16224731278788521, -0.50000000000000000, 0.17453292519943295 },
  { 0.31970697450541935, -0.50000000000000000, 0.34906585039886590 },
  { 0.46777719771323173, -0.50000000000000000, 0.52359877559829882 },
  { 0.60224413068989857, -0.50000000000000000, 0.69813170079773179 },
  { 0.71953336405253487, -0.50000000000000000, 0.87266462599716477 },
  { 0.81709279141177393, -0.50000000000000000, 1.0471975511965976 },
  { 0.89409511418245902, -0.50000000000000000, 1.2217304763960306 },
  { 0.95275069129312706, -0.50000000000000000, 1.3962634015954636 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 9.9920072216264089e-16
// max(|f - f_GSL| / |f_GSL|): 1.0391671569585280e-15
const testcase_heuman_lambda<double>
data006[9] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.16648761753143587, -0.40000000000000002, 0.17453292519943295 },
  { 0.32797372506471695, -0.40000000000000002, 0.34906585039886590 },
  { 0.47962710106777490, -0.40000000000000002, 0.52359877559829882 },
  { 0.61696383438197122, -0.40000000000000002, 0.69813170079773179 },
  { 0.73605040181836656, -0.40000000000000002, 0.87266462599716477 },
  { 0.83379631920891617, -0.40000000000000002, 1.0471975511965976 },
  { 0.90854324658368646, -0.40000000000000002, 1.2217304763960306 },
  { 0.96153993654604863, -0.40000000000000002, 1.3962634015954636 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8319160169398432e-15
const testcase_heuman_lambda<double>
data007[9] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.16967535365409961, -0.30000000000000004, 0.17453292519943295 },
  { 0.33421304275802655, -0.30000000000000004, 0.34906585039886590 },
  { 0.48863774824317452, -0.30000000000000004, 0.52359877559829882 },
  { 0.62829853439172034, -0.30000000000000004, 0.69813170079773179 },
  { 0.74903637090112496, -0.30000000000000004, 0.87266462599716477 },
  { 0.84738791409536607, -0.30000000000000004, 1.0471975511965976 },
  { 0.92096562168315166, -0.30000000000000004, 1.2217304763960306 },
  { 0.96967154769878450, -0.30000000000000004, 1.3962634015954636 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8183393452528993e-15
const testcase_heuman_lambda<double>
data008[9] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.17189899540184925, -0.19999999999999996, 0.17453292519943295 },
  { 0.33857841822753937, -0.19999999999999996, 0.34906585039886590 },
  { 0.49497858604892686, -0.19999999999999996, 0.52359877559829882 },
  { 0.63635578869585696, -0.19999999999999996, 0.69813170079773179 },
  { 0.75843245554643557, -0.19999999999999996, 0.87266462599716477 },
  { 0.85754687135875229, -0.19999999999999996, 1.0471975511965976 },
  { 0.93084918973014774, -0.19999999999999996, 1.2217304763960306 },
  { 0.97691162215553884, -0.19999999999999996, 1.3962634015954636 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 1.6691782437222639e-08
// max(|f - f_GSL| / |f_GSL|): 9.0398653283132016e-16
const testcase_heuman_lambda<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.17321327365951394, -0.099999999999999978, 0.17453292519943295 },
  { 0.34116376673499382, -0.099999999999999978, 0.34906585039886590 },
  { 0.49874868897634334, -0.099999999999999978, 0.52359877559829882 },
  { 0.64118044075414027, -0.099999999999999978, 0.69813170079773179 },
  { 0.76413249518266968, -0.099999999999999978, 0.87266462599716477 },
  { 0.86387230276439919, -0.099999999999999978, 1.0471975511965976 },
  { 0.93738180823668094, -0.099999999999999978, 1.2217304763960306 },
  { 0.98251288868022923, -0.099999999999999978, 1.3962634015954636 },
  { -3.0654584456528391e-18, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for k=0.0000000000000000.
// max(|f - f_GSL|): 1.1102230246251565e-15
// max(|f - f_GSL| / |f_GSL|): 1.1273500043326667e-15
const testcase_heuman_lambda<double>
data010[10] =
{
  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },
  { 0.17364817766693033, 0.0000000000000000, 0.17453292519943295 },
  { 0.34202014332566871, 0.0000000000000000, 0.34906585039886590 },
  { 0.49999999999999994, 0.0000000000000000, 0.52359877559829882 },
  { 0.64278760968653925, 0.0000000000000000, 0.69813170079773179 },
  { 0.76604444311897801, 0.0000000000000000, 0.87266462599716477 },
  { 0.86602540378443860, 0.0000000000000000, 1.0471975511965976 },
  { 0.93969262078590832, 0.0000000000000000, 1.2217304763960306 },
  { 0.98480775301220802, 0.0000000000000000, 1.3962634015954636 },
  { nan, 0.0000000000000000, 1.5707963267948966 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 5.5511151231257827e-16
// max(|f - f_GSL| / |f_GSL|): 5.6499158301957510e-16
const testcase_heuman_lambda<double>
data011[10] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.17321327365951394, 0.10000000000000009, 0.17453292519943295 },
  { 0.34116376673499382, 0.10000000000000009, 0.34906585039886590 },
  { 0.49874868897634334, 0.10000000000000009, 0.52359877559829882 },
  { 0.64118044075414027, 0.10000000000000009, 0.69813170079773179 },
  { 0.76413249518266968, 0.10000000000000009, 0.87266462599716477 },
  { 0.86387230276439919, 0.10000000000000009, 1.0471975511965976 },
  { 0.93738180823668094, 0.10000000000000009, 1.2217304763960306 },
  { 0.98251288868022923, 0.10000000000000009, 1.3962634015954636 },
  { 6.9934954516088593e-07, 0.10000000000000009, 1.5707963267948966 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8183393452528993e-15
const testcase_heuman_lambda<double>
data012[9] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.17189899540184925, 0.19999999999999996, 0.17453292519943295 },
  { 0.33857841822753937, 0.19999999999999996, 0.34906585039886590 },
  { 0.49497858604892686, 0.19999999999999996, 0.52359877559829882 },
  { 0.63635578869585696, 0.19999999999999996, 0.69813170079773179 },
  { 0.75843245554643557, 0.19999999999999996, 0.87266462599716477 },
  { 0.85754687135875229, 0.19999999999999996, 1.0471975511965976 },
  { 0.93084918973014774, 0.19999999999999996, 1.2217304763960306 },
  { 0.97691162215553884, 0.19999999999999996, 1.3962634015954636 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8319160169398432e-15
const testcase_heuman_lambda<double>
data013[9] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.16967535365409961, 0.30000000000000004, 0.17453292519943295 },
  { 0.33421304275802655, 0.30000000000000004, 0.34906585039886590 },
  { 0.48863774824317452, 0.30000000000000004, 0.52359877559829882 },
  { 0.62829853439172034, 0.30000000000000004, 0.69813170079773179 },
  { 0.74903637090112496, 0.30000000000000004, 0.87266462599716477 },
  { 0.84738791409536607, 0.30000000000000004, 1.0471975511965976 },
  { 0.92096562168315166, 0.30000000000000004, 1.2217304763960306 },
  { 0.96967154769878450, 0.30000000000000004, 1.3962634015954636 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 6.6613381477509392e-16
// max(|f - f_GSL| / |f_GSL|): 6.9277810463901876e-16
const testcase_heuman_lambda<double>
data014[9] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.16648761753143587, 0.39999999999999991, 0.17453292519943295 },
  { 0.32797372506471695, 0.39999999999999991, 0.34906585039886590 },
  { 0.47962710106777490, 0.39999999999999991, 0.52359877559829882 },
  { 0.61696383438197122, 0.39999999999999991, 0.69813170079773179 },
  { 0.73605040181836656, 0.39999999999999991, 0.87266462599716477 },
  { 0.83379631920891617, 0.39999999999999991, 1.0471975511965976 },
  { 0.90854324658368646, 0.39999999999999991, 1.2217304763960306 },
  { 0.96153993654604863, 0.39999999999999991, 1.3962634015954636 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.9669123877958787e-16
const testcase_heuman_lambda<double>
data015[9] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.16224731278788521, 0.50000000000000000, 0.17453292519943295 },
  { 0.31970697450541935, 0.50000000000000000, 0.34906585039886590 },
  { 0.46777719771323173, 0.50000000000000000, 0.52359877559829882 },
  { 0.60224413068989857, 0.50000000000000000, 0.69813170079773179 },
  { 0.71953336405253487, 0.50000000000000000, 0.87266462599716477 },
  { 0.81709279141177393, 0.50000000000000000, 1.0471975511965976 },
  { 0.89409511418245902, 0.50000000000000000, 1.2217304763960306 },
  { 0.95275069129312706, 0.50000000000000000, 1.3962634015954636 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 7.7715611723760958e-16
// max(|f - f_GSL| / |f_GSL|): 8.2386059119215188e-16
const testcase_heuman_lambda<double>
data016[9] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.15681433121910107, 0.60000000000000009, 0.17453292519943295 },
  { 0.30916651305959236, 0.60000000000000009, 0.34906585039886590 },
  { 0.45280289551350805, 0.60000000000000009, 0.52359877559829882 },
  { 0.58391106083307376, 0.60000000000000009, 0.69813170079773179 },
  { 0.69941589446161700, 0.60000000000000009, 0.87266462599716477 },
  { 0.79740965737703895, 0.60000000000000009, 1.0471975511965976 },
  { 0.87781712551231406, 0.60000000000000009, 1.2217304763960306 },
  { 0.94331022207657789, 0.60000000000000009, 1.3962634015954636 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 2.3314683517128287e-15
// max(|f - f_GSL| / |f_GSL|): 2.4986914608470095e-15
const testcase_heuman_lambda<double>
data017[9] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.14995891526474947, 0.69999999999999996, 0.17453292519943295 },
  { 0.29594267142594466, 0.69999999999999996, 0.34906585039886590 },
  { 0.43420836208514768, 0.69999999999999996, 0.52359877559829882 },
  { 0.56150272604917162, 0.69999999999999996, 0.69813170079773179 },
  { 0.67537565506518926, 0.69999999999999996, 0.87266462599716477 },
  { 0.77458446996088093, 0.69999999999999996, 1.0471975511965976 },
  { 0.85959635233652065, 0.69999999999999996, 1.2217304763960306 },
  { 0.93307572713379527, 0.69999999999999996, 1.3962634015954636 },
};
const double toler017 = 2.5000000000000020e-13;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 2.6468222272894167e-16
const testcase_heuman_lambda<double>
data018[9] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.14126742816292986, 0.80000000000000004, 0.17453292519943295 },
  { 0.27928713607126193, 0.80000000000000004, 0.34906585039886590 },
  { 0.41105302042041136, 0.80000000000000004, 0.52359877559829882 },
  { 0.53405685578205797, 0.80000000000000004, 0.69813170079773179 },
  { 0.64656998728035819, 0.80000000000000004, 0.87266462599716477 },
  { 0.74794690182714274, 0.80000000000000004, 1.0471975511965976 },
  { 0.83891015662364632, 0.80000000000000004, 1.2217304763960306 },
  { 0.92171087660102025, 0.80000000000000004, 1.3962634015954636 },
};
const double toler018 = 2.5000000000000020e-13;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 5.3290705182007514e-15
// max(|f - f_GSL| / |f_GSL|): 5.8663764535760125e-15
const testcase_heuman_lambda<double>
data019[9] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.12982697580745811, 0.89999999999999991, 0.17453292519943295 },
  { 0.25752498383895323, 0.89999999999999991, 0.34906585039886590 },
  { 0.38116720359439776, 0.89999999999999991, 0.52359877559829882 },
  { 0.49922731621729383, 0.89999999999999991, 0.69813170079773179 },
  { 0.61076532928819782, 0.89999999999999991, 0.87266462599716477 },
  { 0.71558223929052334, 0.89999999999999991, 1.0471975511965976 },
  { 0.81431191434980899, 0.89999999999999991, 1.2217304763960306 },
  { 0.90840923019051545, 0.89999999999999991, 1.3962634015954636 },
};
const double toler019 = 5.0000000000000039e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_heuman_lambda<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = std::heuman_lambda(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  return 0;
}
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_d
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 0.34200953631463293
// max(|f - f_GSL| / |f_GSL|): 189.98062486515815
const testcase_ellint_d<double>
data001[10] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.0017745280240378219, -0.90000000000000002, 0.17453292519943295 },
  { 0.014253646966980111, -0.90000000000000002, 0.34906585039886590 },
  { 0.048443861188898651, -0.90000000000000002, 0.52359877559829882 },
  { 0.11601724174276445, -0.90000000000000002, 0.69813170079773179 },
  { 0.22974037076619516, -0.90000000000000002, 0.87266462599716477 },
  { 0.40369054220887640, -0.90000000000000002, 1.0471975511965976 },
  { 0.65186331684678844, -0.90000000000000002, 1.2217304763960306 },
  { 0.98059172649148818, -0.90000000000000002, 1.3962634015954636 },
  { 1.3689531921495752, -0.90000000000000002, 1.5707963267948966 },
};
const double toler001 = 0.050000000000000003;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 0.33981636403572707
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data002[10] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.0017717494813139778, -0.80000000000000004, 0.17453292519943295 },
  { 0.014162243950157404, -0.80000000000000004, 0.34906585039886590 },
  { 0.047716886790345484, -0.80000000000000004, 0.52359877559829882 },
  { 0.11274858576397100, -0.80000000000000004, 0.69813170079773179 },
  { 0.21891560249849629, -0.80000000000000004, 0.87266462599716477 },
  { 0.37413671220917655, -0.80000000000000004, 1.0471975511965976 },
  { 0.58211790179390199, -0.80000000000000004, 1.2217304763960306 },
  { 0.83791373072958042, -0.80000000000000004, 1.3962634015954636 },
  { 1.1233638038981608, -0.80000000000000004, 1.5707963267948966 },
};
const double toler002 = 0.050000000000000003;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 0.33792250840586957
// max(|f - f_GSL| / |f_GSL|): 189.98062486515823
const testcase_ellint_d<double>
data003[10] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.0017693106982486103, -0.69999999999999996, 0.17453292519943295 },
  { 0.014083315304350336, -0.69999999999999996, 0.34906585039886590 },
  { 0.047107032299642318, -0.69999999999999996, 0.52359877559829882 },
  { 0.11012537863030469, -0.69999999999999996, 0.69813170079773179 },
  { 0.21076252483177441, -0.69999999999999996, 0.87266462599716477 },
  { 0.35371759117306861, -0.69999999999999996, 1.0471975511965976 },
  { 0.53889336168256530, -0.69999999999999996, 1.2217304763960306 },
  { 0.75928710176862158, -0.69999999999999996, 1.3962634015954636 },
  { 1.0000670669444245, -0.69999999999999996, 1.5707963267948966 },
};
const double toler003 = 0.050000000000000003;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 0.33631136074986034
// max(|f - f_GSL| / |f_GSL|): 189.98062486515821
const testcase_ellint_d<double>
data004[10] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.0017672067608119602, -0.59999999999999998, 0.17453292519943295 },
  { 0.014016168843617425, -0.59999999999999998, 0.34906585039886590 },
  { 0.046600501111499895, -0.59999999999999998, 0.52359877559829882 },
  { 0.10802094630646218, -0.59999999999999998, 0.69813170079773179 },
  { 0.20451502360683604, -0.59999999999999998, 0.87266462599716477 },
  { 0.33892147050821841, -0.59999999999999998, 1.0471975511965976 },
  { 0.50943964442941936, -0.59999999999999998, 1.2217304763960306 },
  { 0.70872353673353261, -0.59999999999999998, 1.3962634015954636 },
  { 0.92408446796396737, -0.59999999999999998, 1.5707963267948966 },
};
const double toler004 = 0.050000000000000003;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 0.33539815355954233
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data005[10] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.0017654334687950237, -0.50000000000000000, 0.17453292519943295 },
  { 0.013960237293231186, -0.50000000000000000, 0.34906585039886590 },
  { 0.046186768767871089, -0.50000000000000000, 0.52359877559829882 },
  { 0.10634818433863136, -0.50000000000000000, 0.69813170079773179 },
  { 0.19971443163522265, -0.50000000000000000, 0.87266462599716477 },
  { 0.32798045962965344, -0.50000000000000000, 1.0471975511965976 },
  { 0.48849490325825223, -0.50000000000000000, 1.2217304763960306 },
  { 0.67398458871077627, -0.50000000000000000, 1.3962634015954636 },
  { 0.87315258189267553, -0.50000000000000000, 1.5707963267948966 },
};
const double toler005 = 0.050000000000000003;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 0.33512341141111940
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data006[10] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.0017639873100163696, -0.40000000000000002, 0.17453292519943295 },
  { 0.013915062836514525, -0.40000000000000002, 0.34906585039886590 },
  { 0.045857827106517292, -0.40000000000000002, 0.52359877559829882 },
  { 0.10504599643185691, -0.40000000000000002, 0.69813170079773179 },
  { 0.19607010235413286, -0.40000000000000002, 0.87266462599716477 },
  { 0.31989685162149178, -0.40000000000000002, 1.0471975511965976 },
  { 0.47342134396168084, -0.40000000000000002, 1.2217304763960306 },
  { 0.64953418120744111, -0.40000000000000002, 1.3962634015954636 },
  { 0.83786408440294280, -0.40000000000000002, 1.5707963267948966 },
};
const double toler006 = 0.050000000000000003;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 0.33491027765834835
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data007[10] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.0017628654390207229, -0.30000000000000004, 0.17453292519943295 },
  { 0.013880285231661113, -0.30000000000000004, 0.34906585039886590 },
  { 0.045607666257172663, -0.30000000000000004, 0.52359877559829882 },
  { 0.10407134378207215, -0.30000000000000004, 0.69813170079773179 },
  { 0.19339214076372369, -0.30000000000000004, 0.87266462599716477 },
  { 0.31406950355012508, -0.30000000000000004, 1.0471975511965976 },
  { 0.46274849122810607, -0.30000000000000004, 1.2217304763960306 },
  { 0.63247751480700520, -0.30000000000000004, 1.3962634015954636 },
  { 0.81350172230293061, -0.30000000000000004, 1.5707963267948966 },
};
const double toler007 = 0.050000000000000003;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 0.33475833514012865
// max(|f - f_GSL| / |f_GSL|): 189.98062486515821
const testcase_ellint_d<double>
data008[10] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.0017620656599994277, -0.19999999999999996, 0.17453292519943295 },
  { 0.013855632831176549, -0.19999999999999996, 0.34906585039886590 },
  { 0.045431918346643223, -0.19999999999999996, 0.52359877559829882 },
  { 0.10339441242182820, -0.19999999999999996, 0.69813170079773179 },
  { 0.19155606877615042, -0.19999999999999996, 0.87266462599716477 },
  { 0.31012625152356554, -0.19999999999999996, 1.0471975511965976 },
  { 0.45561282509856105, -0.19999999999999996, 1.2217304763960306 },
  { 0.62118511166396639, -0.19999999999999996, 1.3962634015954636 },
  { 0.79748253029092375, -0.19999999999999996, 1.5707963267948966 },
};
const double toler008 = 0.050000000000000003;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 0.33466728763238929
// max(|f - f_GSL| / |f_GSL|): 189.98062486515815
const testcase_ellint_d<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.0017615864137194245, -0.099999999999999978, 0.17453292519943295 },
  { 0.013840916025686940, -0.099999999999999978, 0.34906585039886590 },
  { 0.045327616030165399, -0.099999999999999978, 0.52359877559829882 },
  { 0.10299563689215169, -0.099999999999999978, 0.69813170079773179 },
  { 0.19048331395737586, -0.099999999999999978, 0.87266462599716477 },
  { 0.30784122565357930, -0.099999999999999978, 1.0471975511965976 },
  { 0.45150852806732078, -0.099999999999999978, 1.2217304763960306 },
  { 0.61472883791304578, -0.099999999999999978, 1.3962634015954636 },
  { 0.78836194956876604, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 0.050000000000000003;

// Test data for k=0.0000000000000000.
// max(|f - f_GSL|): 0.33463695809571631
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data010[10] =
{
  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },
  { 0.0017614267682992952, 0.0000000000000000, 0.17453292519943295 },
  { 0.013836022777798124, 0.0000000000000000, 0.34906585039886590 },
  { 0.045293036853039759, 0.0000000000000000, 0.52359877559829882 },
  { 0.10286391214581389, 0.0000000000000000, 0.69813170079773179 },
  { 0.19013037474553038, 0.0000000000000000, 0.87266462599716477 },
  { 0.30709242465218911, 0.0000000000000000, 1.0471975511965976 },
  { 0.45016833577638043, 0.0000000000000000, 1.2217304763960306 },
  { 0.61262666496631457, 0.0000000000000000, 1.3962634015954636 },
  { 0.78539816339744828, 0.0000000000000000, 1.5707963267948966 },
};
const double toler010 = 0.050000000000000003;

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 0.33466728763238929
// max(|f - f_GSL| / |f_GSL|): 189.98062486515815
const testcase_ellint_d<double>
data011[10] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.0017615864137194245, 0.10000000000000009, 0.17453292519943295 },
  { 0.013840916025686940, 0.10000000000000009, 0.34906585039886590 },
  { 0.045327616030165399, 0.10000000000000009, 0.52359877559829882 },
  { 0.10299563689215169, 0.10000000000000009, 0.69813170079773179 },
  { 0.19048331395737586, 0.10000000000000009, 0.87266462599716477 },
  { 0.30784122565357930, 0.10000000000000009, 1.0471975511965976 },
  { 0.45150852806732078, 0.10000000000000009, 1.2217304763960306 },
  { 0.61472883791304578, 0.10000000000000009, 1.3962634015954636 },
  { 0.78836194956876604, 0.10000000000000009, 1.5707963267948966 },
};
const double toler011 = 0.050000000000000003;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 0.33475833514012865
// max(|f - f_GSL| / |f_GSL|): 189.98062486515821
const testcase_ellint_d<double>
data012[10] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.0017620656599994277, 0.19999999999999996, 0.17453292519943295 },
  { 0.013855632831176549, 0.19999999999999996, 0.34906585039886590 },
  { 0.045431918346643223, 0.19999999999999996, 0.52359877559829882 },
  { 0.10339441242182820, 0.19999999999999996, 0.69813170079773179 },
  { 0.19155606877615042, 0.19999999999999996, 0.87266462599716477 },
  { 0.31012625152356554, 0.19999999999999996, 1.0471975511965976 },
  { 0.45561282509856105, 0.19999999999999996, 1.2217304763960306 },
  { 0.62118511166396639, 0.19999999999999996, 1.3962634015954636 },
  { 0.79748253029092375, 0.19999999999999996, 1.5707963267948966 },
};
const double toler012 = 0.050000000000000003;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 0.33491027765834835
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data013[10] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.0017628654390207229, 0.30000000000000004, 0.17453292519943295 },
  { 0.013880285231661113, 0.30000000000000004, 0.34906585039886590 },
  { 0.045607666257172663, 0.30000000000000004, 0.52359877559829882 },
  { 0.10407134378207215, 0.30000000000000004, 0.69813170079773179 },
  { 0.19339214076372369, 0.30000000000000004, 0.87266462599716477 },
  { 0.31406950355012508, 0.30000000000000004, 1.0471975511965976 },
  { 0.46274849122810607, 0.30000000000000004, 1.2217304763960306 },
  { 0.63247751480700520, 0.30000000000000004, 1.3962634015954636 },
  { 0.81350172230293061, 0.30000000000000004, 1.5707963267948966 },
};
const double toler013 = 0.050000000000000003;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 0.33512341141111940
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data014[10] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.0017639873100163696, 0.39999999999999991, 0.17453292519943295 },
  { 0.013915062836514525, 0.39999999999999991, 0.34906585039886590 },
  { 0.045857827106517292, 0.39999999999999991, 0.52359877559829882 },
  { 0.10504599643185691, 0.39999999999999991, 0.69813170079773179 },
  { 0.19607010235413286, 0.39999999999999991, 0.87266462599716477 },
  { 0.31989685162149178, 0.39999999999999991, 1.0471975511965976 },
  { 0.47342134396168084, 0.39999999999999991, 1.2217304763960306 },
  { 0.64953418120744111, 0.39999999999999991, 1.3962634015954636 },
  { 0.83786408440294280, 0.39999999999999991, 1.5707963267948966 },
};
const double toler014 = 0.050000000000000003;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 0.33539815355954233
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data015[10] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.0017654334687950237, 0.50000000000000000, 0.17453292519943295 },
  { 0.013960237293231186, 0.50000000000000000, 0.34906585039886590 },
  { 0.046186768767871089, 0.50000000000000000, 0.52359877559829882 },
  { 0.10634818433863136, 0.50000000000000000, 0.69813170079773179 },
  { 0.19971443163522265, 0.50000000000000000, 0.87266462599716477 },
  { 0.32798045962965344, 0.50000000000000000, 1.0471975511965976 },
  { 0.48849490325825223, 0.50000000000000000, 1.2217304763960306 },
  { 0.67398458871077627, 0.50000000000000000, 1.3962634015954636 },
  { 0.87315258189267553, 0.50000000000000000, 1.5707963267948966 },
};
const double toler015 = 0.050000000000000003;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 0.33631136074986034
// max(|f - f_GSL| / |f_GSL|): 189.98062486515821
const testcase_ellint_d<double>
data016[10] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.0017672067608119602, 0.60000000000000009, 0.17453292519943295 },
  { 0.014016168843617425, 0.60000000000000009, 0.34906585039886590 },
  { 0.046600501111499895, 0.60000000000000009, 0.52359877559829882 },
  { 0.10802094630646218, 0.60000000000000009, 0.69813170079773179 },
  { 0.20451502360683607, 0.60000000000000009, 0.87266462599716477 },
  { 0.33892147050821841, 0.60000000000000009, 1.0471975511965976 },
  { 0.50943964442941936, 0.60000000000000009, 1.2217304763960306 },
  { 0.70872353673353272, 0.60000000000000009, 1.3962634015954636 },
  { 0.92408446796396748, 0.60000000000000009, 1.5707963267948966 },
};
const double toler016 = 0.050000000000000003;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 0.33792250840586957
// max(|f - f_GSL| / |f_GSL|): 189.98062486515823
const testcase_ellint_d<double>
data017[10] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.0017693106982486103, 0.69999999999999996, 0.17453292519943295 },
  { 0.014083315304350336, 0.69999999999999996, 0.34906585039886590 },
  { 0.047107032299642318, 0.69999999999999996, 0.52359877559829882 },
  { 0.11012537863030469, 0.69999999999999996, 0.69813170079773179 },
  { 0.21076252483177441, 0.69999999999999996, 0.87266462599716477 },
  { 0.35371759117306861, 0.69999999999999996, 1.0471975511965976 },
  { 0.53889336168256530, 0.69999999999999996, 1.2217304763960306 },
  { 0.75928710176862158, 0.69999999999999996, 1.3962634015954636 },
  { 1.0000670669444245, 0.69999999999999996, 1.5707963267948966 },
};
const double toler017 = 0.050000000000000003;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 0.33981636403572707
// max(|f - f_GSL| / |f_GSL|): 189.98062486515818
const testcase_ellint_d<double>
data018[10] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.0017717494813139778, 0.80000000000000004, 0.17453292519943295 },
  { 0.014162243950157404, 0.80000000000000004, 0.34906585039886590 },
  { 0.047716886790345484, 0.80000000000000004, 0.52359877559829882 },
  { 0.11274858576397100, 0.80000000000000004, 0.69813170079773179 },
  { 0.21891560249849629, 0.80000000000000004, 0.87266462599716477 },
  { 0.37413671220917655, 0.80000000000000004, 1.0471975511965976 },
  { 0.58211790179390199, 0.80000000000000004, 1.2217304763960306 },
  { 0.83791373072958042, 0.80000000000000004, 1.3962634015954636 },
  { 1.1233638038981608, 0.80000000000000004, 1.5707963267948966 },
};
const double toler018 = 0.050000000000000003;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 0.34200953631463293
// max(|f - f_GSL| / |f_GSL|): 189.98062486515815
const testcase_ellint_d<double>
data019[10] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.0017745280240378219, 0.89999999999999991, 0.17453292519943295 },
  { 0.014253646966980111, 0.89999999999999991, 0.34906585039886590 },
  { 0.048443861188898651, 0.89999999999999991, 0.52359877559829882 },
  { 0.11601724174276445, 0.89999999999999991, 0.69813170079773179 },
  { 0.22974037076619516, 0.89999999999999991, 0.87266462599716477 },
  { 0.40369054220887640, 0.89999999999999991, 1.0471975511965976 },
  { 0.65186331684678833, 0.89999999999999991, 1.2217304763960306 },
  { 0.98059172649148796, 0.89999999999999991, 1.3962634015954636 },
  { 1.3689531921495750, 0.89999999999999991, 1.5707963267948966 },
};
const double toler019 = 0.050000000000000003;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_ellint_d<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = std::ellint_d(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  return 0;
}
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  jacobi_zeta
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 1.1102230246251565e-16
// max(|f - f_GSL| / |f_GSL|): 4.0706454465558064e-16
const testcase_jacobi_zeta<double>
data001[10] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.083775032990995146, -0.90000000000000002, 0.17453292519943295 },
  { 0.16102654944281714, -0.90000000000000002, 0.34906585039886590 },
  { 0.22520771339110821, -0.90000000000000002, 0.52359877559829882 },
  { 0.26970709706399598, -0.90000000000000002, 0.69813170079773179 },
  { 0.28780075550145756, -0.90000000000000002, 0.87266462599716477 },
  { 0.27273881727147764, -0.90000000000000002, 1.0471975511965976 },
  { 0.21859591573936119, -0.90000000000000002, 1.2217304763960306 },
  { 0.12384933874685365, -0.90000000000000002, 1.3962634015954636 },
  { 4.5483306117664390e-17, -0.90000000000000002, 1.5707963267948966 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 3.3895448572450267e-16
const testcase_jacobi_zeta<double>
data002[10] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.061959136509558754, -0.80000000000000004, 0.17453292519943295 },
  { 0.11836452596851255, -0.80000000000000004, 0.34906585039886590 },
  { 0.16377169670023631, -0.80000000000000004, 0.52359877559829882 },
  { 0.19299488873051299, -0.80000000000000004, 0.69813170079773179 },
  { 0.20137521133401626, -0.80000000000000004, 0.87266462599716477 },
  { 0.18533773444470997, -0.80000000000000004, 1.0471975511965976 },
  { 0.14353571505361065, -0.80000000000000004, 1.2217304763960306 },
  { 0.078792677400195354, -0.80000000000000004, 1.3962634015954636 },
  { 2.8542161727115589e-17, -0.80000000000000004, 1.5707963267948966 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 2.1455915857898406e-16
const testcase_jacobi_zeta<double>
data003[10] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.045586980600884716, -0.69999999999999996, 0.17453292519943295 },
  { 0.086700582210421137, -0.69999999999999996, 0.34906585039886590 },
  { 0.11905792048350007, -0.69999999999999996, 0.52359877559829882 },
  { 0.13880208239414996, -0.69999999999999996, 0.69813170079773179 },
  { 0.14284089523327179, -0.69999999999999996, 0.87266462599716477 },
  { 0.12936094548213592, -0.69999999999999996, 1.0471975511965976 },
  { 0.098554159872393729, -0.69999999999999996, 1.2217304763960306 },
  { 0.053405717675964463, -0.69999999999999996, 1.3962634015954636 },
  { 1.9249123278055039e-17, -0.69999999999999996, 1.5707963267948966 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 4.1633363423443370e-17
// max(|f - f_GSL| / |f_GSL|): 4.4937670030222614e-16
const testcase_jacobi_zeta<double>
data004[10] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.032588313971326832, -0.59999999999999998, 0.17453292519943295 },
  { 0.061764607726573349, -0.59999999999999998, 0.34906585039886590 },
  { 0.084332322112252542, -0.59999999999999998, 0.52359877559829882 },
  { 0.097553688205206934, -0.59999999999999998, 0.69813170079773179 },
  { 0.099445977097936830, -0.59999999999999998, 0.87266462599716477 },
  { 0.089139857337234493, -0.59999999999999998, 1.0471975511965976 },
  { 0.067259974479995682, -0.59999999999999998, 1.2217304763960306 },
  { 0.036191754518603063, -0.59999999999999998, 1.3962634015954636 },
  { 1.3010683712129310e-17, -0.59999999999999998, 1.5707963267948966 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 4.6979541059860659e-16
const testcase_jacobi_zeta<double>
data005[10] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.022187552754766429, -0.50000000000000000, 0.17453292519943295 },
  { 0.041937521256519172, -0.50000000000000000, 0.34906585039886590 },
  { 0.057009125002218206, -0.50000000000000000, 0.52359877559829882 },
  { 0.065564299803546541, -0.50000000000000000, 0.69813170079773179 },
  { 0.066385344613391212, -0.50000000000000000, 0.87266462599716477 },
  { 0.059091015957506245, -0.50000000000000000, 1.0471975511965976 },
  { 0.044310100188499860, -0.50000000000000000, 1.2217304763960306 },
  { 0.023739114168492250, -0.50000000000000000, 1.3962634015954636 },
  { 8.5206475417261149e-18, -0.50000000000000000, 1.5707963267948966 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 2.0816681711721685e-17
// max(|f - f_GSL| / |f_GSL|): 5.0829329239944491e-16
const testcase_jacobi_zeta<double>
data006[10] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.013996123587392542, -0.40000000000000002, 0.17453292519943295 },
  { 0.026398481224639374, -0.40000000000000002, 0.34906585039886590 },
  { 0.035764944986518804, -0.40000000000000002, 0.52359877559829882 },
  { 0.040954075182567606, -0.40000000000000002, 0.69813170079773179 },
  { 0.041264829607496313, -0.40000000000000002, 0.87266462599716477 },
  { 0.036552212485120465, -0.40000000000000002, 1.0471975511965976 },
  { 0.027294444118671324, -0.40000000000000002, 1.2217304763960306 },
  { 0.014581333452897033, -0.40000000000000002, 1.3962634015954636 },
  { 5.2283574650201239e-18, -0.40000000000000002, 1.5707963267948966 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 1.0408340855860843e-17
// max(|f - f_GSL| / |f_GSL|): 5.1876131255043083e-16
const testcase_jacobi_zeta<double>
data007[10] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.0077915156724163905, -0.30000000000000004, 0.17453292519943295 },
  { 0.014672379065819937, -0.30000000000000004, 0.34906585039886590 },
  { 0.019828758454294416, -0.30000000000000004, 0.52359877559829882 },
  { 0.022634293931617772, -0.30000000000000004, 0.69813170079773179 },
  { 0.022727118342760075, -0.30000000000000004, 0.87266462599716477 },
  { 0.020063833990799008, -0.30000000000000004, 1.0471975511965976 },
  { 0.014939759648705574, -0.30000000000000004, 1.2217304763960306 },
  { 0.0079660718798976703, -0.30000000000000004, 1.3962634015954636 },
  { 2.8544538768310429e-18, -0.30000000000000004, 1.5707963267948966 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 3.4694469519536142e-18
// max(|f - f_GSL| / |f_GSL|): 3.7835348280030090e-16
const testcase_jacobi_zeta<double>
data008[10] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.0034386959975978596, -0.19999999999999996, 0.17453292519943295 },
  { 0.0064682893109413329, -0.19999999999999996, 0.34906585039886590 },
  { 0.0087264269495164054, -0.19999999999999996, 0.52359877559829882 },
  { 0.0099397795571055398, -0.19999999999999996, 0.69813170079773179 },
  { 0.0099574088608773825, -0.19999999999999996, 0.87266462599716477 },
  { 0.0087710671911204064, -0.19999999999999996, 1.0471975511965976 },
  { 0.0065190545465862683, -0.19999999999999996, 1.2217304763960306 },
  { 0.0034718319297092695, -0.19999999999999996, 1.3962634015954636 },
  { 1.2435221179342853e-18, -0.19999999999999996, 1.5707963267948966 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 4.3368086899420177e-19
// max(|f - f_GSL| / |f_GSL|): 2.6893936273561792e-16
const testcase_jacobi_zeta<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.00085618917897553170, -0.099999999999999978, 0.17453292519943295 },
  { 0.0016094592508594896, -0.099999999999999978, 0.34906585039886590 },
  { 0.0021691417250760078, -0.099999999999999978, 0.52359877559829882 },
  { 0.0024676671911897569, -0.099999999999999978, 0.69813170079773179 },
  { 0.0024687440785337209, -0.099999999999999978, 0.87266462599716477 },
  { 0.0021718685042819816, -0.099999999999999978, 1.0471975511965976 },
  { 0.0016125600380057930, -0.099999999999999978, 1.2217304763960306 },
  { 0.00085821307877792454, -0.099999999999999978, 1.3962634015954636 },
  { 3.0731752020242009e-19, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 8.6736173798840355e-19
// max(|f - f_GSL| / |f_GSL|): 3.5133724290431918e-16
const testcase_jacobi_zeta<double>
data010[10] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.00085618917897553354, 0.10000000000000009, 0.17453292519943295 },
  { 0.0016094592508594933, 0.10000000000000009, 0.34906585039886590 },
  { 0.0021691417250760126, 0.10000000000000009, 0.52359877559829882 },
  { 0.0024676671911897626, 0.10000000000000009, 0.69813170079773179 },
  { 0.0024687440785337265, 0.10000000000000009, 0.87266462599716477 },
  { 0.0021718685042819864, 0.10000000000000009, 1.0471975511965976 },
  { 0.0016125600380057965, 0.10000000000000009, 1.2217304763960306 },
  { 0.00085821307877792638, 0.10000000000000009, 1.3962634015954636 },
  { 3.0731752020242076e-19, 0.10000000000000009, 1.5707963267948966 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 3.4694469519536142e-18
// max(|f - f_GSL| / |f_GSL|): 3.7835348280030090e-16
const testcase_jacobi_zeta<double>
data011[10] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.0034386959975978596, 0.19999999999999996, 0.17453292519943295 },
  { 0.0064682893109413329, 0.19999999999999996, 0.34906585039886590 },
  { 0.0087264269495164054, 0.19999999999999996, 0.52359877559829882 },
  { 0.0099397795571055398, 0.19999999999999996, 0.69813170079773179 },
  { 0.0099574088608773825, 0.19999999999999996, 0.87266462599716477 },
  { 0.0087710671911204064, 0.19999999999999996, 1.0471975511965976 },
  { 0.0065190545465862683, 0.19999999999999996, 1.2217304763960306 },
  { 0.0034718319297092695, 0.19999999999999996, 1.3962634015954636 },
  { 1.2435221179342853e-18, 0.19999999999999996, 1.5707963267948966 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 1.0408340855860843e-17
// max(|f - f_GSL| / |f_GSL|): 5.1876131255043083e-16
const testcase_jacobi_zeta<double>
data012[10] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.0077915156724163905, 0.30000000000000004, 0.17453292519943295 },
  { 0.014672379065819937, 0.30000000000000004, 0.34906585039886590 },
  { 0.019828758454294416, 0.30000000000000004, 0.52359877559829882 },
  { 0.022634293931617772, 0.30000000000000004, 0.69813170079773179 },
  { 0.022727118342760075, 0.30000000000000004, 0.87266462599716477 },
  { 0.020063833990799008, 0.30000000000000004, 1.0471975511965976 },
  { 0.014939759648705574, 0.30000000000000004, 1.2217304763960306 },
  { 0.0079660718798976703, 0.30000000000000004, 1.3962634015954636 },
  { 2.8544538768310429e-18, 0.30000000000000004, 1.5707963267948966 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 3.4694469519536142e-17
// max(|f - f_GSL| / |f_GSL|): 8.4715548733240854e-16
const testcase_jacobi_zeta<double>
data013[10] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.013996123587392533, 0.39999999999999991, 0.17453292519943295 },
  { 0.026398481224639357, 0.39999999999999991, 0.34906585039886590 },
  { 0.035764944986518783, 0.39999999999999991, 0.52359877559829882 },
  { 0.040954075182567586, 0.39999999999999991, 0.69813170079773179 },
  { 0.041264829607496285, 0.39999999999999991, 0.87266462599716477 },
  { 0.036552212485120444, 0.39999999999999991, 1.0471975511965976 },
  { 0.027294444118671310, 0.39999999999999991, 1.2217304763960306 },
  { 0.014581333452897024, 0.39999999999999991, 1.3962634015954636 },
  { 5.2283574650201208e-18, 0.39999999999999991, 1.5707963267948966 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 4.6979541059860659e-16
const testcase_jacobi_zeta<double>
data014[10] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.022187552754766429, 0.50000000000000000, 0.17453292519943295 },
  { 0.041937521256519172, 0.50000000000000000, 0.34906585039886590 },
  { 0.057009125002218206, 0.50000000000000000, 0.52359877559829882 },
  { 0.065564299803546541, 0.50000000000000000, 0.69813170079773179 },
  { 0.066385344613391212, 0.50000000000000000, 0.87266462599716477 },
  { 0.059091015957506245, 0.50000000000000000, 1.0471975511965976 },
  { 0.044310100188499860, 0.50000000000000000, 1.2217304763960306 },
  { 0.023739114168492250, 0.50000000000000000, 1.3962634015954636 },
  { 8.5206475417261149e-18, 0.50000000000000000, 1.5707963267948966 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 5.5820409081595190e-16
const testcase_jacobi_zeta<double>
data015[10] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.032588313971326846, 0.60000000000000009, 0.17453292519943295 },
  { 0.061764607726573377, 0.60000000000000009, 0.34906585039886590 },
  { 0.084332322112252583, 0.60000000000000009, 0.52359877559829882 },
  { 0.097553688205206976, 0.60000000000000009, 0.69813170079773179 },
  { 0.099445977097936872, 0.60000000000000009, 0.87266462599716477 },
  { 0.089139857337234535, 0.60000000000000009, 1.0471975511965976 },
  { 0.067259974479995710, 0.60000000000000009, 1.2217304763960306 },
  { 0.036191754518603084, 0.60000000000000009, 1.3962634015954636 },
  { 1.3010683712129316e-17, 0.60000000000000009, 1.5707963267948966 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 2.1455915857898406e-16
const testcase_jacobi_zeta<double>
data016[10] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.045586980600884716, 0.69999999999999996, 0.17453292519943295 },
  { 0.086700582210421137, 0.69999999999999996, 0.34906585039886590 },
  { 0.11905792048350007, 0.69999999999999996, 0.52359877559829882 },
  { 0.13880208239414996, 0.69999999999999996, 0.69813170079773179 },
  { 0.14284089523327179, 0.69999999999999996, 0.87266462599716477 },
  { 0.12936094548213592, 0.69999999999999996, 1.0471975511965976 },
  { 0.098554159872393729, 0.69999999999999996, 1.2217304763960306 },
  { 0.053405717675964463, 0.69999999999999996, 1.3962634015954636 },
  { 1.9249123278055039e-17, 0.69999999999999996, 1.5707963267948966 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 3.3895448572450267e-16
const testcase_jacobi_zeta<double>
data017[10] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.061959136509558754, 0.80000000000000004, 0.17453292519943295 },
  { 0.11836452596851255, 0.80000000000000004, 0.34906585039886590 },
  { 0.16377169670023631, 0.80000000000000004, 0.52359877559829882 },
  { 0.19299488873051299, 0.80000000000000004, 0.69813170079773179 },
  { 0.20137521133401626, 0.80000000000000004, 0.87266462599716477 },
  { 0.18533773444470997, 0.80000000000000004, 1.0471975511965976 },
  { 0.14353571505361065, 0.80000000000000004, 1.2217304763960306 },
  { 0.078792677400195354, 0.80000000000000004, 1.3962634015954636 },
  { 2.8542161727115589e-17, 0.80000000000000004, 1.5707963267948966 },
};
const double toler017 = 2.5000000000000020e-13;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 1.1102230246251565e-16
// max(|f - f_GSL| / |f_GSL|): 4.1164027076444479e-16
const testcase_jacobi_zeta<double>
data018[10] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.083775032990995119, 0.89999999999999991, 0.17453292519943295 },
  { 0.16102654944281708, 0.89999999999999991, 0.34906585039886590 },
  { 0.22520771339110812, 0.89999999999999991, 0.52359877559829882 },
  { 0.26970709706399587, 0.89999999999999991, 0.69813170079773179 },
  { 0.28780075550145739, 0.89999999999999991, 0.87266462599716477 },
  { 0.27273881727147753, 0.89999999999999991, 1.0471975511965976 },
  { 0.21859591573936107, 0.89999999999999991, 1.2217304763960306 },
  { 0.12384933874685357, 0.89999999999999991, 1.3962634015954636 },
  { 4.5483306117664359e-17, 0.89999999999999991, 1.5707963267948966 },
};
const double toler018 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_jacobi_zeta<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = std::jacobi_zeta(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  return 0;
}
