// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  gamma_reciprocal

//  Compare against values generated by Equator.
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// mu = 1.0
const testcase_gamma_reciprocal<double>
data001[121]
{
  { 0.0,            -4.0, 0.0},
  { 2.032909481,    -3.9, 0.0},
  { 3.337425746,    -3.8, 0.0},
  { 3.97386791,     -3.7, 0.0},
  { 4.05092592,     -3.6, 0.0},
  { 3.702494142,    -3.5, 0.0},
  { 3.068509122,    -3.4, 0.0},
  { 2.28041126,     -3.3, 0.0},
  { 1.451259988,    -3.2, 0.0},
  { 0.670111142,    -3.1, 0.0},
  { 0.0,            -3.0, 0.0},
  { -0.521258841,   -2.9, 0.0},
  { -0.878269933,   -2.8, 0.0},
  { -1.074018354,   -2.7, 0.0},
  { -1.125257201,   -2.6, 0.0},
  { -1.057855469,   -2.5, 0.0},
  { -0.902502683,   -2.4, 0.0},
  { -0.691033716,   -2.3, 0.0},
  { -0.453518746,   -2.2, 0.0},
  { -0.216164885,   -2.1, 0.0},
  { 0.0,            -2.0, 0.0},
  { 0.179744428,    -1.9, 0.0},
  { 0.313667833,    -1.8, 0.0},
  { 0.397784576,    -1.7, 0.0},
  { 0.432791231,    -1.6, 0.0},
  { 0.423142188,    -1.5, 0.0},
  { 0.376042785,    -1.4, 0.0},
  { 0.300449442,    -1.3, 0.0},
  { 0.206144885,    -1.2, 0.0},
  { 0.1029356593,   -1.1, 0.0},
  { 0.0,            -1.0, 0.0},
  { -0.09460233055, -0.9, 0.0},
  { -0.1742599074,  -0.8, 0.0},
  { -0.233990927,   -0.7, 0.0},
  { -0.2704945195,  -0.6, 0.0},
  { -0.282094792,   -0.5, 0.0},
  { -0.268601989,   -0.4, 0.0},
  { -0.231114955,   -0.3, 0.0},
  { -0.171787404,   -0.2, 0.0},
  { -0.093577872,   -0.1, 0.0},
  { 0.0,             0.0, 0.0},
  { 0.1051137006,    0.1, 0.0},
  { 0.2178248842,    0.2, 0.0},
  { 0.334272753,     0.3, 0.0},
  { 0.450824199,     0.4, 0.0},
  { 0.5641895835,    0.5, 0.0},
  { 0.6715049724,    0.6, 0.0},
  { 0.770383184,     0.7, 0.0},
  { 0.858937019,     0.8, 0.0},
  { 0.935778721,     0.9, 0.0},
  { 1.0,             1.0, 0.0},
  { 1.051137006,     1.1, 0.0},
  { 1.089124421,     1.2, 0.0},
  { 1.114242509,     1.3, 0.0},
  { 1.127060498,     1.4, 0.0},
  { 1.128379167,     1.5, 0.0},
  { 1.119174954,     1.6, 0.0},
  { 1.100547406,     1.7, 0.0},
  { 1.073671274,     1.8, 0.0},
  { 1.039754134,     1.9, 0.0},
  { 1.0,             2.0, 0.0},
  { 0.955579096,     2.1, 0.0},
  { 0.9076036842,    2.2, 0.0},
  { 0.857109622,     2.3, 0.0},
  { 0.805043213,     2.4, 0.0},
  { 0.7522527781,    2.5, 0.0},
  { 0.699484346,     2.6, 0.0},
  { 0.647380827,     2.7, 0.0},
  { 0.596484041,     2.8, 0.0},
  { 0.547239018,     2.9, 0.0},
  { 0.5,             3.0, 0.0},
  { 0.455037665,     3.1, 0.0},
  { 0.412547129,     3.2, 0.0},
  { 0.372656357,     3.3, 0.0},
  { 0.335434672,     3.4, 0.0},
  { 0.3009011112,    3.5, 0.0},
  { 0.269032441,     3.6, 0.0},
  { 0.239770677,     3.7, 0.0},
  { 0.2130300147,    3.8, 0.0},
  { 0.18870311,      3.9, 0.0},
  { 0.1666666667,    4.0, 0.0},
  { 0.1467863435,    4.1, 0.0},
  { 0.1289209779,    4.2, 0.0},
  { 0.1129261689,    4.3, 0.0},
  { 0.0986572565,    4.4, 0.0},
  { 0.0859717461,    4.5, 0.0},
  { 0.0747312336,    4.6, 0.0},
  { 0.0648028856,    4.7, 0.0},
  { 0.0560605302,    4.8, 0.0},
  { 0.0483854127,    4.9, 0.0},
  { 0.04166666667,   5.0, 0.0},
  { 0.03580154721,   5.1, 0.0},
  { 0.03069547092,   5.2, 0.0},
  { 0.0262618997,    5.3, 0.0},
  { 0.02242210374,   5.4, 0.0},
  { 0.01910483246,   5.5, 0.0},
  { 0.01624592034,   5.6, 0.0},
  { 0.01378784799,   5.7, 0.0},
  { 0.0116792771,    5.8, 0.0},
  { 0.00987457403,   5.9, 0.0},
  { 0.008333333333,  6.0, 0.0},
  { 0.0070199112,    6.1, 0.0},
  { 0.005902975177,  6.2, 0.0},
  { 0.004955075423,  6.3, 0.0},
  { 0.00415224143,   6.4, 0.0},
  { 0.0034736059,    6.5, 0.0},
  { 0.0029010572,    6.6, 0.0},
  { 0.0024189207,    6.7, 0.0},
  { 0.00201366847,   6.8, 0.0},
  { 0.001673656615,  6.9, 0.0},
  { 0.001388888889,  7.0, 0.0},
  { 0.001150805118,  7.1, 0.0},
  { 9.52092771e-4,   7.2, 0.0},
  { 7.86519908e-4,   7.3, 0.0},
  { 6.487877241e-4,  7.4, 0.0},
  { 5.34400908e-4,   7.5, 0.0},
  { 4.39554122e-4,   7.6, 0.0},
  { 3.6103294e-4,    7.7, 0.0},
  { 2.96127716e-4,   7.8, 0.0},
  { 2.4255893e-4,    7.9, 0.0},
  { 1.984126984e-4,  8.0, 0.0},
};
const double toler001 = 2.5000000e-9;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_gamma_reciprocal<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_reciprocal(data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}

