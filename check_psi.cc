// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  psi
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data.
testcase_psi<double> data001[] = {
  { -5.2446900613726646, -9.8750000000000000 },
  { 3.5917231146157280, -9.3750000000000000 },
  { -5.3459558841574770, -8.8750000000000000 },
  { 3.4850564479490611, -8.3750000000000000 },
  { -5.4586319404955068, -7.8750000000000000 },
  { 3.3656534628744335, -7.3750000000000000 },
  { -5.5856160674796378, -6.8750000000000000 },
  { 3.2300602425354503, -6.3750000000000000 },
  { -5.7310706129341851, -5.8750000000000000 },
  { 3.0731974974374108, -5.3750000000000000 },
  { -5.9012833788915975, -4.8750000000000000 },
  { 2.8871509858095035, -4.3750000000000000 },
  { -6.1064115840198046, -3.8750000000000000 },
  { 2.6585795572380744, -3.3750000000000000 },
  { -6.3644761001488401, -2.8750000000000000 },
  { 2.3622832609417772, -2.3750000000000000 },
  { -6.7123021871053794, -1.8750000000000000 },
  { 1.9412306293628270, -1.3750000000000000 },
  { -7.2456355204387126, -0.87500000000000000 },
  { 1.2139579020900999, -0.37500000000000000 },
  { -8.3884926632958550, 0.12500000000000000 },
  { -1.4527087645765666, 0.62500000000000000 },
  { -0.38849266329585491, 1.1250000000000000 },
  { 0.14729123542343345, 1.6250000000000000 },
  { 0.50039622559303387, 2.1250000000000000 },
  { 0.76267585080804878, 2.6250000000000000 },
  { 0.97098446088715162, 3.1250000000000000 },
  { 1.1436282317604300, 3.6250000000000000 },
  { 1.2909844608871517, 4.1250000000000000 },
  { 1.4194903007259472, 4.6250000000000000 },
  { 1.5334087033113943, 5.1250000000000000 },
  { 1.6357065169421636, 5.6250000000000000 },
  { 1.7285306545309065, 6.1250000000000000 },
  { 1.8134842947199412, 6.6250000000000000 },
  { 1.8917959606533554, 7.1250000000000000 },
  { 1.9644276909463558, 7.6250000000000000 },
  { 2.0321468378463372, 8.1250000000000000 },
  { 2.0955752319299630, 8.6250000000000000 },
  { 2.1552237609232612, 9.1250000000000000 },
  { 2.2115172609154699, 9.6250000000000000 },
  { 2.2648128020191511, 10.125000000000000 },
};

// Test function.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_psi<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::psi(Tp(data001[i].x));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(0.010000000000000000));
  }

int
main()
{
  test001<double>();
  return 0;
}
