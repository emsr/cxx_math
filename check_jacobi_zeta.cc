// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  jacobi_zeta
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 1.1102230246251565e-16
// max(|f - f_GSL| / |f_GSL|): 4.0706454465558064e-16
const testcase_jacobi_zeta<double>
data001[10] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.083775032990995146, -0.90000000000000002, 0.17453292519943295 },
  { 0.16102654944281714, -0.90000000000000002, 0.34906585039886590 },
  { 0.22520771339110821, -0.90000000000000002, 0.52359877559829882 },
  { 0.26970709706399598, -0.90000000000000002, 0.69813170079773179 },
  { 0.28780075550145756, -0.90000000000000002, 0.87266462599716477 },
  { 0.27273881727147764, -0.90000000000000002, 1.0471975511965976 },
  { 0.21859591573936119, -0.90000000000000002, 1.2217304763960306 },
  { 0.12384933874685365, -0.90000000000000002, 1.3962634015954636 },
  { 4.5483306117664390e-17, -0.90000000000000002, 1.5707963267948966 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 3.3895448572450267e-16
const testcase_jacobi_zeta<double>
data002[10] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.061959136509558754, -0.80000000000000004, 0.17453292519943295 },
  { 0.11836452596851255, -0.80000000000000004, 0.34906585039886590 },
  { 0.16377169670023631, -0.80000000000000004, 0.52359877559829882 },
  { 0.19299488873051299, -0.80000000000000004, 0.69813170079773179 },
  { 0.20137521133401626, -0.80000000000000004, 0.87266462599716477 },
  { 0.18533773444470997, -0.80000000000000004, 1.0471975511965976 },
  { 0.14353571505361065, -0.80000000000000004, 1.2217304763960306 },
  { 0.078792677400195354, -0.80000000000000004, 1.3962634015954636 },
  { 2.8542161727115589e-17, -0.80000000000000004, 1.5707963267948966 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 2.1455915857898406e-16
const testcase_jacobi_zeta<double>
data003[10] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.045586980600884716, -0.69999999999999996, 0.17453292519943295 },
  { 0.086700582210421137, -0.69999999999999996, 0.34906585039886590 },
  { 0.11905792048350007, -0.69999999999999996, 0.52359877559829882 },
  { 0.13880208239414996, -0.69999999999999996, 0.69813170079773179 },
  { 0.14284089523327179, -0.69999999999999996, 0.87266462599716477 },
  { 0.12936094548213592, -0.69999999999999996, 1.0471975511965976 },
  { 0.098554159872393729, -0.69999999999999996, 1.2217304763960306 },
  { 0.053405717675964463, -0.69999999999999996, 1.3962634015954636 },
  { 1.9249123278055039e-17, -0.69999999999999996, 1.5707963267948966 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 4.1633363423443370e-17
// max(|f - f_GSL| / |f_GSL|): 4.4937670030222614e-16
const testcase_jacobi_zeta<double>
data004[10] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.032588313971326832, -0.59999999999999998, 0.17453292519943295 },
  { 0.061764607726573349, -0.59999999999999998, 0.34906585039886590 },
  { 0.084332322112252542, -0.59999999999999998, 0.52359877559829882 },
  { 0.097553688205206934, -0.59999999999999998, 0.69813170079773179 },
  { 0.099445977097936830, -0.59999999999999998, 0.87266462599716477 },
  { 0.089139857337234493, -0.59999999999999998, 1.0471975511965976 },
  { 0.067259974479995682, -0.59999999999999998, 1.2217304763960306 },
  { 0.036191754518603063, -0.59999999999999998, 1.3962634015954636 },
  { 1.3010683712129310e-17, -0.59999999999999998, 1.5707963267948966 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 4.6979541059860659e-16
const testcase_jacobi_zeta<double>
data005[10] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.022187552754766429, -0.50000000000000000, 0.17453292519943295 },
  { 0.041937521256519172, -0.50000000000000000, 0.34906585039886590 },
  { 0.057009125002218206, -0.50000000000000000, 0.52359877559829882 },
  { 0.065564299803546541, -0.50000000000000000, 0.69813170079773179 },
  { 0.066385344613391212, -0.50000000000000000, 0.87266462599716477 },
  { 0.059091015957506245, -0.50000000000000000, 1.0471975511965976 },
  { 0.044310100188499860, -0.50000000000000000, 1.2217304763960306 },
  { 0.023739114168492250, -0.50000000000000000, 1.3962634015954636 },
  { 8.5206475417261149e-18, -0.50000000000000000, 1.5707963267948966 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 2.0816681711721685e-17
// max(|f - f_GSL| / |f_GSL|): 5.0829329239944491e-16
const testcase_jacobi_zeta<double>
data006[10] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.013996123587392542, -0.40000000000000002, 0.17453292519943295 },
  { 0.026398481224639374, -0.40000000000000002, 0.34906585039886590 },
  { 0.035764944986518804, -0.40000000000000002, 0.52359877559829882 },
  { 0.040954075182567606, -0.40000000000000002, 0.69813170079773179 },
  { 0.041264829607496313, -0.40000000000000002, 0.87266462599716477 },
  { 0.036552212485120465, -0.40000000000000002, 1.0471975511965976 },
  { 0.027294444118671324, -0.40000000000000002, 1.2217304763960306 },
  { 0.014581333452897033, -0.40000000000000002, 1.3962634015954636 },
  { 5.2283574650201239e-18, -0.40000000000000002, 1.5707963267948966 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 1.0408340855860843e-17
// max(|f - f_GSL| / |f_GSL|): 5.1876131255043083e-16
const testcase_jacobi_zeta<double>
data007[10] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.0077915156724163905, -0.30000000000000004, 0.17453292519943295 },
  { 0.014672379065819937, -0.30000000000000004, 0.34906585039886590 },
  { 0.019828758454294416, -0.30000000000000004, 0.52359877559829882 },
  { 0.022634293931617772, -0.30000000000000004, 0.69813170079773179 },
  { 0.022727118342760075, -0.30000000000000004, 0.87266462599716477 },
  { 0.020063833990799008, -0.30000000000000004, 1.0471975511965976 },
  { 0.014939759648705574, -0.30000000000000004, 1.2217304763960306 },
  { 0.0079660718798976703, -0.30000000000000004, 1.3962634015954636 },
  { 2.8544538768310429e-18, -0.30000000000000004, 1.5707963267948966 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 3.4694469519536142e-18
// max(|f - f_GSL| / |f_GSL|): 3.7835348280030090e-16
const testcase_jacobi_zeta<double>
data008[10] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.0034386959975978596, -0.19999999999999996, 0.17453292519943295 },
  { 0.0064682893109413329, -0.19999999999999996, 0.34906585039886590 },
  { 0.0087264269495164054, -0.19999999999999996, 0.52359877559829882 },
  { 0.0099397795571055398, -0.19999999999999996, 0.69813170079773179 },
  { 0.0099574088608773825, -0.19999999999999996, 0.87266462599716477 },
  { 0.0087710671911204064, -0.19999999999999996, 1.0471975511965976 },
  { 0.0065190545465862683, -0.19999999999999996, 1.2217304763960306 },
  { 0.0034718319297092695, -0.19999999999999996, 1.3962634015954636 },
  { 1.2435221179342853e-18, -0.19999999999999996, 1.5707963267948966 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 4.3368086899420177e-19
// max(|f - f_GSL| / |f_GSL|): 2.6893936273561792e-16
const testcase_jacobi_zeta<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.00085618917897553170, -0.099999999999999978, 0.17453292519943295 },
  { 0.0016094592508594896, -0.099999999999999978, 0.34906585039886590 },
  { 0.0021691417250760078, -0.099999999999999978, 0.52359877559829882 },
  { 0.0024676671911897569, -0.099999999999999978, 0.69813170079773179 },
  { 0.0024687440785337209, -0.099999999999999978, 0.87266462599716477 },
  { 0.0021718685042819816, -0.099999999999999978, 1.0471975511965976 },
  { 0.0016125600380057930, -0.099999999999999978, 1.2217304763960306 },
  { 0.00085821307877792454, -0.099999999999999978, 1.3962634015954636 },
  { 3.0731752020242009e-19, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 8.6736173798840355e-19
// max(|f - f_GSL| / |f_GSL|): 3.5133724290431918e-16
const testcase_jacobi_zeta<double>
data010[10] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.00085618917897553354, 0.10000000000000009, 0.17453292519943295 },
  { 0.0016094592508594933, 0.10000000000000009, 0.34906585039886590 },
  { 0.0021691417250760126, 0.10000000000000009, 0.52359877559829882 },
  { 0.0024676671911897626, 0.10000000000000009, 0.69813170079773179 },
  { 0.0024687440785337265, 0.10000000000000009, 0.87266462599716477 },
  { 0.0021718685042819864, 0.10000000000000009, 1.0471975511965976 },
  { 0.0016125600380057965, 0.10000000000000009, 1.2217304763960306 },
  { 0.00085821307877792638, 0.10000000000000009, 1.3962634015954636 },
  { 3.0731752020242076e-19, 0.10000000000000009, 1.5707963267948966 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 3.4694469519536142e-18
// max(|f - f_GSL| / |f_GSL|): 3.7835348280030090e-16
const testcase_jacobi_zeta<double>
data011[10] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.0034386959975978596, 0.19999999999999996, 0.17453292519943295 },
  { 0.0064682893109413329, 0.19999999999999996, 0.34906585039886590 },
  { 0.0087264269495164054, 0.19999999999999996, 0.52359877559829882 },
  { 0.0099397795571055398, 0.19999999999999996, 0.69813170079773179 },
  { 0.0099574088608773825, 0.19999999999999996, 0.87266462599716477 },
  { 0.0087710671911204064, 0.19999999999999996, 1.0471975511965976 },
  { 0.0065190545465862683, 0.19999999999999996, 1.2217304763960306 },
  { 0.0034718319297092695, 0.19999999999999996, 1.3962634015954636 },
  { 1.2435221179342853e-18, 0.19999999999999996, 1.5707963267948966 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 1.0408340855860843e-17
// max(|f - f_GSL| / |f_GSL|): 5.1876131255043083e-16
const testcase_jacobi_zeta<double>
data012[10] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.0077915156724163905, 0.30000000000000004, 0.17453292519943295 },
  { 0.014672379065819937, 0.30000000000000004, 0.34906585039886590 },
  { 0.019828758454294416, 0.30000000000000004, 0.52359877559829882 },
  { 0.022634293931617772, 0.30000000000000004, 0.69813170079773179 },
  { 0.022727118342760075, 0.30000000000000004, 0.87266462599716477 },
  { 0.020063833990799008, 0.30000000000000004, 1.0471975511965976 },
  { 0.014939759648705574, 0.30000000000000004, 1.2217304763960306 },
  { 0.0079660718798976703, 0.30000000000000004, 1.3962634015954636 },
  { 2.8544538768310429e-18, 0.30000000000000004, 1.5707963267948966 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 3.4694469519536142e-17
// max(|f - f_GSL| / |f_GSL|): 8.4715548733240854e-16
const testcase_jacobi_zeta<double>
data013[10] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.013996123587392533, 0.39999999999999991, 0.17453292519943295 },
  { 0.026398481224639357, 0.39999999999999991, 0.34906585039886590 },
  { 0.035764944986518783, 0.39999999999999991, 0.52359877559829882 },
  { 0.040954075182567586, 0.39999999999999991, 0.69813170079773179 },
  { 0.041264829607496285, 0.39999999999999991, 0.87266462599716477 },
  { 0.036552212485120444, 0.39999999999999991, 1.0471975511965976 },
  { 0.027294444118671310, 0.39999999999999991, 1.2217304763960306 },
  { 0.014581333452897024, 0.39999999999999991, 1.3962634015954636 },
  { 5.2283574650201208e-18, 0.39999999999999991, 1.5707963267948966 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 4.6979541059860659e-16
const testcase_jacobi_zeta<double>
data014[10] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.022187552754766429, 0.50000000000000000, 0.17453292519943295 },
  { 0.041937521256519172, 0.50000000000000000, 0.34906585039886590 },
  { 0.057009125002218206, 0.50000000000000000, 0.52359877559829882 },
  { 0.065564299803546541, 0.50000000000000000, 0.69813170079773179 },
  { 0.066385344613391212, 0.50000000000000000, 0.87266462599716477 },
  { 0.059091015957506245, 0.50000000000000000, 1.0471975511965976 },
  { 0.044310100188499860, 0.50000000000000000, 1.2217304763960306 },
  { 0.023739114168492250, 0.50000000000000000, 1.3962634015954636 },
  { 8.5206475417261149e-18, 0.50000000000000000, 1.5707963267948966 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 5.5820409081595190e-16
const testcase_jacobi_zeta<double>
data015[10] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.032588313971326846, 0.60000000000000009, 0.17453292519943295 },
  { 0.061764607726573377, 0.60000000000000009, 0.34906585039886590 },
  { 0.084332322112252583, 0.60000000000000009, 0.52359877559829882 },
  { 0.097553688205206976, 0.60000000000000009, 0.69813170079773179 },
  { 0.099445977097936872, 0.60000000000000009, 0.87266462599716477 },
  { 0.089139857337234535, 0.60000000000000009, 1.0471975511965976 },
  { 0.067259974479995710, 0.60000000000000009, 1.2217304763960306 },
  { 0.036191754518603084, 0.60000000000000009, 1.3962634015954636 },
  { 1.3010683712129316e-17, 0.60000000000000009, 1.5707963267948966 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 2.7755575615628914e-17
// max(|f - f_GSL| / |f_GSL|): 2.1455915857898406e-16
const testcase_jacobi_zeta<double>
data016[10] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.045586980600884716, 0.69999999999999996, 0.17453292519943295 },
  { 0.086700582210421137, 0.69999999999999996, 0.34906585039886590 },
  { 0.11905792048350007, 0.69999999999999996, 0.52359877559829882 },
  { 0.13880208239414996, 0.69999999999999996, 0.69813170079773179 },
  { 0.14284089523327179, 0.69999999999999996, 0.87266462599716477 },
  { 0.12936094548213592, 0.69999999999999996, 1.0471975511965976 },
  { 0.098554159872393729, 0.69999999999999996, 1.2217304763960306 },
  { 0.053405717675964463, 0.69999999999999996, 1.3962634015954636 },
  { 1.9249123278055039e-17, 0.69999999999999996, 1.5707963267948966 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 5.5511151231257827e-17
// max(|f - f_GSL| / |f_GSL|): 3.3895448572450267e-16
const testcase_jacobi_zeta<double>
data017[10] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.061959136509558754, 0.80000000000000004, 0.17453292519943295 },
  { 0.11836452596851255, 0.80000000000000004, 0.34906585039886590 },
  { 0.16377169670023631, 0.80000000000000004, 0.52359877559829882 },
  { 0.19299488873051299, 0.80000000000000004, 0.69813170079773179 },
  { 0.20137521133401626, 0.80000000000000004, 0.87266462599716477 },
  { 0.18533773444470997, 0.80000000000000004, 1.0471975511965976 },
  { 0.14353571505361065, 0.80000000000000004, 1.2217304763960306 },
  { 0.078792677400195354, 0.80000000000000004, 1.3962634015954636 },
  { 2.8542161727115589e-17, 0.80000000000000004, 1.5707963267948966 },
};
const double toler017 = 2.5000000000000020e-13;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 1.1102230246251565e-16
// max(|f - f_GSL| / |f_GSL|): 4.1164027076444479e-16
const testcase_jacobi_zeta<double>
data018[10] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.083775032990995119, 0.89999999999999991, 0.17453292519943295 },
  { 0.16102654944281708, 0.89999999999999991, 0.34906585039886590 },
  { 0.22520771339110812, 0.89999999999999991, 0.52359877559829882 },
  { 0.26970709706399587, 0.89999999999999991, 0.69813170079773179 },
  { 0.28780075550145739, 0.89999999999999991, 0.87266462599716477 },
  { 0.27273881727147753, 0.89999999999999991, 1.0471975511965976 },
  { 0.21859591573936107, 0.89999999999999991, 1.2217304763960306 },
  { 0.12384933874685357, 0.89999999999999991, 1.3962634015954636 },
  { 4.5483306117664359e-17, 0.89999999999999991, 1.5707963267948966 },
};
const double toler018 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_jacobi_zeta<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::jacobi_zeta(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  return 0;
}
