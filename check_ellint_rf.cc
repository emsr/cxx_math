// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_rf
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for x=0.50000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data001[] = {
  { 2.2214414690791831, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.8540746773013719, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.6566381702365940, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.5248868380818961, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 1.4275819958837301, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 1.3512866125547234, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 1.2890413409541062, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 1.2367980868756718, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 1.1920055072756153, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 1.1529578435405214, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data001[i].x), Tp(data001[i].y),
		     Tp(data001[i].z));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data002[] = {
  { 2.2214414690791831, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 1.4142135623730949, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.2464504802804612, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 1.1462158347805889, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 1.0752916200648814, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 1.0208044340604006, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.97681805230225316, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.94010347172525088, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.90871078312300901, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.88137358701954316, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.85722388169844066, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data002[i].x), Tp(data002[i].y),
		     Tp(data002[i].z));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data003[] = {
  { 1.8540746773013719, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 1.2464504802804612, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 1.1107207345395915, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 1.0280568010521267, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.96885765327245232, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.92298075280662473, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.88569392320354834, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.85439976540755636, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.82751823799033453, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.80401681679929116, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.78318403980915052, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data003)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data003[i].x), Tp(data003[i].y),
		     Tp(data003[i].z));
	const Tp f0 = data003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data004[] = {
  { 1.6566381702365940, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 1.1462158347805889, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 1.0280568010521267, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.95531661812450930, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.90285902528832773, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.86199580603507586, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.82864790333437521, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.80056531377001994, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.77637370387521165, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.75517182709724362, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.73633678046885453, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data004)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data004[i].x), Tp(data004[i].y),
		     Tp(data004[i].z));
	const Tp f0 = data004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data005[] = {
  { 1.5248868380818961, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 1.0752916200648814, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.96885765327245232, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.90285902528832773, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.85503322010790905, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.81764293493292906, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.78704085774940502, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.76120858506833289, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.73890987409115516, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.71933211800982655, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.70191250965289886, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data005)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data005[i].x), Tp(data005[i].y),
		     Tp(data005[i].z));
	const Tp f0 = data005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data006[] = {
  { 1.4275819958837301, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 1.0208044340604006, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.92298075280662473, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.86199580603507586, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.81764293493292906, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.78287236613419264, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.75435131823406698, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.73023111816567188, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.70937722302424855, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.69104258019551035, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.67470898845498051, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data006)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data006[i].x), Tp(data006[i].y),
		     Tp(data006[i].z));
	const Tp f0 = data006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data007[] = {
  { 1.3512866125547234, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.97681805230225316, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.88569392320354834, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.82864790333437521, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.78704085774940502, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.75435131823406698, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.72748955981916186, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.70473866151772913, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.68504332093857112, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.66770772721958893, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.65224864443716724, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data007)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data007[i].x), Tp(data007[i].y),
		     Tp(data007[i].z));
	const Tp f0 = data007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data008[] = {
  { 1.2890413409541062, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.94010347172525088, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.85439976540755636, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.80056531377001994, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.76120858506833289, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.73023111816567188, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.70473866151772913, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.68312063073973328, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.66438586965465496, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.64788015543296773, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.63314869458990386, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data008)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data008[i].x), Tp(data008[i].y),
		     Tp(data008[i].z));
	const Tp f0 = data008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data009[] = {
  { 1.2367980868756718, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.90871078312300901, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.82751823799033453, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.77637370387521165, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.73890987409115516, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.70937722302424855, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.68504332093857112, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.66438586965465496, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.64646710153810172, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.63066748113386040, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.61655598269269418, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data009)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data009[i].x), Tp(data009[i].y),
		     Tp(data009[i].z));
	const Tp f0 = data009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data010[] = {
  { 1.1920055072756153, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.88137358701954316, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.80401681679929116, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.75517182709724362, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.71933211800982655, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.69104258019551035, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.66770772721958893, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.64788015543296773, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.63066748113386040, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.61547970867038759, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.60190608527527134, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data010)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data010[i].x), Tp(data010[i].y),
		     Tp(data010[i].z));
	const Tp f0 = data010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data011[] = {
  { 1.1529578435405214, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.85722388169844066, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.78318403980915052, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.73633678046885453, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.70191250965289886, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.67470898845498051, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.65224864443716724, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.63314869458990386, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.61655598269269418, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.60190608527527134, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.58880582378346324, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test011()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data011)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data011[i].x), Tp(data011[i].y),
		     Tp(data011[i].z));
	const Tp f0 = data011[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data012[] = {
  { 1.8540746773013721, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.5707963267948966, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.4157372084259561, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.3110287771460600, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 1.2330149084392665, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 1.1714200841467699, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 1.1208810036030068, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 1.0782578237498217, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 1.0415607119696202, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 1.0094529099892116, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test012()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data012)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data012[i].x), Tp(data012[i].y),
		     Tp(data012[i].z));
	const Tp f0 = data012[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data013[] = {
  { 1.8540746773013721, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 1.2464504802804612, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.1107207345395915, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 1.0280568010521267, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.96885765327245232, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.92298075280662473, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.88569392320354834, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.85439976540755624, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.82751823799033453, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.80401681679929116, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.78318403980915074, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test013()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data013)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data013[i].x), Tp(data013[i].y),
		     Tp(data013[i].z));
	const Tp f0 = data013[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data014[] = {
  { 1.5707963267948966, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 1.1107207345395915, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.93122985945271242, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.88137358701954316, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.84239465585637707, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.81049698947675386, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.78357721761742349, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.76034599630094657, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.73995534521687278, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.72181773758940504, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test014()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data014)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data014[i].x), Tp(data014[i].y),
		     Tp(data014[i].z));
	const Tp f0 = data014[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data015[] = {
  { 1.4157372084259561, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 1.0280568010521267, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.93122985945271242, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.87041975136710337, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.82601787624924516, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.79112004238115607, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.76244341904094814, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.73815953092629605, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.71714271048229961, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.69864990732153287, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.68216465254074610, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test015()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data015)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data015[i].x), Tp(data015[i].y),
		     Tp(data015[i].z));
	const Tp f0 = data015[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data016[] = {
  { 1.3110287771460600, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.96885765327245232, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.88137358701954316, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.82601787624924516, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.78539816339744828, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.75335466872844847, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.72694593546890818, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.70452798616652434, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.68508581663343593, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.66794776093151054, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.65264594921422892, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test016()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data016)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data016[i].x), Tp(data016[i].y),
		     Tp(data016[i].z));
	const Tp f0 = data016[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data017[] = {
  { 1.2330149084392665, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.92298075280662473, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.84239465585637707, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.79112004238115607, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.75335466872844847, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.72347894201494256, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.69880113472360528, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.67781309728639505, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.65958172419278005, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.64348841474473739, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.62910156611289225, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test017()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data017)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data017[i].x), Tp(data017[i].y),
		     Tp(data017[i].z));
	const Tp f0 = data017[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data018[] = {
  { 1.1714200841467699, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.88569392320354834, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.81049698947675386, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.76244341904094814, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.72694593546890818, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.69880113472360528, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.67551085885604001, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.65567274799150732, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.63841773923685308, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.62316886995512544, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.60952307980176601, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test018()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data018)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data018[i].x), Tp(data018[i].y),
		     Tp(data018[i].z));
	const Tp f0 = data018[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data019[] = {
  { 1.1208810036030068, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.85439976540755624, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.78357721761742349, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.73815953092629605, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.70452798616652434, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.67781309728639505, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.65567274799150732, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.63679018330139725, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.62034832921819583, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.60580411741367690, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.59277777794859710, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test019()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data019)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data019[i].x), Tp(data019[i].y),
		     Tp(data019[i].z));
	const Tp f0 = data019[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data020[] = {
  { 1.0782578237498217, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.82751823799033453, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.76034599630094657, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.71714271048229961, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.68508581663343593, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.65958172419278005, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.63841773923685308, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.62034832921819583, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.60459978807807246, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.59065738572336657, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.57816086388034515, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test020()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data020)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data020[i].x), Tp(data020[i].y),
		     Tp(data020[i].z));
	const Tp f0 = data020[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data021[] = {
  { 1.0415607119696202, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.80401681679929116, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.73995534521687278, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.69864990732153287, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.66794776093151054, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.64348841474473739, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.62316886995512544, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.60580411741367690, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.59065738572336657, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.57723812571556010, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.56520275672071618, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test021()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data021)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data021[i].x), Tp(data021[i].y),
		     Tp(data021[i].z));
	const Tp f0 = data021[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data022[] = {
  { 1.0094529099892116, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.78318403980915074, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.72181773758940504, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.68216465254074610, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.65264594921422892, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.62910156611289225, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.60952307980176601, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.59277777794859710, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.57816086388034515, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.56520275672071618, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.55357435889704532, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test022()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data022)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data022[i].x), Tp(data022[i].y),
		     Tp(data022[i].z));
	const Tp f0 = data022[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data023[] = {
  { 1.6566381702365940, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.4157372084259561, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.2825498301618643, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.1920055072756151, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 1.1242019597966657, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 1.0704505140376155, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 1.0261974634293101, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.98876762511780558, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.95646049353590645, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.92813060970221073, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test023()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data023)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data023[i].x), Tp(data023[i].y),
		     Tp(data023[i].z));
	const Tp f0 = data023[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data024[] = {
  { 1.6566381702365940, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 1.1462158347805889, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.0280568010521267, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.95531661812450930, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.90285902528832773, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.86199580603507597, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.82864790333437521, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.80056531377001994, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.77637370387521143, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.75517182709724362, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.73633678046885453, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test024()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data024)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data024[i].x), Tp(data024[i].y),
		     Tp(data024[i].z));
	const Tp f0 = data024[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data025[] = {
  { 1.4157372084259561, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 1.0280568010521267, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.93122985945271219, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.87041975136710359, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.82601787624924516, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.79112004238115607, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.76244341904094814, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.73815953092629616, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.71714271048229961, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.69864990732153265, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.68216465254074621, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test025()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data025)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data025[i].x), Tp(data025[i].y),
		     Tp(data025[i].z));
	const Tp f0 = data025[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data026[] = {
  { 1.2825498301618643, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.95531661812450930, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.87041975136710359, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.81649658092772615, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.77683619921209335, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.74549815449740409, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.71963852032146258, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.69766475679190176, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.67859209091559169, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.66176802075998464, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.64673752632340964, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test026()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data026)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data026[i].x), Tp(data026[i].y),
		     Tp(data026[i].z));
	const Tp f0 = data026[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data027[] = {
  { 1.1920055072756151, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.90285902528832773, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.82601787624924516, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.77683619921209335, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.74048048969306079, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.71164561925559466, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.68778051696414155, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.66745154859124545, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.64976956169067812, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.63414390207242388, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.62016175377118499, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test027()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data027)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data027[i].x), Tp(data027[i].y),
		     Tp(data027[i].z));
	const Tp f0 = data027[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data028[] = {
  { 1.1242019597966657, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.86199580603507597, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.79112004238115607, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.74549815449740409, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.71164561925559466, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.68471920300228295, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.66238253969750771, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.64331926619024082, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.62671118199009868, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.61201373744646548, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.59884570404835646, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test028()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data028)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data028[i].x), Tp(data028[i].y),
		     Tp(data028[i].z));
	const Tp f0 = data028[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data029[] = {
  { 1.0704505140376155, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.82864790333437521, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.76244341904094814, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.71963852032146258, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.68778051696414155, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.66238253969750771, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.64127491508093215, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.62323278253783665, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.60749353353456292, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.59354887082967089, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.58104248070136966, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test029()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data029)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data029[i].x), Tp(data029[i].y),
		     Tp(data029[i].z));
	const Tp f0 = data029[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data030[] = {
  { 1.0261974634293101, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.80056531377001994, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.73815953092629616, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.69766475679190176, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.66745154859124545, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.64331926619024082, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.62323278253783665, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.60604138628959059, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.59102766766405268, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.57771288864136539, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.56576110137584690, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test030()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data030)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data030[i].x), Tp(data030[i].y),
		     Tp(data030[i].z));
	const Tp f0 = data030[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data031[] = {
  { 0.98876762511780558, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.77637370387521143, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.71714271048229961, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.67859209091559169, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.64976956169067812, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.62671118199009868, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.60749353353456292, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.59102766766405268, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.57663392588994911, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.56385831736117586, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.55238198026313035, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test031()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data031)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data031[i].x), Tp(data031[i].y),
		     Tp(data031[i].z));
	const Tp f0 = data031[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data032[] = {
  { 0.95646049353590645, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.75517182709724362, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.69864990732153265, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.66176802075998464, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.63414390207242388, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.61201373744646548, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.59354887082967089, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.57771288864136539, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.56385831736117586, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.55155230663550836, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.54049061640516349, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test032()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data032)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data032[i].x), Tp(data032[i].y),
		     Tp(data032[i].z));
	const Tp f0 = data032[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data033[] = {
  { 0.92813060970221073, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.73633678046885453, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.68216465254074621, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.64673752632340964, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.62016175377118499, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.59884570404835646, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.58104248070136966, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.56576110137584690, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.55238198026313035, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.54049061640516349, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.52979548043855929, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test033()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data033)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data033[i].x), Tp(data033[i].y),
		     Tp(data033[i].z));
	const Tp f0 = data033[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data034[] = {
  { 1.5248868380818961, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.3110287771460600, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.1920055072756153, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.1107207345395915, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 1.0496381260348653, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 1.0010773804561059, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.96100258716950193, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.92703733865068594, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.89766801262539242, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.87187320306151528, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test034()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data034)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data034[i].x), Tp(data034[i].y),
		     Tp(data034[i].z));
	const Tp f0 = data034[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data035[] = {
  { 1.5248868380818961, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 1.0752916200648814, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.96885765327245232, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.90285902528832773, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.85503322010790916, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.81764293493292906, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.78704085774940524, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.76120858506833289, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.73890987409115538, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.71933211800982655, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.70191250965289886, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test035()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data035)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data035[i].x), Tp(data035[i].y),
		     Tp(data035[i].z));
	const Tp f0 = data035[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data036[] = {
  { 1.3110287771460600, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.96885765327245232, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.88137358701954316, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.82601787624924516, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.78539816339744828, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.75335466872844847, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.72694593546890818, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.70452798616652423, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.68508581663343593, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.66794776093151043, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.65264594921422892, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test036()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data036)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data036[i].x), Tp(data036[i].y),
		     Tp(data036[i].z));
	const Tp f0 = data036[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data037[] = {
  { 1.1920055072756153, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.90285902528832773, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.82601787624924516, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.77683619921209335, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.74048048969306079, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.71164561925559466, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.68778051696414155, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.66745154859124545, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.64976956169067801, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.63414390207242399, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.62016175377118499, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test037()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data037)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data037[i].x), Tp(data037[i].y),
		     Tp(data037[i].z));
	const Tp f0 = data037[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data038[] = {
  { 1.1107207345395915, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.85503322010790916, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.78539816339744828, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.74048048969306079, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.70710678118654746, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.68053628937360033, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.65847894846240829, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.63964310999407192, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.62322524014023062, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.60869016167793533, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.59566297359135223, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test038()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data038)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data038[i].x), Tp(data038[i].y),
		     Tp(data038[i].z));
	const Tp f0 = data038[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data039[] = {
  { 1.0496381260348653, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.81764293493292906, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.75335466872844847, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.71164561925559466, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.68053628937360033, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.65569673681079776, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.63502851769783986, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.61734493217596587, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.60190608527527134, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.58821823078666136, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.57593489982955737, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test039()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data039)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data039[i].x), Tp(data039[i].y),
		     Tp(data039[i].z));
	const Tp f0 = data039[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data040[] = {
  { 1.0010773804561059, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.78704085774940524, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.72694593546890818, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.68778051696414155, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.65847894846240829, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.63502851769783986, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.61547970867038759, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.59872780615159971, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.58408284167715163, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.57108369182270280, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.55940634670030442, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test040()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data040)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data040[i].x), Tp(data040[i].y),
		     Tp(data040[i].z));
	const Tp f0 = data040[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data041[] = {
  { 0.96100258716950193, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.76120858506833289, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.70452798616652423, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.66745154859124545, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.63964310999407192, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.61734493217596587, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.59872780615159971, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.58275351513316576, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.56877272473777851, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.55635094059033952, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.54518253274835038, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test041()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data041)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data041[i].x), Tp(data041[i].y),
		     Tp(data041[i].z));
	const Tp f0 = data041[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data042[] = {
  { 0.92703733865068594, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.73890987409115538, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.68508581663343593, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.64976956169067801, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.62322524014023062, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.60190608527527134, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.58408284167715163, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.56877272473777851, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.55536036726979576, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.54343358905408068, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.53270219489643100, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test042()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data042)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data042[i].x), Tp(data042[i].y),
		     Tp(data042[i].z));
	const Tp f0 = data042[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data043[] = {
  { 0.89766801262539242, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.71933211800982655, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.66794776093151043, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.63414390207242399, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.60869016167793533, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.58821823078666136, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.57108369182270280, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.55635094059033952, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.54343358905408068, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.53193853352089682, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.52158879809832392, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test043()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data043)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data043[i].x), Tp(data043[i].y),
		     Tp(data043[i].z));
	const Tp f0 = data043[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data044[] = {
  { 0.87187320306151528, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.70191250965289886, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.65264594921422892, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.62016175377118499, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.59566297359135223, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.57593489982955737, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.55940634670030442, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.54518253274835038, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.53270219489643100, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.52158879809832392, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.51157686594443497, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test044()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data044)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data044[i].x), Tp(data044[i].y),
		     Tp(data044[i].z));
	const Tp f0 = data044[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data045[] = {
  { 1.4275819958837301, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.2330149084392663, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.1242019597966659, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.0496381260348648, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.99345882657961015, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.94870030559358076, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.91169627149800947, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.88028440588597712, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.85308543850096141, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.82916740276137080, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test045()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data045)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data045[i].x), Tp(data045[i].y),
		     Tp(data045[i].z));
	const Tp f0 = data045[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data046[] = {
  { 1.4275819958837301, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 1.0208044340604006, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.92298075280662473, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.86199580603507586, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.81764293493292894, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.78287236613419253, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.75435131823406698, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.73023111816567177, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.70937722302424855, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.69104258019551035, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.67470898845498029, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test046()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data046)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data046[i].x), Tp(data046[i].y),
		     Tp(data046[i].z));
	const Tp f0 = data046[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data047[] = {
  { 1.2330149084392663, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.92298075280662473, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.84239465585637685, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.79112004238115607, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.75335466872844847, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.72347894201494256, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.69880113472360528, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.67781309728639527, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.65958172419278016, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.64348841474473739, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.62910156611289236, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test047()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data047)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data047[i].x), Tp(data047[i].y),
		     Tp(data047[i].z));
	const Tp f0 = data047[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data048[] = {
  { 1.1242019597966659, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.86199580603507586, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.79112004238115607, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.74549815449740409, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.71164561925559466, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.68471920300228295, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.66238253969750771, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.64331926619024071, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.62671118199009868, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.61201373744646537, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.59884570404835646, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test048()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data048)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data048[i].x), Tp(data048[i].y),
		     Tp(data048[i].z));
	const Tp f0 = data048[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data049[] = {
  { 1.0496381260348648, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.81764293493292894, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.75335466872844847, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.71164561925559466, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.68053628937360033, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.65569673681079776, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.63502851769783975, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.61734493217596598, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.60190608527527134, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.58821823078666136, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.57593489982955737, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test049()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data049)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data049[i].x), Tp(data049[i].y),
		     Tp(data049[i].z));
	const Tp f0 = data049[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data050[] = {
  { 0.99345882657961015, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.78287236613419253, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.72347894201494256, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.68471920300228295, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.65569673681079776, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.63245553203367588, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.61307199249007838, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.59645536549652434, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.58192403020680306, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.56902223089043669, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.55742960089887439, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test050()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data050)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data050[i].x), Tp(data050[i].y),
		     Tp(data050[i].z));
	const Tp f0 = data050[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data051[] = {
  { 0.94870030559358076, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.75435131823406698, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.69880113472360528, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.66238253969750771, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.63502851769783975, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.61307199249007838, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.59472536040213797, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.57897288497739108, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.56517870558952510, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.55291701019257533, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.54188807268018191, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test051()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data051)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data051[i].x), Tp(data051[i].y),
		     Tp(data051[i].z));
	const Tp f0 = data051[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data052[] = {
  { 0.91169627149800947, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.73023111816567177, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.67781309728639527, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.64331926619024071, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.61734493217596598, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.59645536549652434, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.57897288497739108, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.56394264136062888, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.55076604484384151, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.53904174512410963, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.52848692227274208, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test052()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data052)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data052[i].x), Tp(data052[i].y),
		     Tp(data052[i].z));
	const Tp f0 = data052[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data053[] = {
  { 0.88028440588597712, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.70937722302424855, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.65958172419278016, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.62671118199009868, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.60190608527527134, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.58192403020680306, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.56517870558952510, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.55076604484384151, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.53811863288520578, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.52685563095765719, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.51670842626210278, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test053()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data053)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data053[i].x), Tp(data053[i].y),
		     Tp(data053[i].z));
	const Tp f0 = data053[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data054[] = {
  { 0.85308543850096141, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.69104258019551035, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.64348841474473739, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.61201373744646537, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.58821823078666136, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.56902223089043669, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.55291701019257533, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.53904174512410963, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.52685563095765719, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.51599537413745367, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.50620453698078471, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test054()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data054)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data054[i].x), Tp(data054[i].y),
		     Tp(data054[i].z));
	const Tp f0 = data054[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data055[] = {
  { 0.82916740276137080, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.67470898845498029, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.62910156611289236, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.59884570404835646, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.57593489982955737, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.55742960089887439, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.54188807268018191, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.52848692227274208, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.51670842626210278, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.50620453698078471, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.49672941328980508, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test055()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data055)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data055[i].x), Tp(data055[i].y),
		     Tp(data055[i].z));
	const Tp f0 = data055[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data056[] = {
  { 1.3512866125547232, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.1714200841467699, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.0704505140376155, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.0010773804561059, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.94870030559358098, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.90689968211710892, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.87229087401049776, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.84287517740629814, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.81737625838649519, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.79493082919542901, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test056()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data056)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data056[i].x), Tp(data056[i].y),
		     Tp(data056[i].z));
	const Tp f0 = data056[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data057[] = {
  { 1.3512866125547232, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 0.97681805230225316, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.88569392320354834, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.82864790333437521, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.78704085774940535, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.75435131823406698, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.72748955981916175, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.70473866151772913, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.68504332093857134, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.66770772721958893, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.65224864443716724, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test057()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data057)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data057[i].x), Tp(data057[i].y),
		     Tp(data057[i].z));
	const Tp f0 = data057[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data058[] = {
  { 1.1714200841467699, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.88569392320354834, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.81049698947675386, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.76244341904094814, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.72694593546890818, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.69880113472360517, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.67551085885604001, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.65567274799150732, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.63841773923685308, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.62316886995512544, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.60952307980176601, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test058()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data058)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data058[i].x), Tp(data058[i].y),
		     Tp(data058[i].z));
	const Tp f0 = data058[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data059[] = {
  { 1.0704505140376155, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.82864790333437521, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.76244341904094814, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.71963852032146258, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.68778051696414155, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.66238253969750771, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.64127491508093215, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.62323278253783665, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.60749353353456292, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.59354887082967089, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.58104248070136966, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test059()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data059)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data059[i].x), Tp(data059[i].y),
		     Tp(data059[i].z));
	const Tp f0 = data059[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data060[] = {
  { 1.0010773804561059, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.78704085774940535, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.72694593546890818, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.68778051696414155, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.65847894846240851, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.63502851769783986, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.61547970867038759, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.59872780615159971, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.58408284167715163, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.57108369182270280, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.55940634670030442, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test060()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data060)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data060[i].x), Tp(data060[i].y),
		     Tp(data060[i].z));
	const Tp f0 = data060[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data061[] = {
  { 0.94870030559358098, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.75435131823406698, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.69880113472360517, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.66238253969750771, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.63502851769783986, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.61307199249007827, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.59472536040213797, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.57897288497739108, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.56517870558952499, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.55291701019257533, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.54188807268018180, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test061()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data061)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data061[i].x), Tp(data061[i].y),
		     Tp(data061[i].z));
	const Tp f0 = data061[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data062[] = {
  { 0.90689968211710892, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.72748955981916175, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.67551085885604001, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.64127491508093215, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.61547970867038759, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.59472536040213797, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.57735026918962584, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.56240831115298973, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.54930614433405500, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.53764581003244094, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.52714680040717099, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test062()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data062)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data062[i].x), Tp(data062[i].y),
		     Tp(data062[i].z));
	const Tp f0 = data062[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data063[] = {
  { 0.87229087401049776, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.70473866151772913, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.65567274799150732, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.62323278253783665, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.59872780615159971, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.57897288497739108, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.56240831115298973, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.54814449099863138, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.53562273280540340, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.52446784593755991, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.51441507411147525, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test063()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data063)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data063[i].x), Tp(data063[i].y),
		     Tp(data063[i].z));
	const Tp f0 = data063[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data064[] = {
  { 0.84287517740629814, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.68504332093857134, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.63841773923685308, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.60749353353456292, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.58408284167715163, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.56517870558952499, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.54930614433405500, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.53562273280540340, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.52359877559829882, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.51287818313762856, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.50320944317733096, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test064()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data064)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data064[i].x), Tp(data064[i].y),
		     Tp(data064[i].z));
	const Tp f0 = data064[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data065[] = {
  { 0.81737625838649519, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.66770772721958893, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.62316886995512544, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.59354887082967089, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.57108369182270280, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.55291701019257533, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.53764581003244094, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.52446784593755991, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.51287818313762856, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.50253707775976431, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.49320437255200994, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test065()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data065)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data065[i].x), Tp(data065[i].y),
		     Tp(data065[i].z));
	const Tp f0 = data065[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data066[] = {
  { 0.79493082919542901, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.65224864443716724, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.60952307980176601, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.58104248070136966, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.55940634670030442, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.54188807268018180, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.52714680040717099, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.51441507411147525, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.50320944317733096, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.49320437255200994, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.48416959165156231, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test066()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data066)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data066[i].x), Tp(data066[i].y),
		     Tp(data066[i].z));
	const Tp f0 = data066[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data067[] = {
  { 1.2890413409541062, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.1208810036030068, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.0261974634293101, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.96100258716950193, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.91169627149800947, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.87229087401049776, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.83962595418135699, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.81183334631051385, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.78771900995297439, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.76647466240947604, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test067()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data067)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data067[i].x), Tp(data067[i].y),
		     Tp(data067[i].z));
	const Tp f0 = data067[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data068[] = {
  { 1.2890413409541062, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 0.94010347172525088, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.85439976540755636, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.80056531377001994, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.76120858506833289, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.73023111816567188, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.70473866151772901, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.68312063073973328, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.66438586965465496, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.64788015543296773, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.63314869458990386, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test068()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data068)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data068[i].x), Tp(data068[i].y),
		     Tp(data068[i].z));
	const Tp f0 = data068[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data069[] = {
  { 1.1208810036030068, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.85439976540755636, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.78357721761742349, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.73815953092629616, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.70452798616652423, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.67781309728639527, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.65567274799150732, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.63679018330139725, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.62034832921819572, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.60580411741367679, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.59277777794859710, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test069()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data069)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data069[i].x), Tp(data069[i].y),
		     Tp(data069[i].z));
	const Tp f0 = data069[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data070[] = {
  { 1.0261974634293101, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.80056531377001994, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.73815953092629616, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.69766475679190165, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.66745154859124545, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.64331926619024093, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.62323278253783665, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.60604138628959059, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.59102766766405268, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.57771288864136527, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.56576110137584690, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test070()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data070)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data070[i].x), Tp(data070[i].y),
		     Tp(data070[i].z));
	const Tp f0 = data070[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data071[] = {
  { 0.96100258716950193, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.76120858506833289, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.70452798616652423, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.66745154859124545, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.63964310999407192, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.61734493217596598, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.59872780615159971, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.58275351513316576, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.56877272473777851, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.55635094059033940, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.54518253274835027, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test071()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data071)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data071[i].x), Tp(data071[i].y),
		     Tp(data071[i].z));
	const Tp f0 = data071[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data072[] = {
  { 0.91169627149800947, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.73023111816567188, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.67781309728639527, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.64331926619024093, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.61734493217596598, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.59645536549652434, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.57897288497739108, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.56394264136062888, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.55076604484384140, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.53904174512410963, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.52848692227274208, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test072()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data072)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data072[i].x), Tp(data072[i].y),
		     Tp(data072[i].z));
	const Tp f0 = data072[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data073[] = {
  { 0.87229087401049776, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.70473866151772901, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.65567274799150732, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.62323278253783665, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.59872780615159971, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.57897288497739108, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.56240831115298984, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.54814449099863138, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.53562273280540329, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.52446784593756002, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.51441507411147525, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test073()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data073)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data073[i].x), Tp(data073[i].y),
		     Tp(data073[i].z));
	const Tp f0 = data073[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data074[] = {
  { 0.83962595418135699, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.68312063073973328, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.63679018330139725, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.60604138628959059, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.58275351513316576, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.56394264136062888, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.54814449099863138, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.53452248382484879, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.52255045738047989, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.51187461509367371, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.50224501365509533, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test074()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data074)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data074[i].x), Tp(data074[i].y),
		     Tp(data074[i].z));
	const Tp f0 = data074[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data075[] = {
  { 0.81183334631051385, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.66438586965465496, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.62034832921819572, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.59102766766405268, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.56877272473777851, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.55076604484384140, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.53562273280540329, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.52255045738047989, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.51105028762462490, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.50078638259762842, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.49152125928134865, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test075()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data075)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data075[i].x), Tp(data075[i].y),
		     Tp(data075[i].z));
	const Tp f0 = data075[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data076[] = {
  { 0.78771900995297439, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.64788015543296773, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.60580411741367679, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.57771288864136527, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.55635094059033940, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.53904174512410963, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.52446784593756002, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.51187461509367371, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.50078638259762842, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.49088267828931120, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.48193670613292211, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test076()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data076)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data076[i].x), Tp(data076[i].y),
		     Tp(data076[i].z));
	const Tp f0 = data076[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data077[] = {
  { 0.76647466240947604, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.63314869458990386, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.59277777794859710, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.56576110137584690, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.54518253274835027, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.52848692227274208, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.51441507411147525, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.50224501365509533, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.49152125928134865, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.48193670613292211, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.47327386617679934, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test077()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data077)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data077[i].x), Tp(data077[i].y),
		     Tp(data077[i].z));
	const Tp f0 = data077[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data078[] = {
  { 1.2367980868756721, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.0782578237498217, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.98876762511780558, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.92703733865068605, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.88028440588597712, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.84287517740629814, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.81183334631051374, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.78539816339744828, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.76244341904094792, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.74220623671119312, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test078()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data078)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data078[i].x), Tp(data078[i].y),
		     Tp(data078[i].z));
	const Tp f0 = data078[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data079[] = {
  { 1.2367980868756721, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 0.90871078312300901, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.82751823799033497, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.77637370387521154, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.73890987409115516, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.70937722302424844, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.68504332093857112, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.66438586965465496, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.64646710153810172, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.63066748113386040, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.61655598269269418, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test079()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data079)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data079[i].x), Tp(data079[i].y),
		     Tp(data079[i].z));
	const Tp f0 = data079[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data080[] = {
  { 1.0782578237498217, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.82751823799033497, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.76034599630094657, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.71714271048229961, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.68508581663343593, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.65958172419278005, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.63841773923685308, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.62034832921819583, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.60459978807807246, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.59065738572336635, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.57816086388034493, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test080()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data080)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data080[i].x), Tp(data080[i].y),
		     Tp(data080[i].z));
	const Tp f0 = data080[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data081[] = {
  { 0.98876762511780558, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.77637370387521154, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.71714271048229961, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.67859209091559147, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.64976956169067801, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.62671118199009868, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.60749353353456292, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.59102766766405268, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.57663392588994911, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.56385831736117586, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.55238198026313035, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test081()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data081)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data081[i].x), Tp(data081[i].y),
		     Tp(data081[i].z));
	const Tp f0 = data081[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data082[] = {
  { 0.92703733865068605, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.73890987409115516, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.68508581663343593, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.64976956169067801, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.62322524014023062, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.60190608527527134, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.58408284167715163, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.56877272473777851, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.55536036726979576, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.54343358905408068, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.53270219489643100, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test082()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data082)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data082[i].x), Tp(data082[i].y),
		     Tp(data082[i].z));
	const Tp f0 = data082[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data083[] = {
  { 0.88028440588597712, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.70937722302424844, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.65958172419278005, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.62671118199009868, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.60190608527527134, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.58192403020680306, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.56517870558952510, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.55076604484384151, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.53811863288520567, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.52685563095765719, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.51670842626210278, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test083()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data083)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data083[i].x), Tp(data083[i].y),
		     Tp(data083[i].z));
	const Tp f0 = data083[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data084[] = {
  { 0.84287517740629814, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.68504332093857112, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.63841773923685308, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.60749353353456292, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.58408284167715163, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.56517870558952510, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.54930614433405500, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.53562273280540329, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.52359877559829882, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.51287818313762856, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.50320944317733096, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test084()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data084)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data084[i].x), Tp(data084[i].y),
		     Tp(data084[i].z));
	const Tp f0 = data084[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data085[] = {
  { 0.81183334631051374, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.66438586965465496, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.62034832921819583, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.59102766766405268, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.56877272473777851, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.55076604484384151, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.53562273280540329, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.52255045738047989, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.51105028762462490, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.50078638259762831, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.49152125928134865, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test085()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data085)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data085[i].x), Tp(data085[i].y),
		     Tp(data085[i].z));
	const Tp f0 = data085[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data086[] = {
  { 0.78539816339744828, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.64646710153810172, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.60459978807807246, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.57663392588994911, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.55536036726979576, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.53811863288520567, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.52359877559829882, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.51105028762462490, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.50000000000000000, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.49012907173427356, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.48121182505960342, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test086()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data086)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data086[i].x), Tp(data086[i].y),
		     Tp(data086[i].z));
	const Tp f0 = data086[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data087[] = {
  { 0.76244341904094792, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.63066748113386040, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.59065738572336635, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.56385831736117586, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.54343358905408068, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.52685563095765719, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.51287818313762856, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.50078638259762831, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.49012907173427356, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.48060196634497671, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.47198951691035113, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test087()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data087)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data087[i].x), Tp(data087[i].y),
		     Tp(data087[i].z));
	const Tp f0 = data087[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data088[] = {
  { 0.74220623671119312, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.61655598269269418, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.57816086388034493, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.55238198026313035, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.53270219489643100, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.51670842626210278, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.50320944317733096, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.49152125928134865, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.48121182505960342, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.47198951691035113, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.46364760900080598, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test088()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data088)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data088[i].x), Tp(data088[i].y),
		     Tp(data088[i].z));
	const Tp f0 = data088[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data089[] = {
  { 1.1920055072756153, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.0415607119696204, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.95646049353590668, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.89766801262539275, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.85308543850096175, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.81737625838649519, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.78771900995297439, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.76244341904094792, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.74048048969306113, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.72110569309397077, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test089()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data089)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data089[i].x), Tp(data089[i].y),
		     Tp(data089[i].z));
	const Tp f0 = data089[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data090[] = {
  { 1.1920055072756153, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 0.88137358701954316, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.80401681679929116, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.75517182709724362, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.71933211800982655, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.69104258019551035, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.66770772721958893, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.64788015543296762, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.63066748113386040, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.61547970867038759, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.60190608527527134, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test090()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data090)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data090[i].x), Tp(data090[i].y),
		     Tp(data090[i].z));
	const Tp f0 = data090[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data091[] = {
  { 1.0415607119696204, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.80401681679929116, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.73995534521687278, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.69864990732153265, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.66794776093151043, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.64348841474473739, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.62316886995512544, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.60580411741367712, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.59065738572336635, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.57723812571556010, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.56520275672071618, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test091()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data091)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data091[i].x), Tp(data091[i].y),
		     Tp(data091[i].z));
	const Tp f0 = data091[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data092[] = {
  { 0.95646049353590668, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.75517182709724362, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.69864990732153265, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.66176802075998464, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.63414390207242388, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.61201373744646537, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.59354887082967089, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.57771288864136527, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.56385831736117598, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.55155230663550836, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.54049061640516349, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test092()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data092)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data092[i].x), Tp(data092[i].y),
		     Tp(data092[i].z));
	const Tp f0 = data092[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data093[] = {
  { 0.89766801262539275, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.71933211800982655, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.66794776093151043, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.63414390207242388, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.60869016167793544, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.58821823078666113, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.57108369182270280, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.55635094059033940, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.54343358905408068, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.53193853352089682, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.52158879809832392, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test093()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data093)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data093[i].x), Tp(data093[i].y),
		     Tp(data093[i].z));
	const Tp f0 = data093[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data094[] = {
  { 0.85308543850096175, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.69104258019551035, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.64348841474473739, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.61201373744646537, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.58821823078666113, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.56902223089043669, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.55291701019257533, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.53904174512410963, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.52685563095765719, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.51599537413745367, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.50620453698078471, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test094()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data094)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data094[i].x), Tp(data094[i].y),
		     Tp(data094[i].z));
	const Tp f0 = data094[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data095[] = {
  { 0.81737625838649519, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.66770772721958893, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.62316886995512544, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.59354887082967089, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.57108369182270280, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.55291701019257533, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.53764581003244094, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.52446784593755991, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.51287818313762856, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.50253707775976431, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.49320437255200994, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test095()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data095)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data095[i].x), Tp(data095[i].y),
		     Tp(data095[i].z));
	const Tp f0 = data095[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data096[] = {
  { 0.78771900995297439, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.64788015543296762, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.60580411741367712, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.57771288864136527, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.55635094059033940, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.53904174512410963, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.52446784593755991, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.51187461509367371, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.50078638259762831, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.49088267828931120, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.48193670613292211, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test096()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data096)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data096[i].x), Tp(data096[i].y),
		     Tp(data096[i].z));
	const Tp f0 = data096[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data097[] = {
  { 0.76244341904094792, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.63066748113386040, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.59065738572336635, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.56385831736117598, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.54343358905408068, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.52685563095765719, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.51287818313762856, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.50078638259762831, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.49012907173427356, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.48060196634497671, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.47198951691035113, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test097()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data097)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data097[i].x), Tp(data097[i].y),
		     Tp(data097[i].z));
	const Tp f0 = data097[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data098[] = {
  { 0.74048048969306113, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.61547970867038759, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.57723812571556010, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.55155230663550836, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.53193853352089682, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.51599537413745367, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.50253707775976431, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.49088267828931120, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.48060196634497671, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.47140452079103173, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.46308444346663841, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test098()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data098)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data098[i].x), Tp(data098[i].y),
		     Tp(data098[i].z));
	const Tp f0 = data098[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data099[] = {
  { 0.72110569309397077, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.60190608527527134, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.56520275672071618, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.54049061640516349, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.52158879809832392, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.50620453698078471, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.49320437255200994, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.48193670613292211, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.47198951691035113, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.46308444346663841, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.45502399772879365, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test099()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data099)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data099[i].x), Tp(data099[i].y),
		     Tp(data099[i].z));
	const Tp f0 = data099[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000.
testcase_ellint_rf<double> data100[] = {
  { 1.1529578435405214, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.0094529099892116, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.92813060970221095, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.87187320306151528, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.82916740276137080, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.79493082919542879, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.76647466240947604, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.74220623671119312, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.72110569309397077, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.70248147310407272, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test100()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data100)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data100[i].x), Tp(data100[i].y),
		     Tp(data100[i].z));
	const Tp f0 = data100[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000.
testcase_ellint_rf<double> data101[] = {
  { 1.1529578435405214, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000 },
  { 0.85722388169844066, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.78318403980915052, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.73633678046885453, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.70191250965289886, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.67470898845498029, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.65224864443716724, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.63314869458990386, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.61655598269269418, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.60190608527527134, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.58880582378346324, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test101()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data101)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data101[i].x), Tp(data101[i].y),
		     Tp(data101[i].z));
	const Tp f0 = data101[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000.
testcase_ellint_rf<double> data102[] = {
  { 1.0094529099892116, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000 },
  { 0.78318403980915052, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.72181773758940504, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.68216465254074632, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.65264594921422892, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.62910156611289225, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.60952307980176601, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.59277777794859710, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.57816086388034515, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.56520275672071618, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.55357435889704532, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test102()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data102)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data102[i].x), Tp(data102[i].y),
		     Tp(data102[i].z));
	const Tp f0 = data102[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000.
testcase_ellint_rf<double> data103[] = {
  { 0.92813060970221095, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000 },
  { 0.73633678046885453, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.68216465254074632, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.64673752632340953, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.62016175377118499, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.59884570404835646, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.58104248070136943, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.56576110137584690, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.55238198026313035, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.54049061640516349, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.52979548043855929, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test103()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data103)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data103[i].x), Tp(data103[i].y),
		     Tp(data103[i].z));
	const Tp f0 = data103[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000.
testcase_ellint_rf<double> data104[] = {
  { 0.87187320306151528, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000 },
  { 0.70191250965289886, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.65264594921422892, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.62016175377118499, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.59566297359135223, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.57593489982955737, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.55940634670030442, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.54518253274835038, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.53270219489643089, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.52158879809832392, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.51157686594443497, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test104()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data104)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data104[i].x), Tp(data104[i].y),
		     Tp(data104[i].z));
	const Tp f0 = data104[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000.
testcase_ellint_rf<double> data105[] = {
  { 0.82916740276137080, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000 },
  { 0.67470898845498029, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.62910156611289225, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.59884570404835646, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.57593489982955737, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.55742960089887439, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.54188807268018191, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.52848692227274208, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.51670842626210278, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.50620453698078471, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.49672941328980508, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test105()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data105)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data105[i].x), Tp(data105[i].y),
		     Tp(data105[i].z));
	const Tp f0 = data105[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000.
testcase_ellint_rf<double> data106[] = {
  { 0.79493082919542879, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000 },
  { 0.65224864443716724, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.60952307980176601, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.58104248070136943, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.55940634670030442, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.54188807268018191, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.52714680040717099, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.51441507411147525, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.50320944317733096, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.49320437255200994, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.48416959165156231, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test106()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data106)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data106[i].x), Tp(data106[i].y),
		     Tp(data106[i].z));
	const Tp f0 = data106[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000.
testcase_ellint_rf<double> data107[] = {
  { 0.76647466240947604, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000 },
  { 0.63314869458990386, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.59277777794859710, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.56576110137584690, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.54518253274835038, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.52848692227274208, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.51441507411147525, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.50224501365509533, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.49152125928134865, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.48193670613292211, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.47327386617679934, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test107()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data107)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data107[i].x), Tp(data107[i].y),
		     Tp(data107[i].z));
	const Tp f0 = data107[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000.
testcase_ellint_rf<double> data108[] = {
  { 0.74220623671119312, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000 },
  { 0.61655598269269418, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.57816086388034515, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.55238198026313035, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.53270219489643089, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.51670842626210278, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.50320944317733096, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.49152125928134865, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.48121182505960353, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.47198951691035113, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.46364760900080598, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test108()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data108)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data108[i].x), Tp(data108[i].y),
		     Tp(data108[i].z));
	const Tp f0 = data108[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000.
testcase_ellint_rf<double> data109[] = {
  { 0.72110569309397077, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000 },
  { 0.60190608527527134, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.56520275672071618, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.54049061640516349, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.52158879809832392, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.50620453698078471, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.49320437255200994, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.48193670613292211, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.47198951691035113, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.46308444346663841, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.45502399772879365, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test109()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data109)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data109[i].x), Tp(data109[i].y),
		     Tp(data109[i].z));
	const Tp f0 = data109[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000.
testcase_ellint_rf<double> data110[] = {
  { 0.70248147310407272, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000 },
  { 0.58880582378346324, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.55357435889704532, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.52979548043855929, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.51157686594443497, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.49672941328980508, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.48416959165156231, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.47327386617679934, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.46364760900080598, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.45502399772879365, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.44721359549995793, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test110()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data110)
			   / sizeof(testcase_ellint_rf<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rf(Tp(data110[i].x), Tp(data110[i].y),
		     Tp(data110[i].z));
	const Tp f0 = data110[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

int
main()
{
  test001<double>();
  test002<double>();
  test003<double>();
  test004<double>();
  test005<double>();
  test006<double>();
  test007<double>();
  test008<double>();
  test009<double>();
  test010<double>();
  test011<double>();
  test012<double>();
  test013<double>();
  test014<double>();
  test015<double>();
  test016<double>();
  test017<double>();
  test018<double>();
  test019<double>();
  test020<double>();
  test021<double>();
  test022<double>();
  test023<double>();
  test024<double>();
  test025<double>();
  test026<double>();
  test027<double>();
  test028<double>();
  test029<double>();
  test030<double>();
  test031<double>();
  test032<double>();
  test033<double>();
  test034<double>();
  test035<double>();
  test036<double>();
  test037<double>();
  test038<double>();
  test039<double>();
  test040<double>();
  test041<double>();
  test042<double>();
  test043<double>();
  test044<double>();
  test045<double>();
  test046<double>();
  test047<double>();
  test048<double>();
  test049<double>();
  test050<double>();
  test051<double>();
  test052<double>();
  test053<double>();
  test054<double>();
  test055<double>();
  test056<double>();
  test057<double>();
  test058<double>();
  test059<double>();
  test060<double>();
  test061<double>();
  test062<double>();
  test063<double>();
  test064<double>();
  test065<double>();
  test066<double>();
  test067<double>();
  test068<double>();
  test069<double>();
  test070<double>();
  test071<double>();
  test072<double>();
  test073<double>();
  test074<double>();
  test075<double>();
  test076<double>();
  test077<double>();
  test078<double>();
  test079<double>();
  test080<double>();
  test081<double>();
  test082<double>();
  test083<double>();
  test084<double>();
  test085<double>();
  test086<double>();
  test087<double>();
  test088<double>();
  test089<double>();
  test090<double>();
  test091<double>();
  test092<double>();
  test093<double>();
  test094<double>();
  test095<double>();
  test096<double>();
  test097<double>();
  test098<double>();
  test099<double>();
  test100<double>();
  test101<double>();
  test102<double>();
  test103<double>();
  test104<double>();
  test105<double>();
  test106<double>();
  test107<double>();
  test108<double>();
  test109<double>();
  test110<double>();
  return 0;
}
