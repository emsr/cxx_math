// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  heuman_lambda
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for k=-0.90000000000000002.
// max(|f - f_GSL|): 4.5519144009631418e-15
// max(|f - f_GSL| / |f_GSL|): 5.0108632207628440e-15
const testcase_heuman_lambda<double>
data001[9] =
{
  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },
  { 0.12982697580745808, -0.90000000000000002, 0.17453292519943295 },
  { 0.25752498383895317, -0.90000000000000002, 0.34906585039886590 },
  { 0.38116720359439771, -0.90000000000000002, 0.52359877559829882 },
  { 0.49922731621729377, -0.90000000000000002, 0.69813170079773179 },
  { 0.61076532928819771, -0.90000000000000002, 0.87266462599716477 },
  { 0.71558223929052334, -0.90000000000000002, 1.0471975511965976 },
  { 0.81431191434980899, -0.90000000000000002, 1.2217304763960306 },
  { 0.90840923019051545, -0.90000000000000002, 1.3962634015954636 },
};
const double toler001 = 5.0000000000000039e-13;

// Test data for k=-0.80000000000000004.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 2.6468222272894167e-16
const testcase_heuman_lambda<double>
data002[9] =
{
  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },
  { 0.14126742816292986, -0.80000000000000004, 0.17453292519943295 },
  { 0.27928713607126193, -0.80000000000000004, 0.34906585039886590 },
  { 0.41105302042041136, -0.80000000000000004, 0.52359877559829882 },
  { 0.53405685578205797, -0.80000000000000004, 0.69813170079773179 },
  { 0.64656998728035819, -0.80000000000000004, 0.87266462599716477 },
  { 0.74794690182714274, -0.80000000000000004, 1.0471975511965976 },
  { 0.83891015662364632, -0.80000000000000004, 1.2217304763960306 },
  { 0.92171087660102025, -0.80000000000000004, 1.3962634015954636 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for k=-0.69999999999999996.
// max(|f - f_GSL|): 2.3314683517128287e-15
// max(|f - f_GSL| / |f_GSL|): 2.4986914608470095e-15
const testcase_heuman_lambda<double>
data003[9] =
{
  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },
  { 0.14995891526474947, -0.69999999999999996, 0.17453292519943295 },
  { 0.29594267142594466, -0.69999999999999996, 0.34906585039886590 },
  { 0.43420836208514768, -0.69999999999999996, 0.52359877559829882 },
  { 0.56150272604917162, -0.69999999999999996, 0.69813170079773179 },
  { 0.67537565506518926, -0.69999999999999996, 0.87266462599716477 },
  { 0.77458446996088093, -0.69999999999999996, 1.0471975511965976 },
  { 0.85959635233652065, -0.69999999999999996, 1.2217304763960306 },
  { 0.93307572713379527, -0.69999999999999996, 1.3962634015954636 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for k=-0.59999999999999998.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 9.4155496136245940e-16
const testcase_heuman_lambda<double>
data004[9] =
{
  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },
  { 0.15681433121910107, -0.59999999999999998, 0.17453292519943295 },
  { 0.30916651305959242, -0.59999999999999998, 0.34906585039886590 },
  { 0.45280289551350805, -0.59999999999999998, 0.52359877559829882 },
  { 0.58391106083307376, -0.59999999999999998, 0.69813170079773179 },
  { 0.69941589446161700, -0.59999999999999998, 0.87266462599716477 },
  { 0.79740965737703906, -0.59999999999999998, 1.0471975511965976 },
  { 0.87781712551231406, -0.59999999999999998, 1.2217304763960306 },
  { 0.94331022207657789, -0.59999999999999998, 1.3962634015954636 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for k=-0.50000000000000000.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.9669123877958787e-16
const testcase_heuman_lambda<double>
data005[9] =
{
  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },
  { 0.16224731278788521, -0.50000000000000000, 0.17453292519943295 },
  { 0.31970697450541935, -0.50000000000000000, 0.34906585039886590 },
  { 0.46777719771323173, -0.50000000000000000, 0.52359877559829882 },
  { 0.60224413068989857, -0.50000000000000000, 0.69813170079773179 },
  { 0.71953336405253487, -0.50000000000000000, 0.87266462599716477 },
  { 0.81709279141177393, -0.50000000000000000, 1.0471975511965976 },
  { 0.89409511418245902, -0.50000000000000000, 1.2217304763960306 },
  { 0.95275069129312706, -0.50000000000000000, 1.3962634015954636 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for k=-0.40000000000000002.
// max(|f - f_GSL|): 9.9920072216264089e-16
// max(|f - f_GSL| / |f_GSL|): 1.0391671569585280e-15
const testcase_heuman_lambda<double>
data006[9] =
{
  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },
  { 0.16648761753143587, -0.40000000000000002, 0.17453292519943295 },
  { 0.32797372506471695, -0.40000000000000002, 0.34906585039886590 },
  { 0.47962710106777490, -0.40000000000000002, 0.52359877559829882 },
  { 0.61696383438197122, -0.40000000000000002, 0.69813170079773179 },
  { 0.73605040181836656, -0.40000000000000002, 0.87266462599716477 },
  { 0.83379631920891617, -0.40000000000000002, 1.0471975511965976 },
  { 0.90854324658368646, -0.40000000000000002, 1.2217304763960306 },
  { 0.96153993654604863, -0.40000000000000002, 1.3962634015954636 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for k=-0.30000000000000004.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8319160169398432e-15
const testcase_heuman_lambda<double>
data007[9] =
{
  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },
  { 0.16967535365409961, -0.30000000000000004, 0.17453292519943295 },
  { 0.33421304275802655, -0.30000000000000004, 0.34906585039886590 },
  { 0.48863774824317452, -0.30000000000000004, 0.52359877559829882 },
  { 0.62829853439172034, -0.30000000000000004, 0.69813170079773179 },
  { 0.74903637090112496, -0.30000000000000004, 0.87266462599716477 },
  { 0.84738791409536607, -0.30000000000000004, 1.0471975511965976 },
  { 0.92096562168315166, -0.30000000000000004, 1.2217304763960306 },
  { 0.96967154769878450, -0.30000000000000004, 1.3962634015954636 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for k=-0.19999999999999996.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8183393452528993e-15
const testcase_heuman_lambda<double>
data008[9] =
{
  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },
  { 0.17189899540184925, -0.19999999999999996, 0.17453292519943295 },
  { 0.33857841822753937, -0.19999999999999996, 0.34906585039886590 },
  { 0.49497858604892686, -0.19999999999999996, 0.52359877559829882 },
  { 0.63635578869585696, -0.19999999999999996, 0.69813170079773179 },
  { 0.75843245554643557, -0.19999999999999996, 0.87266462599716477 },
  { 0.85754687135875229, -0.19999999999999996, 1.0471975511965976 },
  { 0.93084918973014774, -0.19999999999999996, 1.2217304763960306 },
  { 0.97691162215553884, -0.19999999999999996, 1.3962634015954636 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for k=-0.099999999999999978.
// max(|f - f_GSL|): 1.6691782437222639e-08
// max(|f - f_GSL| / |f_GSL|): 9.0398653283132016e-16
const testcase_heuman_lambda<double>
data009[10] =
{
  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },
  { 0.17321327365951394, -0.099999999999999978, 0.17453292519943295 },
  { 0.34116376673499382, -0.099999999999999978, 0.34906585039886590 },
  { 0.49874868897634334, -0.099999999999999978, 0.52359877559829882 },
  { 0.64118044075414027, -0.099999999999999978, 0.69813170079773179 },
  { 0.76413249518266968, -0.099999999999999978, 0.87266462599716477 },
  { 0.86387230276439919, -0.099999999999999978, 1.0471975511965976 },
  { 0.93738180823668094, -0.099999999999999978, 1.2217304763960306 },
  { 0.98251288868022923, -0.099999999999999978, 1.3962634015954636 },
  { -3.0654584456528391e-18, -0.099999999999999978, 1.5707963267948966 },
};
const double toler009 = 2.5000000000000020e-13;
//  Failure at k=0.0000000000000000 phi=1.5707963267948966 f1=nan f2=nan

// Test data for k=0.0000000000000000.
// max(|f - f_GSL|): 1.1102230246251565e-15
// max(|f - f_GSL| / |f_GSL|): 1.1273500043326667e-15
const testcase_heuman_lambda<double>
data010[9] =
{
  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },
  { 0.17364817766693033, 0.0000000000000000, 0.17453292519943295 },
  { 0.34202014332566871, 0.0000000000000000, 0.34906585039886590 },
  { 0.49999999999999994, 0.0000000000000000, 0.52359877559829882 },
  { 0.64278760968653925, 0.0000000000000000, 0.69813170079773179 },
  { 0.76604444311897801, 0.0000000000000000, 0.87266462599716477 },
  { 0.86602540378443860, 0.0000000000000000, 1.0471975511965976 },
  { 0.93969262078590832, 0.0000000000000000, 1.2217304763960306 },
  { 0.98480775301220802, 0.0000000000000000, 1.3962634015954636 },
};
const double toler010 = 2.5000000000000020e-13;
//  Failure at k=0.10000000000000009 phi=1.5707963267948966 f1=nan f2=6.9934954516088593e-07

// Test data for k=0.10000000000000009.
// max(|f - f_GSL|): 5.5511151231257827e-16
// max(|f - f_GSL| / |f_GSL|): 5.6499158301957510e-16
const testcase_heuman_lambda<double>
data011[9] =
{
  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },
  { 0.17321327365951394, 0.10000000000000009, 0.17453292519943295 },
  { 0.34116376673499382, 0.10000000000000009, 0.34906585039886590 },
  { 0.49874868897634334, 0.10000000000000009, 0.52359877559829882 },
  { 0.64118044075414027, 0.10000000000000009, 0.69813170079773179 },
  { 0.76413249518266968, 0.10000000000000009, 0.87266462599716477 },
  { 0.86387230276439919, 0.10000000000000009, 1.0471975511965976 },
  { 0.93738180823668094, 0.10000000000000009, 1.2217304763960306 },
  { 0.98251288868022923, 0.10000000000000009, 1.3962634015954636 },
};
const double toler011 = 2.5000000000000020e-13;

// Test data for k=0.19999999999999996.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8183393452528993e-15
const testcase_heuman_lambda<double>
data012[9] =
{
  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },
  { 0.17189899540184925, 0.19999999999999996, 0.17453292519943295 },
  { 0.33857841822753937, 0.19999999999999996, 0.34906585039886590 },
  { 0.49497858604892686, 0.19999999999999996, 0.52359877559829882 },
  { 0.63635578869585696, 0.19999999999999996, 0.69813170079773179 },
  { 0.75843245554643557, 0.19999999999999996, 0.87266462599716477 },
  { 0.85754687135875229, 0.19999999999999996, 1.0471975511965976 },
  { 0.93084918973014774, 0.19999999999999996, 1.2217304763960306 },
  { 0.97691162215553884, 0.19999999999999996, 1.3962634015954636 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for k=0.30000000000000004.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.8319160169398432e-15
const testcase_heuman_lambda<double>
data013[9] =
{
  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },
  { 0.16967535365409961, 0.30000000000000004, 0.17453292519943295 },
  { 0.33421304275802655, 0.30000000000000004, 0.34906585039886590 },
  { 0.48863774824317452, 0.30000000000000004, 0.52359877559829882 },
  { 0.62829853439172034, 0.30000000000000004, 0.69813170079773179 },
  { 0.74903637090112496, 0.30000000000000004, 0.87266462599716477 },
  { 0.84738791409536607, 0.30000000000000004, 1.0471975511965976 },
  { 0.92096562168315166, 0.30000000000000004, 1.2217304763960306 },
  { 0.96967154769878450, 0.30000000000000004, 1.3962634015954636 },
};
const double toler013 = 2.5000000000000020e-13;

// Test data for k=0.39999999999999991.
// max(|f - f_GSL|): 6.6613381477509392e-16
// max(|f - f_GSL| / |f_GSL|): 6.9277810463901876e-16
const testcase_heuman_lambda<double>
data014[9] =
{
  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },
  { 0.16648761753143587, 0.39999999999999991, 0.17453292519943295 },
  { 0.32797372506471695, 0.39999999999999991, 0.34906585039886590 },
  { 0.47962710106777490, 0.39999999999999991, 0.52359877559829882 },
  { 0.61696383438197122, 0.39999999999999991, 0.69813170079773179 },
  { 0.73605040181836656, 0.39999999999999991, 0.87266462599716477 },
  { 0.83379631920891617, 0.39999999999999991, 1.0471975511965976 },
  { 0.90854324658368646, 0.39999999999999991, 1.2217304763960306 },
  { 0.96153993654604863, 0.39999999999999991, 1.3962634015954636 },
};
const double toler014 = 2.5000000000000020e-13;

// Test data for k=0.50000000000000000.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 4.9669123877958787e-16
const testcase_heuman_lambda<double>
data015[9] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.16224731278788521, 0.50000000000000000, 0.17453292519943295 },
  { 0.31970697450541935, 0.50000000000000000, 0.34906585039886590 },
  { 0.46777719771323173, 0.50000000000000000, 0.52359877559829882 },
  { 0.60224413068989857, 0.50000000000000000, 0.69813170079773179 },
  { 0.71953336405253487, 0.50000000000000000, 0.87266462599716477 },
  { 0.81709279141177393, 0.50000000000000000, 1.0471975511965976 },
  { 0.89409511418245902, 0.50000000000000000, 1.2217304763960306 },
  { 0.95275069129312706, 0.50000000000000000, 1.3962634015954636 },
};
const double toler015 = 2.5000000000000020e-13;

// Test data for k=0.60000000000000009.
// max(|f - f_GSL|): 7.7715611723760958e-16
// max(|f - f_GSL| / |f_GSL|): 8.2386059119215188e-16
const testcase_heuman_lambda<double>
data016[9] =
{
  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },
  { 0.15681433121910107, 0.60000000000000009, 0.17453292519943295 },
  { 0.30916651305959236, 0.60000000000000009, 0.34906585039886590 },
  { 0.45280289551350805, 0.60000000000000009, 0.52359877559829882 },
  { 0.58391106083307376, 0.60000000000000009, 0.69813170079773179 },
  { 0.69941589446161700, 0.60000000000000009, 0.87266462599716477 },
  { 0.79740965737703895, 0.60000000000000009, 1.0471975511965976 },
  { 0.87781712551231406, 0.60000000000000009, 1.2217304763960306 },
  { 0.94331022207657789, 0.60000000000000009, 1.3962634015954636 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for k=0.69999999999999996.
// max(|f - f_GSL|): 2.3314683517128287e-15
// max(|f - f_GSL| / |f_GSL|): 2.4986914608470095e-15
const testcase_heuman_lambda<double>
data017[9] =
{
  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },
  { 0.14995891526474947, 0.69999999999999996, 0.17453292519943295 },
  { 0.29594267142594466, 0.69999999999999996, 0.34906585039886590 },
  { 0.43420836208514768, 0.69999999999999996, 0.52359877559829882 },
  { 0.56150272604917162, 0.69999999999999996, 0.69813170079773179 },
  { 0.67537565506518926, 0.69999999999999996, 0.87266462599716477 },
  { 0.77458446996088093, 0.69999999999999996, 1.0471975511965976 },
  { 0.85959635233652065, 0.69999999999999996, 1.2217304763960306 },
  { 0.93307572713379527, 0.69999999999999996, 1.3962634015954636 },
};
const double toler017 = 2.5000000000000020e-13;

// Test data for k=0.80000000000000004.
// max(|f - f_GSL|): 2.2204460492503131e-16
// max(|f - f_GSL| / |f_GSL|): 2.6468222272894167e-16
const testcase_heuman_lambda<double>
data018[9] =
{
  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },
  { 0.14126742816292986, 0.80000000000000004, 0.17453292519943295 },
  { 0.27928713607126193, 0.80000000000000004, 0.34906585039886590 },
  { 0.41105302042041136, 0.80000000000000004, 0.52359877559829882 },
  { 0.53405685578205797, 0.80000000000000004, 0.69813170079773179 },
  { 0.64656998728035819, 0.80000000000000004, 0.87266462599716477 },
  { 0.74794690182714274, 0.80000000000000004, 1.0471975511965976 },
  { 0.83891015662364632, 0.80000000000000004, 1.2217304763960306 },
  { 0.92171087660102025, 0.80000000000000004, 1.3962634015954636 },
};
const double toler018 = 2.5000000000000020e-13;

// Test data for k=0.89999999999999991.
// max(|f - f_GSL|): 5.3290705182007514e-15
// max(|f - f_GSL| / |f_GSL|): 5.8663764535760125e-15
const testcase_heuman_lambda<double>
data019[9] =
{
  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },
  { 0.12982697580745811, 0.89999999999999991, 0.17453292519943295 },
  { 0.25752498383895323, 0.89999999999999991, 0.34906585039886590 },
  { 0.38116720359439776, 0.89999999999999991, 0.52359877559829882 },
  { 0.49922731621729383, 0.89999999999999991, 0.69813170079773179 },
  { 0.61076532928819782, 0.89999999999999991, 0.87266462599716477 },
  { 0.71558223929052334, 0.89999999999999991, 1.0471975511965976 },
  { 0.81431191434980899, 0.89999999999999991, 1.2217304763960306 },
  { 0.90840923019051545, 0.89999999999999991, 1.3962634015954636 },
};
const double toler019 = 5.0000000000000039e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_heuman_lambda<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::heuman_lambda(data[i].k, data[i].phi);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  return 0;
}
