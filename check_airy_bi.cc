// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  airy_bi

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 1.1920928955078125e-07
// max(|f - f_GSL| / |f_GSL|): 1.3892218807298919e-13
// mean(f - f_GSL): -3.3092688493375604e-09
// variance(f - f_GSL): 3.4421587921399882e-16
// stddev(f - f_GSL): 1.8553055791809574e-08
const testcase_airy_bi<double>
data001[41] =
{
  { -0.31467982964383845, -10.000000000000000 },
  { 0.037785432489467467, -9.5000000000000000 },
  { 0.32494732345524480, -9.0000000000000000 },
  { 0.0077544364476580746, -8.5000000000000000 },
  { -0.33125158075113792, -8.0000000000000000 },
  { -0.11246348507649087, -7.5000000000000000 },
  { 0.29376207185441372, -7.0000000000000000 },
  { 0.26101265763648318, -6.5000000000000000 },
  { -0.14669837667055663, -6.0000000000000000 },
  { -0.36781345391571185, -5.5000000000000000 },
  { -0.13836913490160088, -5.0000000000000000 },
  { 0.25387265769693296, -4.5000000000000000 },
  { 0.39223470570699931, -4.0000000000000000 },
  { 0.16893983748105870, -3.5000000000000000 },
  { -0.19828962637492650, -3.0000000000000000 },
  { -0.43242247184070520, -2.5000000000000000 },
  { -0.41230258795639835, -2.0000000000000000 },
  { -0.19178486115704119, -1.5000000000000000 },
  { 0.10399738949694459, -1.0000000000000000 },
  { 0.38035265975105381, -0.50000000000000000 },
  { 0.61492662744600068, 0.0000000000000000 },
  { 0.85427704310315555, 0.50000000000000000 },
  { 1.2074235949528713, 1.0000000000000000 },
  { 1.8789415037478949, 1.5000000000000000 },
  { 3.2980949999782148, 2.0000000000000000 },
  { 6.4816607384605804, 2.5000000000000000 },
  { 14.037328963730236, 3.0000000000000000 },
  { 33.055506754611478, 3.5000000000000000 },
  { 83.847071408468111, 4.0000000000000000 },
  { 227.58808183559950, 4.5000000000000000 },
  { 657.79204417117160, 5.0000000000000000 },
  { 2016.5800386595315, 5.5000000000000000 },
  { 6536.4461048098583, 6.0000000000000000 },
  { 22340.607718396990, 6.5000000000000000 },
  { 80327.790709430337, 7.0000000000000000 },
  { 303229.61511253362, 7.5000000000000000 },
  { 1199586.0041244617, 8.0000000000000000 },
  { 4965319.5414712988, 8.5000000000000000 },
  { 21472868.891435351, 9.0000000000000000 },
  { 96892265.580451161, 9.5000000000000000 },
  { 455641153.54822654, 10.000000000000000 },
};
const double toler001 = 1.0000000000000006e-11;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_airy_bi<Tp> (&data)[Num], Tp toler)
  {
    typedef Tp Val;
    bool test __attribute__((unused)) = true;
    const Val eps = std::numeric_limits<Val>::epsilon();
    Val max_abs_diff = -Val(1);
    Val max_abs_frac = -Val(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::airy_bi(data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Val(10) * eps
	 && std::abs(f) > Val(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
