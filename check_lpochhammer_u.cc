// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  lpochhammer_u
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 1.0450158816308938e-14
const testcase_lpochhammer_u<double>
data001[20] =
{
  { -0.098271836421812128, 1.0000000000000000, 0.25000000000000000 },
  { -0.12078223763524422, 1.0000000000000000, 0.50000000000000000 },
  { -0.084401121020484873, 1.0000000000000000, 0.75000000000000000 },
  { -0.0000000000000000, 1.0000000000000000, 1.0000000000000000 },
  { 0.12487171489239747, 1.0000000000000000, 1.2500000000000000 },
  { 0.28468287047292001, 1.0000000000000000, 1.5000000000000000 },
  { 0.47521466691493863, 1.0000000000000000, 1.7500000000000000 },
  { 0.69314718055994529, 1.0000000000000000, 2.0000000000000000 },
  { 0.93580193110872578, 1.0000000000000000, 2.2500000000000000 },
  { 1.2009736023470747, 1.0000000000000000, 2.5000000000000000 },
  { 1.4868155785934178, 1.0000000000000000, 2.7500000000000000 },
  { 1.7917594692280550, 1.0000000000000000, 3.0000000000000000 },
  { 2.1144569274503726, 1.0000000000000000, 3.2500000000000000 },
  { 2.4537365708424428, 1.0000000000000000, 3.5000000000000000 },
  { 2.8085714185757369, 1.0000000000000000, 3.7500000000000000 },
  { 3.1780538303479458, 1.0000000000000000, 4.0000000000000000 },
  { 3.5613759103866971, 1.0000000000000000, 4.2500000000000000 },
  { 3.9578139676187161, 1.0000000000000000, 4.5000000000000000 },
  { 4.3667160366222877, 1.0000000000000000, 4.7500000000000000 },
  { 4.7874917427820458, 1.0000000000000000, 5.0000000000000000 },
};
const double toler001 = 1.0000000000000008e-12;

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 1.7763568394002505e-15
// max(|f - f_GSL| / |f_GSL|): 7.0015906536215959e-15
const testcase_lpochhammer_u<double>
data002[20] =
{
  { 0.12487171489239747, 2.0000000000000000, 0.25000000000000000 },
  { 0.28468287047292001, 2.0000000000000000, 0.50000000000000000 },
  { 0.47521466691493863, 2.0000000000000000, 0.75000000000000000 },
  { 0.69314718055994529, 2.0000000000000000, 1.0000000000000000 },
  { 0.93580193110872578, 2.0000000000000000, 1.2500000000000000 },
  { 1.2009736023470747, 2.0000000000000000, 1.5000000000000000 },
  { 1.4868155785934178, 2.0000000000000000, 1.7500000000000000 },
  { 1.7917594692280550, 2.0000000000000000, 2.0000000000000000 },
  { 2.1144569274503726, 2.0000000000000000, 2.2500000000000000 },
  { 2.4537365708424428, 2.0000000000000000, 2.5000000000000000 },
  { 2.8085714185757369, 2.0000000000000000, 2.7500000000000000 },
  { 3.1780538303479458, 2.0000000000000000, 3.0000000000000000 },
  { 3.5613759103866971, 2.0000000000000000, 3.2500000000000000 },
  { 3.9578139676187161, 2.0000000000000000, 3.5000000000000000 },
  { 4.3667160366222877, 2.0000000000000000, 3.7500000000000000 },
  { 4.7874917427820458, 2.0000000000000000, 4.0000000000000000 },
  { 5.2196039869902302, 2.0000000000000000, 4.2500000000000000 },
  { 5.6625620598571418, 2.0000000000000000, 4.5000000000000000 },
  { 6.1159158914315457, 2.0000000000000000, 4.7500000000000000 },
  { 6.5792512120101012, 2.0000000000000000, 5.0000000000000000 },
};
const double toler002 = 5.0000000000000039e-13;

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 2.6645352591003757e-15
// max(|f - f_GSL| / |f_GSL|): 1.3076147506590161e-15
const testcase_lpochhammer_u<double>
data003[20] =
{
  { 0.38332208003875151, 5.0000000000000000, 0.25000000000000000 },
  { 0.77976013727077054, 5.0000000000000000, 0.50000000000000000 },
  { 1.1886622062743417, 5.0000000000000000, 0.75000000000000000 },
  { 1.6094379124341003, 5.0000000000000000, 1.0000000000000000 },
  { 2.0415501566422840, 5.0000000000000000, 1.2500000000000000 },
  { 2.4845082295091956, 5.0000000000000000, 1.5000000000000000 },
  { 2.9378620610835995, 5.0000000000000000, 1.7500000000000000 },
  { 3.4011973816621550, 5.0000000000000000, 2.0000000000000000 },
  { 3.8741316203905942, 5.0000000000000000, 2.2500000000000000 },
  { 4.3563104064107874, 5.0000000000000000, 2.5000000000000000 },
  { 4.8474045659680378, 5.0000000000000000, 2.7500000000000000 },
  { 5.3471075307174685, 5.0000000000000000, 3.0000000000000000 },
  { 5.8551330892571771, 5.0000000000000000, 3.2500000000000000 },
  { 6.3712134269530525, 5.0000000000000000, 3.5000000000000000 },
  { 6.8950974093332933, 5.0000000000000000, 3.7500000000000000 },
  { 7.4265490723973047, 5.0000000000000000, 4.0000000000000000 },
  { 7.9653462896037661, 5.0000000000000000, 4.2500000000000000 },
  { 8.5112795904493233, 5.0000000000000000, 4.5000000000000000 },
  { 9.0641511097028165, 5.0000000000000000, 4.7500000000000000 },
  { 9.6237736497335238, 5.0000000000000000, 5.0000000000000000 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for a=10.000000000000000.
// max(|f - f_GSL|): 3.9968028886505635e-15
// max(|f - f_GSL| / |f_GSL|): 2.9247239952000366e-15
const testcase_lpochhammer_u<double>
data004[20] =
{
  { 0.56619619139457700, 10.000000000000000, 0.25000000000000000 },
  { 1.1387977393222941, 10.000000000000000, 0.50000000000000000 },
  { 1.7176447449790491, 10.000000000000000, 0.75000000000000000 },
  { 2.3025850929940459, 10.000000000000000, 1.0000000000000000 },
  { 2.8934738969789939, 10.000000000000000, 1.2500000000000000 },
  { 3.4901729964857720, 10.000000000000000, 1.5000000000000000 },
  { 4.0925504995527211, 10.000000000000000, 1.7500000000000000 },
  { 4.7004803657924166, 10.000000000000000, 2.0000000000000000 },
  { 5.3138420256294232, 10.000000000000000, 2.2500000000000000 },
  { 5.9325200318549758, 10.000000000000000, 2.5000000000000000 },
  { 6.5564037401428887, 10.000000000000000, 2.7500000000000000 },
  { 7.1853870155804165, 10.000000000000000, 3.0000000000000000 },
  { 7.8193679626201593, 10.000000000000000, 3.2500000000000000 },
  { 8.4582486761632314, 10.000000000000000, 3.5000000000000000 },
  { 9.1019350117473241, 10.000000000000000, 3.7500000000000000 },
  { 9.7503363730419537, 10.000000000000000, 4.0000000000000000 },
  { 10.403365515052391, 10.000000000000000, 4.2500000000000000 },
  { 11.060938361607615, 10.000000000000000, 4.5000000000000000 },
  { 11.722973835859904, 10.000000000000000, 4.7500000000000000 },
  { 12.389393702657213, 10.000000000000000, 5.0000000000000000 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for a=20.000000000000000.
// max(|f - f_GSL|): 8.8817841970012523e-15
// max(|f - f_GSL| / |f_GSL|): 2.8343844244295492e-15
const testcase_lpochhammer_u<double>
data005[20] =
{
  { 0.74422641071785522, 20.000000000000000, 0.25000000000000000 },
  { 1.4916167873313040, 20.000000000000000, 0.50000000000000000 },
  { 2.2421315947554015, 20.000000000000000, 0.75000000000000000 },
  { 2.9957322735539909, 20.000000000000000, 1.0000000000000000 },
  { 3.7523812042704030, 20.000000000000000, 1.2500000000000000 },
  { 4.5120416734756663, 20.000000000000000, 1.5000000000000000 },
  { 5.2746778414321094, 20.000000000000000, 1.7500000000000000 },
  { 6.0402547112774139, 20.000000000000000, 2.0000000000000000 },
  { 6.8087380996408289, 20.000000000000000, 2.2500000000000000 },
  { 7.5800946086092837, 20.000000000000000, 2.5000000000000000 },
  { 8.3542915989668014, 20.000000000000000, 2.7500000000000000 },
  { 9.1312971646357290, 20.000000000000000, 3.0000000000000000 },
  { 9.9110801082530777, 20.000000000000000, 3.2500000000000000 },
  { 10.693609917819659, 20.000000000000000, 3.5000000000000000 },
  { 11.478856744363760, 20.000000000000000, 3.7500000000000000 },
  { 12.266791380564879, 20.000000000000000, 4.0000000000000000 },
  { 13.057385240286443, 20.000000000000000, 4.2500000000000000 },
  { 13.850610338969771, 20.000000000000000, 4.5000000000000000 },
  { 14.646439274844411, 20.000000000000000, 4.7500000000000000 },
  { 15.444845210912826, 20.000000000000000, 5.0000000000000000 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for a=50.000000000000000.
// max(|f - f_GSL|): 3.6415315207705135e-14
// max(|f - f_GSL| / |f_GSL|): 1.5685679241504685e-14
const testcase_lpochhammer_u<double>
data006[20] =
{
  { 0.97612764998723212, 50.000000000000000, 0.25000000000000000 },
  { 1.9535115443757411, 50.000000000000000, 0.50000000000000000 },
  { 2.9321454023107596, 50.000000000000000, 0.75000000000000000 },
  { 3.9120230054281460, 50.000000000000000, 1.0000000000000000 },
  { 4.8931381969264169, 50.000000000000000, 1.2500000000000000 },
  { 5.8754848806570559, 50.000000000000000, 1.5000000000000000 },
  { 6.8590570202326555, 50.000000000000000, 1.7500000000000000 },
  { 7.8438486381524717, 50.000000000000000, 2.0000000000000000 },
  { 8.8298538149449346, 50.000000000000000, 2.2500000000000000 },
  { 9.8170666883267454, 50.000000000000000, 2.5000000000000000 },
  { 10.805481452378135, 50.000000000000000, 2.7500000000000000 },
  { 11.795092356733900, 50.000000000000000, 3.0000000000000000 },
  { 12.785893705789855, 50.000000000000000, 3.2500000000000000 },
  { 13.777879857924324, 50.000000000000000, 3.5000000000000000 },
  { 14.771045224734310, 50.000000000000000, 3.7500000000000000 },
  { 15.765384270286020, 50.000000000000000, 4.0000000000000000 },
  { 16.760891510379391, 50.000000000000000, 4.2500000000000000 },
  { 17.757561511826285, 50.000000000000000, 4.5000000000000000 },
  { 18.755388891742083, 50.000000000000000, 4.7500000000000000 },
  { 19.754368316850297, 50.000000000000000, 5.0000000000000000 },
};
const double toler006 = 1.0000000000000008e-12;

// Test data for a=100.00000000000000.
// max(|f - f_GSL|): 1.2789769243681803e-13
// max(|f - f_GSL| / |f_GSL|): 5.0571974303144312e-14
const testcase_lpochhammer_u<double>
data007[20] =
{
  { 1.1503542681888361, 100.00000000000000, 0.25000000000000000 },
  { 2.3013350982022227, 100.00000000000000, 0.50000000000000000 },
  { 3.4529409236584692, 100.00000000000000, 0.75000000000000000 },
  { 4.6051701859880909, 100.00000000000000, 1.0000000000000000 },
  { 5.7580213343755151, 100.00000000000000, 1.2500000000000000 },
  { 6.9114928257013526, 100.00000000000000, 1.5000000000000000 },
  { 8.0655831244852614, 100.00000000000000, 1.7500000000000000 },
  { 9.2202907028293506, 100.00000000000000, 2.0000000000000000 },
  { 10.375614040362164, 100.00000000000000, 2.2500000000000000 },
  { 11.531551624183196, 100.00000000000000, 2.5000000000000000 },
  { 12.688101948807967, 100.00000000000000, 2.7500000000000000 },
  { 13.845263516113622, 100.00000000000000, 3.0000000000000000 },
  { 15.003034835285074, 100.00000000000000, 3.2500000000000000 },
  { 16.161414422761659, 100.00000000000000, 3.5000000000000000 },
  { 17.320400802184309, 100.00000000000000, 3.7500000000000000 },
  { 18.479992504343258, 100.00000000000000, 4.0000000000000000 },
  { 19.640188067126218, 100.00000000000000, 4.2500000000000000 },
  { 20.800986035467083, 100.00000000000000, 4.5000000000000000 },
  { 21.962384961295118, 100.00000000000000, 4.7500000000000000 },
  { 23.124383403484629, 100.00000000000000, 5.0000000000000000 },
};
const double toler007 = 5.0000000000000029e-12;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_lpochhammer_u<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::lpochhammer_u(data[i].a, data[i].nu);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  return 0;
}
