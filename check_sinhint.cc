// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  sinhint

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 7.1054273576010019e-15
// max(|f - f_GSL| / |f_GSL|): 2.9139306966895380e-15
// mean(f - f_GSL): 9.4160790276021091e-17
// variance(f - f_GSL): 1.3569731040916400e-31
// stddev(f - f_GSL): 3.6837115849257797e-16
const testcase_sinhint<double>
data001[100] =
{
  { 0.050006944965299928, 0.050000000000000003 },
  { 0.10005557222505700, 0.10000000000000001 },
  { 0.15018762661094129, 0.14999999999999999 },
  { 0.20044497814074638, 0.20000000000000001 },
  { 0.25086968489091221, 0.25000000000000000 },
  { 0.30150405620501042, 0.29999999999999999 },
  { 0.35239071635119468, 0.34999999999999998 },
  { 0.40357266874249365, 0.40000000000000002 },
  { 0.45509336083491714, 0.45000000000000001 },
  { 0.50699674981966714, 0.50000000000000000 },
  { 0.55932736922729009, 0.55000000000000004 },
  { 0.61213039656338075, 0.59999999999999998 },
  { 0.66545172209746140, 0.65000000000000002 },
  { 0.71933801892889981, 0.69999999999999996 },
  { 0.77383681445622599, 0.75000000000000000 },
  { 0.82899656337893446, 0.80000000000000004 },
  { 0.88486672236385755, 0.84999999999999998 },
  { 0.94149782651143354, 0.90000000000000002 },
  { 0.99894156776071252, 0.94999999999999996 },
  { 1.0572508753757284, 1.0000000000000000 },
  { 1.1164799986599305, 1.0500000000000000 },
  { 1.1766845920497220, 1.1000000000000001 },
  { 1.2379218027428143, 1.1499999999999999 },
  { 1.3002503610220573, 1.2000000000000000 },
  { 1.3637306734406931, 1.2500000000000000 },
  { 1.4284249190405769, 1.3000000000000000 },
  { 1.4943971487808698, 1.3500000000000001 },
  { 1.5617133883610019, 1.3999999999999999 },
  { 1.6304417446283606, 1.4500000000000000 },
  { 1.7006525157682160, 1.5000000000000000 },
  { 1.7724183054808238, 1.5500000000000000 },
  { 1.8458141413585047, 1.6000000000000001 },
  { 1.9209175976837392, 1.6499999999999999 },
  { 1.9978089228780793, 1.7000000000000000 },
  { 2.0765711718407984, 1.7500000000000000 },
  { 2.1572903434259021, 1.8000000000000000 },
  { 2.2400555233162245, 1.8500000000000001 },
  { 2.3249590325640597, 1.8999999999999999 },
  { 2.4120965820789397, 1.9500000000000000 },
  { 2.5015674333549760, 2.0000000000000000 },
  { 2.5934745657425680, 2.0499999999999998 },
  { 2.6879248505822093, 2.1000000000000001 },
  { 2.7850292325317993, 2.1499999999999999 },
  { 2.8849029184331569, 2.2000000000000002 },
  { 2.9876655740783913, 2.2500000000000000 },
  { 3.0934415292525643, 2.2999999999999998 },
  { 3.2023599914455336, 2.3500000000000001 },
  { 3.3145552686431676, 2.3999999999999999 },
  { 3.4301670016262595, 2.4500000000000002 },
  { 3.5493404062244354, 2.5000000000000000 },
  { 3.6722265259922922, 2.5499999999999998 },
  { 3.7989824957958409, 2.6000000000000001 },
  { 3.9297718168191871, 2.6499999999999999 },
  { 4.0647646435243123, 2.7000000000000002 },
  { 4.2041380831207560, 2.7500000000000000 },
  { 4.3480765081271899, 2.7999999999999998 },
  { 4.4967718826331531, 2.8500000000000001 },
  { 4.6504241028968041, 2.8999999999999999 },
  { 4.8092413529434515, 2.9500000000000002 },
  { 4.9734404758598068, 3.0000000000000000 },
  { 5.1432473615106531, 3.0499999999999998 },
  { 5.3188973514377320, 3.1000000000000001 },
  { 5.5006356617353980, 3.1499999999999999 },
  { 5.6887178247340398, 3.2000000000000002 },
  { 5.8834101503602065, 3.2500000000000000 },
  { 6.0849902080824432, 3.2999999999999998 },
  { 6.2937473303934484, 3.3500000000000001 },
  { 6.5099831388230065, 3.3999999999999999 },
  { 6.7340120935219021, 3.4500000000000002 },
  { 6.9661620675049418, 3.5000000000000000 },
  { 7.2067749466914952, 3.5499999999999998 },
  { 7.4562072569344444, 3.6000000000000001 },
  { 7.7148308192835433, 3.6499999999999999 },
  { 7.9830334347868188, 3.7000000000000002 },
  { 8.2612196001939306, 3.7500000000000000 },
  { 8.5498112559886970, 3.7999999999999998 },
  { 8.8492485682440662, 3.8500000000000001 },
  { 9.1599907458621246, 3.8999999999999999 },
  { 9.4825168948343439, 3.9500000000000002 },
  { 9.8173269112330335, 4.0000000000000000 },
  { 10.164942414724782, 4.0499999999999998 },
  { 10.525907724479621, 4.0999999999999996 },
  { 10.900790879437171, 4.1500000000000004 },
  { 11.290184704982014, 4.2000000000000002 },
  { 11.694707928176513, 4.2500000000000000 },
  { 12.115006343799026, 4.2999999999999998 },
  { 12.551754033540602, 4.3499999999999996 },
  { 13.005654640822904, 4.4000000000000004 },
  { 13.477442703814976, 4.4500000000000002 },
  { 13.967885049347146, 4.5000000000000000 },
  { 14.477782250545957, 4.5499999999999998 },
  { 15.007970151146466, 4.5999999999999996 },
  { 15.559321459576237, 4.6500000000000004 },
  { 16.132747416050137, 4.7000000000000002 },
  { 16.729199536066787, 4.7500000000000000 },
  { 17.349671433856102, 4.7999999999999998 },
  { 17.995200729493646, 4.8499999999999996 },
  { 18.666871043571849, 4.9000000000000004 },
  { 19.365814083500108, 4.9500000000000002 },
  { 20.093211825697228, 5.0000000000000000 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_sinhint<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::sinhint(data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
