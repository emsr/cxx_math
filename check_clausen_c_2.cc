// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  clausen_c_2

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 1.1102230246251565e-15
// max(|f - f_GSL| / |f_GSL|): 2.1300383933708612e-14
// mean(f - f_GSL): -1.1743475270653878e-36
// variance(f - f_GSL): 9.5545384541050770e-33
// stddev(f - f_GSL): 9.7747319421583506e-17
const testcase_clausen_c_2<double>
data001[41] =
{
  { 0.39071647608680155, -10.000000000000000 },
  { 0.052122207190274598, -9.5000000000000000 },
  { -0.29122555781958798, -9.0000000000000000 },
  { -0.60731897904008003, -8.5000000000000000 },
  { -0.86027963733231172, -8.0000000000000000 },
  { -1.0032427051361714, -7.5000000000000000 },
  { -0.96059820624535719, -7.0000000000000000 },
  { -0.54840355866757695, -6.5000000000000000 },
  { 0.64078266570172315, -6.0000000000000000 },
  { 0.98127747477447369, -5.5000000000000000 },
  { 0.99282013254695667, -5.0000000000000000 },
  { 0.83183922082321915, -4.5000000000000000 },
  { 0.56814394442986960, -4.0000000000000000 },
  { 0.24650453023476912, -3.5000000000000000 },
  { -0.098026209391301133, -3.0000000000000000 },
  { -0.43359820323553289, -2.5000000000000000 },
  { -0.72714605086327944, -2.0000000000000000 },
  { -0.93921859275409214, -1.5000000000000000 },
  { -1.0139591323607684, -1.0000000000000000 },
  { -0.84831187770367933, -0.50000000000000000 },
  { 0.0000000000000000, 0.0000000000000000 },
  { 0.84831187770367933, 0.50000000000000000 },
  { 1.0139591323607684, 1.0000000000000000 },
  { 0.93921859275409214, 1.5000000000000000 },
  { 0.72714605086327944, 2.0000000000000000 },
  { 0.43359820323553289, 2.5000000000000000 },
  { 0.098026209391301133, 3.0000000000000000 },
  { -0.24650453023476912, 3.5000000000000000 },
  { -0.56814394442986960, 4.0000000000000000 },
  { -0.83183922082321915, 4.5000000000000000 },
  { -0.99282013254695667, 5.0000000000000000 },
  { -0.98127747477447369, 5.5000000000000000 },
  { -0.64078266570172315, 6.0000000000000000 },
  { 0.54840355866757695, 6.5000000000000000 },
  { 0.96059820624535719, 7.0000000000000000 },
  { 1.0032427051361714, 7.5000000000000000 },
  { 0.86027963733231172, 8.0000000000000000 },
  { 0.60731897904008003, 8.5000000000000000 },
  { 0.29122555781958798, 9.0000000000000000 },
  { -0.052122207190274598, 9.5000000000000000 },
  { -0.39071647608680155, 10.000000000000000 },
};
const double toler001 = 2.5000000000000015e-12;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_clausen_c_2<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::clausen_c_2(data[i].w);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
