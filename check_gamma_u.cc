// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  gamma_u
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for a=0.50000000000000000.
testcase_gamma_u<double> data001[] = {
  { 1.7724538509055161, 0.50000000000000000, 0.0000000000000000 },
  { 0.56241823159440663, 0.50000000000000000, 0.50000000000000000 },
  { 0.27880558528066168, 0.50000000000000000, 1.0000000000000000 },
  { 0.14758251320409643, 0.50000000000000000, 1.5000000000000000 },
  { 0.080647117960317649, 0.50000000000000000, 2.0000000000000000 },
  { 0.044926952600007890, 0.50000000000000000, 2.5000000000000000 },
  { 0.025356509323463415, 0.50000000000000000, 3.0000000000000000 },
  { 0.014447220989525311, 0.50000000000000000, 3.5000000000000000 },
  { 0.0082910693806726513, 0.50000000000000000, 4.0000000000000000 },
  { 0.0047852639289850734, 0.50000000000000000, 4.5000000000000000 },
  { 0.0027746032604128051, 0.50000000000000000, 5.0000000000000000 },
};

// Test function for a=0.50000000000000000.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data001[i].a), Tp(data001[i].x));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=1.0000000000000000.
testcase_gamma_u<double> data002[] = {
  { 1.0000000000000000, 1.0000000000000000, 0.0000000000000000 },
  { 0.60653065971263342, 1.0000000000000000, 0.50000000000000000 },
  { 0.36787944117144233, 1.0000000000000000, 1.0000000000000000 },
  { 0.22313016014842982, 1.0000000000000000, 1.5000000000000000 },
  { 0.13533528323661270, 1.0000000000000000, 2.0000000000000000 },
  { 0.082084998623898800, 1.0000000000000000, 2.5000000000000000 },
  { 0.049787068367863951, 1.0000000000000000, 3.0000000000000000 },
  { 0.030197383422318501, 1.0000000000000000, 3.5000000000000000 },
  { 0.018315638888734182, 1.0000000000000000, 4.0000000000000000 },
  { 0.011108996538242308, 1.0000000000000000, 4.5000000000000000 },
  { 0.0067379469990854679, 1.0000000000000000, 5.0000000000000000 },
};

// Test function for a=1.0000000000000000.
template<typename Tp>
  void
  test002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data002[i].a), Tp(data002[i].x));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=1.5000000000000000.
testcase_gamma_u<double> data003[] = {
  { 0.88622692545275883, 1.5000000000000000, 0.0000000000000000 },
  { 0.71009105827755781, 1.5000000000000000, 0.50000000000000000 },
  { 0.50728223381177362, 1.5000000000000000, 1.0000000000000000 },
  { 0.34706877589662166, 1.5000000000000000, 1.5000000000000000 },
  { 0.23171655200098060, 1.5000000000000000, 2.0000000000000000 },
  { 0.15225125499165781, 1.5000000000000000, 2.5000000000000000 },
  { 0.098911986634777391, 1.5000000000000000, 3.0000000000000000 },
  { 0.063717741866444175, 1.5000000000000000, 3.5000000000000000 },
  { 0.040776812467804714, 1.5000000000000000, 4.0000000000000000 },
  { 0.025958372317599603, 1.5000000000000000, 4.5000000000000000 },
  { 0.016453809148952239, 1.5000000000000000, 5.0000000000000000 },
};

// Test function for a=1.5000000000000000.
template<typename Tp>
  void
  test003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data003)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data003[i].a), Tp(data003[i].x));
	const Tp f0 = data003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=2.0000000000000000.
testcase_gamma_u<double> data004[] = {
  { 1.0000000000000000, 2.0000000000000000, 0.0000000000000000 },
  { 0.90979598956895025, 2.0000000000000000, 0.50000000000000000 },
  { 0.73575888234288500, 2.0000000000000000, 1.0000000000000000 },
  { 0.55782540037107398, 2.0000000000000000, 1.5000000000000000 },
  { 0.40600584970983766, 2.0000000000000000, 2.0000000000000000 },
  { 0.28729749518364556, 2.0000000000000000, 2.5000000000000000 },
  { 0.19914827347145553, 2.0000000000000000, 3.0000000000000000 },
  { 0.13588822540043310, 2.0000000000000000, 3.5000000000000000 },
  { 0.091578194443670810, 2.0000000000000000, 4.0000000000000000 },
  { 0.061099480960332637, 2.0000000000000000, 4.5000000000000000 },
  { 0.040427681994512750, 2.0000000000000000, 5.0000000000000000 },
};

// Test function for a=2.0000000000000000.
template<typename Tp>
  void
  test004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data004)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data004[i].a), Tp(data004[i].x));
	const Tp f0 = data004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=2.5000000000000000.
testcase_gamma_u<double> data005[] = {
  { 1.3293403881791381, 2.5000000000000000, 0.0000000000000000 },
  { 1.2795775586565132, 2.5000000000000000, 0.50000000000000000 },
  { 1.1288027918891035, 2.5000000000000000, 1.0000000000000000 },
  { 0.93051944278679211, 2.5000000000000000, 1.5000000000000000 },
  { 0.73036081404311504, 2.5000000000000000, 2.0000000000000000 },
  { 0.55284632921662125, 2.5000000000000000, 2.5000000000000000 },
  { 0.40706917587130309, 2.5000000000000000, 3.0000000000000000 },
  { 0.29330607260055175, 2.5000000000000000, 3.5000000000000000 },
  { 0.20769032981158059, 2.5000000000000000, 4.0000000000000000 },
  { 0.14498339006538122, 2.5000000000000000, 4.5000000000000000 },
  { 0.10001325131715731, 2.5000000000000000, 5.0000000000000000 },
};

// Test function for a=2.5000000000000000.
template<typename Tp>
  void
  test005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data005)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data005[i].a), Tp(data005[i].x));
	const Tp f0 = data005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=3.0000000000000000.
testcase_gamma_u<double> data006[] = {
  { 2.0000000000000000, 3.0000000000000000, 0.0000000000000000 },
  { 1.9712246440660586, 3.0000000000000000, 0.50000000000000000 },
  { 1.8393972058572119, 3.0000000000000000, 1.0000000000000000 },
  { 1.6176936610761172, 3.0000000000000000, 1.5000000000000000 },
  { 1.3533528323661237, 3.0000000000000000, 2.0000000000000000 },
  { 1.0876262317666563, 3.0000000000000000, 2.5000000000000000 },
  { 0.84638016225368529, 3.0000000000000000, 3.0000000000000000 },
  { 0.64169439772426695, 3.0000000000000000, 3.5000000000000000 },
  { 0.47620661110708740, 3.0000000000000000, 4.0000000000000000 },
  { 0.34715614182007126, 3.0000000000000000, 4.5000000000000000 },
  { 0.24930403896616155, 3.0000000000000000, 5.0000000000000000 },
};

// Test function for a=3.0000000000000000.
template<typename Tp>
  void
  test006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data006)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data006[i].a), Tp(data006[i].x));
	const Tp f0 = data006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=3.5000000000000000.
testcase_gamma_u<double> data007[] = {
  { 3.3233509704478443, 3.5000000000000000, 0.0000000000000000 },
  { 3.3061643822613704, 3.5000000000000000, 0.50000000000000000 },
  { 3.1898864208941999, 3.5000000000000000, 1.0000000000000000 },
  { 2.9411730253797730, 3.5000000000000000, 1.5000000000000000 },
  { 2.5914740071910711, 3.5000000000000000, 2.0000000000000000 },
  { 2.1932894398643858, 3.5000000000000000, 2.5000000000000000 },
  { 1.7937765274356681, 3.5000000000000000, 3.0000000000000000 },
  { 1.4253182908044770, 3.5000000000000000, 3.5000000000000000 },
  { 1.1053262689684449, 3.5000000000000000, 4.0000000000000000 },
  { 0.83966471731387160, 3.5000000000000000, 4.5000000000000000 },
  { 0.62669581626153847, 3.5000000000000000, 5.0000000000000000 },
};

// Test function for a=3.5000000000000000.
template<typename Tp>
  void
  test007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data007)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data007[i].a), Tp(data007[i].x));
	const Tp f0 = data007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=4.0000000000000000.
testcase_gamma_u<double> data008[] = {
  { 6.0000000000000000, 4.0000000000000000, 0.0000000000000000 },
  { 5.9894902646622548, 4.0000000000000000, 0.50000000000000000 },
  { 5.8860710587430773, 4.0000000000000000, 1.0000000000000000 },
  { 5.6061452737292994, 4.0000000000000000, 1.5000000000000000 },
  { 5.1427407629912816, 4.0000000000000000, 2.0000000000000000 },
  { 4.5454567987983969, 4.0000000000000000, 2.5000000000000000 },
  { 3.8833913326933907, 4.0000000000000000, 3.0000000000000000 },
  { 3.2197960074047107, 4.0000000000000000, 3.5000000000000000 },
  { 2.6008207222002544, 4.0000000000000000, 4.0000000000000000 },
  { 2.0537757350075476, 4.0000000000000000, 4.5000000000000000 },
  { 1.5901554917841700, 4.0000000000000000, 5.0000000000000000 },
};

// Test function for a=4.0000000000000000.
template<typename Tp>
  void
  test008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data008)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data008[i].a), Tp(data008[i].x));
	const Tp f0 = data008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=4.5000000000000000.
testcase_gamma_u<double> data009[] = {
  { 11.631728396567455, 4.5000000000000000, 0.0000000000000000 },
  { 11.625185580724841, 4.5000000000000000, 0.50000000000000000 },
  { 11.532481914301142, 4.5000000000000000, 1.0000000000000000 },
  { 11.216417216448390, 4.5000000000000000, 1.5000000000000000 },
  { 10.601302969335341, 4.5000000000000000, 2.0000000000000000 },
  { 9.7044470815824280, 4.5000000000000000, 2.5000000000000000 },
  { 8.6065286092970741, 4.5000000000000000, 3.0000000000000000 },
  { 7.4107999003765128, 4.5000000000000000, 3.5000000000000000 },
  { 6.2130437191475218, 4.5000000000000000, 4.0000000000000000 },
  { 5.0862546002754296, 4.5000000000000000, 4.5000000000000000 },
  { 4.0767487967586113, 4.5000000000000000, 5.0000000000000000 },
};

// Test function for a=4.5000000000000000.
template<typename Tp>
  void
  test009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data009)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data009[i].a), Tp(data009[i].x));
	const Tp f0 = data009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for a=5.0000000000000000.
testcase_gamma_u<double> data010[] = {
  { 24.000000000000000, 5.0000000000000000, 0.0000000000000000 },
  { 23.995869224881059, 5.0000000000000000, 0.50000000000000000 },
  { 23.912163676143752, 5.0000000000000000, 1.0000000000000000 },
  { 23.554177530668625, 5.0000000000000000, 1.5000000000000000 },
  { 22.736327583750935, 5.0000000000000000, 2.0000000000000000 },
  { 21.388272453939635, 5.0000000000000000, 2.5000000000000000 },
  { 19.566317868570486, 5.0000000000000000, 3.0000000000000000 },
  { 17.410678879430471, 5.0000000000000000, 3.5000000000000000 },
  { 15.092086444316921, 5.0000000000000000, 4.0000000000000000 },
  { 12.770485832993153, 5.0000000000000000, 4.5000000000000000 },
  { 10.571838841565068, 5.0000000000000000, 5.0000000000000000 },
};

// Test function for a=5.0000000000000000.
template<typename Tp>
  void
  test010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data010)
			   / sizeof(testcase_gamma_u<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::gamma_u(Tp(data010[i].a), Tp(data010[i].x));
	const Tp f0 = data010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

int
main()
{
  test001<double>();
  test002<double>();
  test003<double>();
  test004<double>();
  test005<double>();
  test006<double>();
  test007<double>();
  test008<double>();
  test009<double>();
  test010<double>();
  return 0;
}
