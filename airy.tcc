#include <complex>
#include <ext/cmath>
#include <bits/numeric_limits.h>

/**
 *  @param[in]  t      The input argument.
 *
 *  @param[out]  _Ai    The Airy function of the first kind.
 *  @param[out]  _Aip   The derivative of the Airy function of the first kind.
 *  @param[out]  _Bi    The Airy function of the second kind.
 *  @param[out]  _Bip   The derivative of the Airy function of the second kind.
 *  @param[out]  __w1   The Fock-type Airy function of the first kind.
 *  @param[out]  __w1p  The derivative of the Fock-type Airy function of the first kind.
 *  @param[out]  __w2   The Fock-type Airy function of the second kind.
 *  @param[out]  __w2p  The derivative of the Fock-type Airy function of the second kind.
 */
template<typename _Tp>
  void
  airy(std::complex<_Tp> __t,
       std::complex<_Tp>& _Ai, std::complex<_Tp>& _Aip,
       std::complex<_Tp>& _Bi, std::complex<_Tp>& _Bip,
       std::complex<_Tp>& __w1, std::complex<_Tp>& __w1p,
       std::complex<_Tp>& __w2, std::complex<_Tp>& __w2p)
  {
    using __cmplx = std::complex<_Tp>;

    const auto _S_eps = __gnu_cxx::__epsilon(std::real(__t));
    const auto _S_log10min = __gnu_cxx::__log10_min(std::real(__t));
    const auto _S_pi = __gnu_cxx::__const_pi(std::real(__t));
    const auto _S_sqrt_pi = __gnu_cxx::__const_root_pi(std::real(__t));
    constexpr auto _S_Ai0 = _Tp{3.550280538878172392600631860041831763980e-1L};
    constexpr auto _S_Aip0 = _Tp{2.588194037928067984051835601892039634793e-1L};
    //constexpr auto _S_Bi0 = _Tp{6.149266274460007351509223690936135535960e-1L};
    //constexpr auto _S_Bip0 = _Tp{8.868776642045783582807775119976424596506e-1L};
    constexpr auto _S_i = __cmplx(_Tp{0}, _Tp{1});
    constexpr auto _S_big = _Tp{5.0L}; // was 3.5
    constexpr int _N_FG = 40;
    constexpr _Tp
    _Fai[_N_FG]
    {
      1.666666666666666666666666666666667e-01L,
      5.555555555555555555555555555555556e-03L,
      7.716049382716049382716049382716049e-05L,
      5.845491956603067714178825289936401e-07L,
      2.783567598382413197228012042826858e-09L,
      9.096626138504618291594810597473392e-12L,
      2.165863366310623402760669189874617e-14L,
      3.923665518678665584711357228033726e-17L,
      5.589267120624879750301078672412715e-20L,
      6.424444966235493965863308818865191e-23L,
      6.083754702874520801006921229985975e-26L,
      4.828376748313111746830889865068234e-29L,
      3.258014000211276482342030948089227e-32L,
      1.891994192921763346307799621422315e-35L,
      9.555526226877592658120200108193512e-39L,
      4.235605597020209511578102884837550e-42L,
      1.661021802753023337873765837191196e-45L,
      5.803710002631108797602256593959455e-49L,
      1.818204888042327317544566602117624e-52L,
      5.136172000119568693628719215021536e-56L,
      1.314944188458670940509144704306589e-59L,
      3.065137968435130397457213762952422e-63L,
      6.532689617295674333881529759063133e-67L,
      1.277912679439685902558984694652412e-70L,
      2.302545368359794419025197648022365e-74L,
      3.833741872060929768606722690679928e-78L,
      5.916268321081681741677041189320876e-82L,
      8.485754906887093720133449783879628e-86L,
      1.134155961893490205845155009874315e-89L,
      1.415925046059288646498320861266312e-93L,
      1.654891358180561765425807458235521e-97L,
      1.814573857654124742791455546310878e-101L,
      1.870309067876855022460786998877425e-105L,
      1.815481525797762592177040379418972e-109L,
      1.662528869778170871956996684449608e-113L,
      1.438671573016762609862406268994123e-117L,
      1.178273196573925151402462136768323e-121L,
      9.146663534962933949716364980347178e-126L,
      6.739363052581000552399325803379883e-130L,
      4.719441913572129238374878013571347e-134L
    };
    //constexpr _Tp _S_slope_F{-2.660L}, _S_intercept_F{-0.778L};
    constexpr _Tp
    _Faip[_N_FG]
    {
      5.000000000000000000000000000000000e-01L,
      3.333333333333333333333333333333333e-02L,
      6.944444444444444444444444444444444e-04L,
      7.014590347923681257014590347923681e-06L,
      4.175351397573619795842018064240287e-08L,
      1.637392704930831292487065907545211e-10L,
      4.548313069252309145797405298736695e-13L,
      9.416797244828797403307257347280942e-16L,
      1.509102122568717532581291241551433e-18L,
      1.927333489870648189758992645659557e-21L,
      2.007639051948591864332284005895372e-24L,
      1.738215629392720228859120351424564e-27L,
      1.270625460082397828113392069754799e-30L,
      7.946375610271406054492758409973724e-34L,
      4.299986802094916696154090048687080e-37L,
      2.033090686569700565557489384722024e-40L,
      8.471211194040419023156205769675100e-44L,
      3.134003401420798750705218560738106e-47L,
      1.036376786184126571000402963207046e-50L,
      3.081703200071741216177231529012922e-54L,
      8.284148387289626925207611637131511e-58L,
      2.022991059167186062321761083548598e-61L,
      4.507555835934015290378255533753561e-65L,
      9.200971291965738498424689801497370e-69L,
      1.726909026269845814268898236016774e-72L,
      2.990318660207525219513243698730344e-76L,
      4.792177340076162210758403363349910e-80L,
      7.128034121785158724912097818458887e-84L,
      9.867156868473364790852848585906545e-88L,
      1.274332541453359781848488775139680e-91L,
      1.539048963107922441846000936159035e-95L,
      1.741990903347959753079797324458443e-99L,
      1.851605977198086472236179128888651e-103L,
      1.851791156313717844020581187007352e-107L,
      1.745655313267079415554846518672089e-111L,
      1.553765298858103618651398770513653e-115L,
      1.307883248197056918056732971812839e-119L,
      1.042719642985774470267665607759578e-123L,
      7.885054771519770646307211189954463e-128L,
      5.663330296286555086049853616285617e-132L
    };
    //constexpr _Tp _S_slope_Fp{-2.576L}, _S_intercept_Fp{-0.301L};
    constexpr _Tp
    _Gai[_N_FG]
    {
      8.333333333333333333333333333333333e-02L,
      1.984126984126984126984126984126984e-03L,
      2.204585537918871252204585537918871e-05L,
      1.413195857640302084746529190973636e-07L,
      5.888316073501258686443871629056814e-10L,
      1.721729846052999615919260710250531e-12L,
      3.726687978469696138353378160715434e-15L,
      6.211146630782826897255630267859057e-18L,
      8.215802421670405948750833687644255e-21L,
      8.834196152333769837366487836176617e-24L,
      7.873615109031880425460327839729605e-27L,
      5.911122454228138457552798678475680e-30L,
      3.789181060402652857405640178510051e-33L,
      2.098106899447759057256722136495045e-36L,
      1.013578212293603409302764317147365e-39L,
      4.309431174717701570164814273585735e-43L,
      1.624974047781938751947516694413927e-46L,
      5.471293090174877952685241395333088e-50L,
      1.654958587469715049209086931437716e-53L,
      4.521744774507418167237942435622174e-57L,
      1.121464477804419188303061119945976e-60L,
      2.536102392140251443471418181696010e-64L,
      5.250729590352487460603350272662546e-68L,
      9.989972584384489080295567489845026e-72L,
      1.752626769190261242157117103481584e-75L,
      2.844249868857937750985259823890918e-79L,
      4.282219013637364876521017500588554e-83L,
      5.997505621340847165995822829955959e-87L,
      7.833732525262339558510740373505694e-91L,
      9.564996978342294943236557232607686e-95L,
      1.094142871006897156627380145573974e-98L,
      1.174981605462733200845554280040780e-102L,
      1.186850106528013334187428565697758e-106L,
      1.129687898846386192830219460972547e-110L,
      1.014993619808073848005588015249368e-114L,
      8.622100066327504655161298124782266e-119L,
      6.935408676260862817858187037308772e-123L,
      5.290166801114311836657656016253831e-127L,
      3.831788208832617584135633794186463e-131L,
      2.638972595614750402297268453296462e-135L
    };
    constexpr _Tp _S_slope_G{-2.708L}, _S_intercept_G{-1.079L};
    constexpr _Tp
    _Gaip[_N_FG]
    {
      3.333333333333333333333333333333333e-01L,
      1.388888888888888888888888888888889e-02L,
      2.204585537918871252204585537918871e-04L,
      1.837154614932392710170487948265726e-06L,
      9.421305717602013898310194606490902e-09L,
      3.271286707500699270246595349476008e-11L,
      8.198713552633331504377431953573955e-14L,
      1.552786657695706724313907566964764e-16L,
      2.300424678067713665650233432540391e-19L,
      2.738600807223468649583611229214751e-22L,
      2.677029137070839344656511465508066e-25L,
      2.187115308064411229294535511036002e-28L,
      1.515672424161061142962256071404021e-31L,
      9.021859667625363946203905186928694e-35L,
      4.662459776550575682792715858877878e-38L,
      2.111621275611673769380758994057010e-41L,
      8.449865048466081510127086810952421e-45L,
      3.009211199596182873976882767433198e-48L,
      9.598759807324347285412704202338750e-52L,
      2.758264312449525082015144885729526e-55L,
      7.177372657948282805139591167654244e-59L,
      1.699188602733968467125850181736327e-62L,
      3.675510713246741222422345190863782e-66L,
      7.292679986600677028615764267586869e-70L,
      1.331996344584598544039408998646004e-73L,
      2.246957396397770823278355260873826e-77L,
      3.511419591182639198747234350482615e-81L,
      5.097879778139720091096449405462565e-85L,
      6.893684622230858811489451528685011e-89L,
      8.704147250291488398345267081672995e-93L,
      1.028494298746483327229737336839536e-96L,
      1.139732157298851204820187651639557e-100L,
      1.186850106528013334187428565697758e-104L,
      1.163578535811777778615126044801723e-108L,
      1.075893236996558278885923296164330e-112L,
      9.398089072296980074125814956012670e-117L,
      7.767657717412166356001169481785824e-121L,
      6.083691821281458612156304418691905e-125L,
      4.521510086422488749280047877140026e-129L,
      3.193156840693847986779694828488720e-133L
    };
    constexpr _Tp _S_slope_Gp{-2.632L}, _S_intercept_Gp{-0.477};

    constexpr int _N_cd = 50;
    constexpr _Tp
    _S_cn[_N_cd]
    {
      0.0694444444444444444444444444444444471L,
      0.0371334876543209876543209876543209876L,
      0.037993059127800640146319158664837679L,
      0.057649190412669721333130112279632168L,
      0.116099064025515411018109253896481456L,
      0.291591399230750511469093843698338833L,
      0.877666969510016916465506668433293675L,
      3.07945303017316699336248086268001127L,
      12.3415733323452387064233993833024529L,
      55.6227853659170827810332374983561958L,
      278.465080777602567205551498334573594L,
      1533.169432012795615968528330529591L,
      9207.20659972641469803322408750729846L,
      59892.5135658790686259958832755807077L,
      419524.87511655106866264708979608155L,
      3148257.41786682637898314591257562958L,
      25198919.8716023676755701638116858171L,
      214288036.963680319562082388401689385L,
      1929375549.18249305266532805405234501L,
      18335766937.8905676567534822359071795L,
      183418303528.832563365341546837365161L,
      1926471158970.44656357903239566492682L,
      21196999388647.6490549357181651030291L,
      243826826879716.041819998420120227443L,
      2926599219297925.04640059214816528695L,
      36590307012643128.0507509931772481271L,
      475768102036306763.240140357274331917L,
      6424049357901937699.48405786972449505L,
      89952074270583789520.9843869430724226L,
      1304513299317609817937.42403749617779L,
      19570621786581615032990.4318528492404L,
      303387108659433829918975.370871621708L,
      4854832179436167359995522.96965905838L,
      80114646876095936618357492.4041327536L,
      1362107954526321589052986810.33931303L,
      23839516727271056669517263368.4579391L,
      429156044928580354617131906667.093323L,
      7940171107576632357848623628433.81934L,
      150877389525272924757026001047843.109L,
      2942371035655192298256376857240313.0L,
      58852404403882394732570383311569920.0L,
      1.2065715991493045060301475046849856e+36L,
      2.53399521796792404026441281983599903e+37L,
      5.44848965474498364427686262780203958e+38L,
      1.19875180567437086136504985315700155e+40L,
      2.69737253375249059309270351167045845e+41L,
      6.2043553755819329283261454857533513e+42L,
      1.45811327534762781936220446324760688e+44L,
      3.49967850954113040986772639836784608e+45L,
      8.57469841483542799451063352688988237e+46L
    };
    constexpr _Tp
    _S_dn[_N_cd]
    {
      -0.0972222222222222222222222222222222356L,
      -0.043885030864197530864197530864197528L,
      -0.0424628307898948331047096479195244637L,
      -0.0626621634920323057968805568256871339L,
      -0.124105896027275094536599547268652587L,
      -0.308253764901079112124470634766815348L,
      -0.920479992412944570927238701039795836L,
      -3.21049358464862090797365026109192646L,
      -12.8072930807356250727035276619176409L,
      -57.5083035139142720278479235152496259L,
      -287.03323710922110773495308289871432L,
      -1576.35730333709971782679673420648082L,
      -9446.35482309593196291720393393606053L,
      -61335.7066638520582314415672099320452L,
      -428952.40040006907020562792327464519L,
      -3214536.52140086482906700161599827448L,
      -25697908.3839113254513240284416201894L,
      -218293420.832160325535205423698917208L,
      -1963523788.99103275271250200191167858L,
      -18643931088.1072158526653054667627612L,
      -186352996385.293884379187011586763004L,
      -1955882932389.84269432069701239263561L,
      -21506444635197.2497710661666054694949L,
      -247236992290621.161286012384037992843L,
      -2965882430295212.63091603633807354567L,
      -37062440006354652.2836639092182448793L,
      -481678264794521754.087843964196994417L,
      -6500984080751062701.87308850289484763L,
      -90991982643654122347.8165763875010015L,
      -1319088866907750709757.95391501010158L,
      -19782196076166281141455.1932782854492L,
      -306563937022359838609226.421875513042L,
      -4904119815775620835731518.12671143468L,
      -80903953741870280821494019.4228926748L,
      -1375142480406956245407560846.80189013L,
      -24061279673571252545512772795.1412697L,
      -433039810041056194930409118492.134888L,
      -8010128562268937488754778902693.14844L,
      -152172474413901876900863134104047.781L,
      -2966993387417997254727141517133537.5L,
      -59332832194934495914060753787582736.0L,
      -1.2161857154771874104606666083079735e+36L,
      -2.55371502511164329349604249158569533e+37L,
      -5.48992303614988846286451937782334751e+38L,
      -1.20766445850466358152389780745556654e+40L,
      -2.71698978854341779740610499175533423e+41L,
      -6.24851448857539864311850239312526105e+42L,
      -1.46827434346851721183162749086605705e+44L,
      -3.52356710004994358672689176627479368e+45L,
      -8.63205425707512985400568793175202219e+46L
    };

    if (std::abs(__t) <= _S_big)
      {
	const auto __log10t = std::log10(std::abs(__t));
	const auto __ttt = __t * __t * __t;

	auto __term = __cmplx{_Tp{1}};
	auto _F = __cmplx{_Tp{1}};
	auto _G = __t;
	for (int __n = 0; __n < _N_FG; ++__n)
	  {
	    if (std::abs(__t) < _S_eps)
	      break;
	    auto __xx = __log10t * (3 * (__n + 1) + 1)
		      + _S_slope_G * __n + _S_intercept_G;
	    if (__xx < _S_log10min)
	      break;
	    __term *= __ttt;
	    _F += _Fai[__n] * __term;
	    _G += _Gai[__n] * __term * __t;
	  }
	auto _UU = std::sqrt(_Tp{3} * _S_pi)
		* (_S_Ai0 * _F + _S_Aip0 * _G);
	auto _VV = _S_sqrt_pi * (_S_Ai0 * _F - _S_Aip0 * _G);
	_Bi = _UU / _S_sqrt_pi;
	_Ai = _VV / _S_sqrt_pi;
	__w1 = _UU - _S_i * _VV;
	__w2 = _UU + _S_i * _VV;

	__term = __cmplx{_Tp{1}};
	auto _Fp = __cmplx{_Tp{0}};
	auto _Gp = __cmplx{_Tp{1}};
	for (int __n = 0; __n < _N_FG; ++__n)
	  {
	    if (std::abs(__t) < _S_eps)
	      break;
	    auto __xx = __log10t * 3 * (__n + 1)
		      + _S_slope_Gp * __n + _S_intercept_Gp;
	    if (__xx < _S_log10min)
	      break;
	    __term *= __ttt;
	    _Fp += _Faip[__n] * __term / __t;
	    _Gp += _Gaip[__n] * __term;
	  }
	auto _UUp = std::sqrt(_Tp{3} * _S_pi)
		  * (_S_Ai0 * _Fp + _S_Aip0 * _Gp);
	auto _VVp = _S_sqrt_pi * (_S_Ai0 * _Fp - _S_Aip0 * _Gp);
	_Bip = _UUp / _S_sqrt_pi;
	_Aip = _VVp / _S_sqrt_pi;
	__w1p = _UUp - _S_i * _VVp;
	__w2p = _UUp + _S_i * _VVp;

	return;
      }
    else // |t| > 3.5
      {
	if (std::real(__t) > _Tp{0})
	  {
	    auto __zeta0 = (_Tp{2} / _Tp{3}) * std::pow(__t, _Tp{1.5L});
	    auto __mqrt0 = std::pow(__t, _Tp{-0.25L});
	    auto __pqrt0 = std::pow(__t, _Tp{+0.25L});
	    auto __ezeta0 = std::exp(-__zeta0);
	    _Ai = __cmplx{_Tp{1}};
	    _Aip = __cmplx{_Tp{1}};
	    auto __fact0 = -_Tp{1} / __zeta0;
	    auto __izeta0 = __cmplx{_Tp{1}};
	    auto __prev_Ai0 = _Tp{1};
	    auto __prev_Aip0 = _Tp{1};
	    for (int __n = 0; __n < _N_cd; ++__n)
	      {
		__izeta0 *= __fact0;
		if (std::abs(_S_cn[__n] * __izeta0) > __prev_Ai0
		 || std::abs(_S_dn[__n] * __izeta0) > __prev_Aip0)
		  break;
		__prev_Ai0 = std::abs(_S_cn[__n] * __izeta0);
		__prev_Aip0 = std::abs(_S_dn[__n] * __izeta0);
		_Ai += _S_cn[__n] * __izeta0;
		_Aip += _S_dn[__n] * __izeta0;
	      }
	    _Ai *= _Tp{+0.5L} * __mqrt0 * __ezeta0 / _S_sqrt_pi;
	    _Aip *= _Tp{-0.5L} * __pqrt0 * __ezeta0 / _S_sqrt_pi;

	    auto __t1 = __t * std::exp(+_Tp{2} * _S_pi * _S_i / _Tp{3});
	    auto __t2 = __t * std::exp(-_Tp{2} * _S_pi * _S_i / _Tp{3});
	    auto __zeta1 = (_Tp{2} / _Tp{3}) * std::pow(__t1, _Tp{1.5L});
	    auto __zeta2 = (_Tp{2} / _Tp{3}) * std::pow(__t2, _Tp{1.5L});
	    auto __mqrt1 = std::pow(__t1, _Tp{-0.25L});
	    auto __mqrt2 = std::pow(__t2, _Tp{-0.25L});
	    auto __pqrt1 = std::pow(__t1, _Tp{+0.25L});
	    auto __pqrt2 = std::pow(__t2, _Tp{+0.25L});
	    auto __ezeta1 = std::exp(-__zeta1);
	    auto __ezeta2 = std::exp(-__zeta2);
	    auto _Ai1 = __cmplx{_Tp{1}};
	    auto _Ai1p = __cmplx{_Tp{1}};
	    auto _Ai2 = _Ai1;
	    auto _Ai2p = _Ai1p;
	    auto __sign = _Tp{1};
	    auto __izeta1 = __cmplx{_Tp{1}};
	    auto __izeta2 = __cmplx{_Tp{1}};
	    auto __prev_Ai1 = _Tp{1};
	    auto __prev_Ai2 = _Tp{1};
	    auto __prev_Ai1p = _Tp{1};
	    auto __prev_Ai2p = _Tp{1};
	    for (int __n = 0; __n < _N_cd; ++__n)
	      {
		__sign *= _Tp{-1};
		__izeta1 /= __zeta1;
		__izeta2 /= __zeta2;
		const auto __term1 = _S_cn[__n] * __izeta1;
		const auto __term2 = _S_cn[__n] * __izeta2;
		const auto __term1p = _S_dn[__n] * __izeta1;
		const auto __term2p = _S_dn[__n] * __izeta2;
		if (std::abs(__term1) > __prev_Ai1
		 || std::abs(__term2) > __prev_Ai2
		 || std::abs(__term1p) > __prev_Ai1p
		 || std::abs(__term2p) > __prev_Ai2p)
		  break;
		__prev_Ai1 = std::abs(__term1);
		__prev_Ai2 = std::abs(__term2);
		__prev_Ai1p = std::abs(__term1p);
		__prev_Ai2p = std::abs(__term2p);
		_Ai1 += __sign * __term1;
		_Ai2 += __sign * __term2;
		_Ai1p += __sign * __term1p;
		_Ai2p += __sign * __term2p;
	      }
	    _Ai1 *= _Tp{+0.5L} * __mqrt1 * __ezeta1 / _S_sqrt_pi;
	    _Ai2 *= _Tp{+0.5L} * __mqrt2 * __ezeta2 / _S_sqrt_pi;
	    _Ai1p *= _Tp{-0.5L} * __pqrt1 * __ezeta1 / _S_sqrt_pi;
	    _Ai2p *= _Tp{-0.5L} * __pqrt2 * __ezeta2 / _S_sqrt_pi;

	    _Bi = std::exp(+_S_i * _S_pi / _Tp{6}) * _Ai1
		+ std::exp(-_S_i * _S_pi / _Tp{6}) * _Ai2;
	    _Bip = std::exp(+_S_i * _Tp{5} * _S_pi / _Tp{6}) * _Ai1p
		 + std::exp(-_S_i * _Tp{5} * _S_pi / _Tp{6}) * _Ai2p;

	    __w1 = _S_sqrt_pi * (_Bi - _S_i * _Ai);
	    __w2 = _S_sqrt_pi * (_Bi + _S_i * _Ai);
	    __w1p = _S_sqrt_pi * (_Bip - _S_i * _Aip);
	    __w2p = _S_sqrt_pi * (_Bip + _S_i * _Aip);

	    return;
	  }
	else // Argument t is on or left of the imaginary axis.
	  {
	    auto __zeta = (_Tp{2} / _Tp{3}) * std::pow(-__t, _Tp{1.5L});
	    auto __mqrt = std::pow(-__t, _Tp{-0.25L});
	    auto __pqrt = std::pow(-__t, _Tp{+0.25L});
	    auto __mezeta = std::exp(-_S_i * (__zeta + (_S_pi / _Tp{4})));
	    auto __pezeta = std::exp(+_S_i * (__zeta + (_S_pi / _Tp{4})));
	    __w1 = __cmplx{_Tp{1}};
	    __w2 = __cmplx{_Tp{1}};
	    __w1p = +_S_i;
	    __w2p = -_S_i;
	    auto __ipn = __cmplx{_Tp{1}};
	    auto __imn = __cmplx{_Tp{1}};
	    auto __ixn = __cmplx{_Tp{1}};
	    auto __prev_w1 = _Tp{1};
	    auto __prev_w2 = _Tp{1};
	    auto __prev_w1p = _Tp{1};
	    auto __prev_w2p = _Tp{1};
	    for (int __n = 0; __n < _N_cd; ++__n)
	      {
		__ipn *= +_S_i;
		__imn *= -_S_i;
		__ixn /= __zeta;
		const auto __term = _S_cn[__n] * __ixn;
		const auto __termp = _S_dn[__n] * __ixn;
		if (std::abs(__term) > __prev_w1
		 || std::abs(__term) > __prev_w2
		 || std::abs(__termp) > __prev_w1p
		 || std::abs(__termp) > __prev_w2p)
		  break;
		__prev_w1 = std::abs(__term);
		__prev_w2 = std::abs(__term);
		__prev_w1p = std::abs(__termp);
		__prev_w2p = std::abs(__termp);
		__w1 += __ipn * __term;
		__w2 += __imn * __term;
		__w1p += +_S_i * __ipn * __termp;
		__w2p += -_S_i * __imn * __termp;
	      }
	    __w1 *= __mqrt * __mezeta;
	    __w2 *= __mqrt * __pezeta;
	    __w1p *= __pqrt * __mezeta;
	    __w2p *= __pqrt * __pezeta;

	    _Bi = (__w1 + __w2) / (_Tp{2} * _S_sqrt_pi);
	    _Ai = (__w2 - __w1) / (_Tp{2} * _S_i * _S_sqrt_pi);
	    _Bip = (__w1p + __w2p) / (_Tp{2} * _S_sqrt_pi);
	    _Aip = (__w2p - __w1p) / (_Tp{2} * _S_i * _S_sqrt_pi);

	    return;
	  }
      }
  }
