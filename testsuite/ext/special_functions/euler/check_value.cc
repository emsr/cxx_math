// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  euler

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_Burkhardt|): 2.1778071482940062e+40 at index 50
// max(|f - f_Burkhardt| / |f_Burkhardt|): 1.3058270164753991e-12
// mean(f - f_Burkhardt): 4.2660442903424096e+38
// variance(f - f_Burkhardt): inf
// stddev(f - f_Burkhardt): inf
const testcase_euler<double>
data001[51] =
{
  { 1.0000000000000000, 0, 0.0 },
  { 0.0000000000000000, 1, 0.0 },
  { -1.0000000000000000, 2, 0.0 },
  { 0.0000000000000000, 3, 0.0 },
  { 5.0000000000000000, 4, 0.0 },
  { 0.0000000000000000, 5, 0.0 },
  { -61.000000000000000, 6, 0.0 },
  { 0.0000000000000000, 7, 0.0 },
  { 1385.0000000000000, 8, 0.0 },
  { 0.0000000000000000, 9, 0.0 },
  { -50521.000000000000, 10, 0.0 },
  { 0.0000000000000000, 11, 0.0 },
  { 2702765.0000000000, 12, 0.0 },
  { 0.0000000000000000, 13, 0.0 },
  { -199360981.00004119, 14, 0.0 },
  { 0.0000000000000000, 15, 0.0 },
  { 19391512144.974678, 16, 0.0 },
  { 0.0000000000000000, 17, 0.0 },
  { -2404879675440.8760, 18, 0.0 },
  { 0.0000000000000000, 19, 0.0 },
  { 370371188237524.56, 20, 0.0 },
  { 0.0000000000000000, 21, 0.0 },
  { -69348874393137960., 22, 0.0 },
  { 0.0000000000000000, 23, 0.0 },
  { 1.5514534163557102e+19, 24, 0.0 },
  { 0.0000000000000000, 25, 0.0 },
  { -4.0870725092931288e+21, 26, 0.0 },
  { 0.0000000000000000, 27, 0.0 },
  { 1.2522596414036313e+24, 28, 0.0 },
  { 0.0000000000000000, 29, 0.0 },
  { -4.4154389324902366e+26, 30, 0.0 },
  { 0.0000000000000000, 31, 0.0 },
  { 1.7751939157953948e+29, 32, 0.0 },
  { 0.0000000000000000, 33, 0.0 },
  { -8.0723299235888006e+31, 34, 0.0 },
  { 0.0000000000000000, 35, 0.0 },
  { 4.1222060339517759e+34, 36, 0.0 },
  { 0.0000000000000000, 37, 0.0 },
  { -2.3489580527043144e+37, 38, 0.0 },
  { 0.0000000000000000, 39, 0.0 },
  { 1.4851150718115004e+40, 40, 0.0 },
  { 0.0000000000000000, 41, 0.0 },
  { -1.0364622733519629e+43, 42, 0.0 },
  { 0.0000000000000000, 43, 0.0 },
  { 7.9475794225976063e+45, 44, 0.0 },
  { 0.0000000000000000, 45, 0.0 },
  { -6.6675375166855578e+48, 46, 0.0 },
  { 0.0000000000000000, 47, 0.0 },
  { 6.0962786455685538e+51, 48, 0.0 },
  { 0.0000000000000000, 49, 0.0 },
  { -6.0532852481886335e+54, 50, 0.0 },
};
const double toler001 = 1.0000000000000006e-10;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_euler<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::euler<Ret>(data[i].n);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
