// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  sph_bessel_i
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

//  Failure at n=0 x=0.0000000000000000 f1=-nan f2=1.0000000000000000
//  Failure at n=1 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=2 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=5 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=10 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=20 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=50 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=100 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  sph_bessel_i
//  Failure at n=0 x=0.0000000000000000 f1=-nan f2=1.0000000000000000
//  Failure at n=1 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=2 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=5 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=10 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=20 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=50 x=0.0000000000000000 f1=-nan f2=0.0000000000000000
//  Failure at n=100 x=0.0000000000000000 f1=-nan f2=0.0000000000000000

template<typename Tp, unsigned int Num>
  void
  test(const testcase_sph_bessel_i<Tp> (&data)[Num], Tp toler)
  {
    typedef Tp Val;
    bool test __attribute__((unused)) = true;
    const Val eps = std::numeric_limits<Val>::epsilon();
    Val max_abs_diff = -Val(1);
    Val max_abs_frac = -Val(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::sph_bessel_i(data[i].n, data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Val(10) * eps
	 && std::abs(f) > Val(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  return 0;
}
