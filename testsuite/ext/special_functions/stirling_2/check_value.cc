// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  stirling_2
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data001[11] =
{
  { 1.0000000000000000, 0, 0, 0.0 },
  { 0.0000000000000000, 0, 1, 0.0 },
  { 0.0000000000000000, 0, 2, 0.0 },
  { 0.0000000000000000, 0, 3, 0.0 },
  { 0.0000000000000000, 0, 4, 0.0 },
  { 0.0000000000000000, 0, 5, 0.0 },
  { 0.0000000000000000, 0, 6, 0.0 },
  { 0.0000000000000000, 0, 7, 0.0 },
  { 0.0000000000000000, 0, 8, 0.0 },
  { 0.0000000000000000, 0, 9, 0.0 },
  { 0.0000000000000000, 0, 10, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data002[11] =
{
  { 0.0000000000000000, 1, 0, 0.0 },
  { 1.0000000000000000, 1, 1, 0.0 },
  { 0.0000000000000000, 1, 2, 0.0 },
  { 0.0000000000000000, 1, 3, 0.0 },
  { 0.0000000000000000, 1, 4, 0.0 },
  { 0.0000000000000000, 1, 5, 0.0 },
  { 0.0000000000000000, 1, 6, 0.0 },
  { 0.0000000000000000, 1, 7, 0.0 },
  { 0.0000000000000000, 1, 8, 0.0 },
  { 0.0000000000000000, 1, 9, 0.0 },
  { 0.0000000000000000, 1, 10, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=2.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data003[11] =
{
  { 0.0000000000000000, 2, 0, 0.0 },
  { 1.0000000000000000, 2, 1, 0.0 },
  { 1.0000000000000000, 2, 2, 0.0 },
  { 0.0000000000000000, 2, 3, 0.0 },
  { 0.0000000000000000, 2, 4, 0.0 },
  { 0.0000000000000000, 2, 5, 0.0 },
  { 0.0000000000000000, 2, 6, 0.0 },
  { 0.0000000000000000, 2, 7, 0.0 },
  { 0.0000000000000000, 2, 8, 0.0 },
  { 0.0000000000000000, 2, 9, 0.0 },
  { 0.0000000000000000, 2, 10, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for n=3.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data004[11] =
{
  { 0.0000000000000000, 3, 0, 0.0 },
  { 1.0000000000000000, 3, 1, 0.0 },
  { 3.0000000000000000, 3, 2, 0.0 },
  { 1.0000000000000000, 3, 3, 0.0 },
  { 0.0000000000000000, 3, 4, 0.0 },
  { 0.0000000000000000, 3, 5, 0.0 },
  { 0.0000000000000000, 3, 6, 0.0 },
  { 0.0000000000000000, 3, 7, 0.0 },
  { 0.0000000000000000, 3, 8, 0.0 },
  { 0.0000000000000000, 3, 9, 0.0 },
  { 0.0000000000000000, 3, 10, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for n=4.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data005[11] =
{
  { 0.0000000000000000, 4, 0, 0.0 },
  { 1.0000000000000000, 4, 1, 0.0 },
  { 7.0000000000000000, 4, 2, 0.0 },
  { 6.0000000000000000, 4, 3, 0.0 },
  { 1.0000000000000000, 4, 4, 0.0 },
  { 0.0000000000000000, 4, 5, 0.0 },
  { 0.0000000000000000, 4, 6, 0.0 },
  { 0.0000000000000000, 4, 7, 0.0 },
  { 0.0000000000000000, 4, 8, 0.0 },
  { 0.0000000000000000, 4, 9, 0.0 },
  { 0.0000000000000000, 4, 10, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data006[11] =
{
  { 0.0000000000000000, 5, 0, 0.0 },
  { 1.0000000000000000, 5, 1, 0.0 },
  { 15.000000000000000, 5, 2, 0.0 },
  { 25.000000000000000, 5, 3, 0.0 },
  { 10.000000000000000, 5, 4, 0.0 },
  { 1.0000000000000000, 5, 5, 0.0 },
  { 0.0000000000000000, 5, 6, 0.0 },
  { 0.0000000000000000, 5, 7, 0.0 },
  { 0.0000000000000000, 5, 8, 0.0 },
  { 0.0000000000000000, 5, 9, 0.0 },
  { 0.0000000000000000, 5, 10, 0.0 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for n=6.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data007[11] =
{
  { 0.0000000000000000, 6, 0, 0.0 },
  { 1.0000000000000000, 6, 1, 0.0 },
  { 31.000000000000000, 6, 2, 0.0 },
  { 90.000000000000000, 6, 3, 0.0 },
  { 65.000000000000000, 6, 4, 0.0 },
  { 15.000000000000000, 6, 5, 0.0 },
  { 1.0000000000000000, 6, 6, 0.0 },
  { 0.0000000000000000, 6, 7, 0.0 },
  { 0.0000000000000000, 6, 8, 0.0 },
  { 0.0000000000000000, 6, 9, 0.0 },
  { 0.0000000000000000, 6, 10, 0.0 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for n=7.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data008[11] =
{
  { 0.0000000000000000, 7, 0, 0.0 },
  { 1.0000000000000000, 7, 1, 0.0 },
  { 63.000000000000000, 7, 2, 0.0 },
  { 301.00000000000000, 7, 3, 0.0 },
  { 350.00000000000000, 7, 4, 0.0 },
  { 140.00000000000000, 7, 5, 0.0 },
  { 21.000000000000000, 7, 6, 0.0 },
  { 1.0000000000000000, 7, 7, 0.0 },
  { 0.0000000000000000, 7, 8, 0.0 },
  { 0.0000000000000000, 7, 9, 0.0 },
  { 0.0000000000000000, 7, 10, 0.0 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for n=8.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data009[11] =
{
  { 0.0000000000000000, 8, 0, 0.0 },
  { 1.0000000000000000, 8, 1, 0.0 },
  { 127.00000000000000, 8, 2, 0.0 },
  { 966.00000000000000, 8, 3, 0.0 },
  { 1701.0000000000000, 8, 4, 0.0 },
  { 1050.0000000000000, 8, 5, 0.0 },
  { 266.00000000000000, 8, 6, 0.0 },
  { 28.000000000000000, 8, 7, 0.0 },
  { 1.0000000000000000, 8, 8, 0.0 },
  { 0.0000000000000000, 8, 9, 0.0 },
  { 0.0000000000000000, 8, 10, 0.0 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for n=9.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data010[11] =
{
  { 0.0000000000000000, 9, 0, 0.0 },
  { 1.0000000000000000, 9, 1, 0.0 },
  { 255.00000000000000, 9, 2, 0.0 },
  { 3025.0000000000000, 9, 3, 0.0 },
  { 7770.0000000000000, 9, 4, 0.0 },
  { 6951.0000000000000, 9, 5, 0.0 },
  { 2646.0000000000000, 9, 6, 0.0 },
  { 462.00000000000000, 9, 7, 0.0 },
  { 36.000000000000000, 9, 8, 0.0 },
  { 1.0000000000000000, 9, 9, 0.0 },
  { 0.0000000000000000, 9, 10, 0.0 },
};
const double toler010 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_Burkhardt|): 0.0000000000000000 at index 0
// max(|f - f_Burkhardt| / |f_Burkhardt|): 0.0000000000000000
// mean(f - f_Burkhardt): 0.0000000000000000
// variance(f - f_Burkhardt): 0.0000000000000000
// stddev(f - f_Burkhardt): 0.0000000000000000
const testcase_stirling_2<double>
data011[11] =
{
  { 0.0000000000000000, 10, 0, 0.0 },
  { 1.0000000000000000, 10, 1, 0.0 },
  { 511.00000000000000, 10, 2, 0.0 },
  { 9330.0000000000000, 10, 3, 0.0 },
  { 34105.000000000000, 10, 4, 0.0 },
  { 42525.000000000000, 10, 5, 0.0 },
  { 22827.000000000000, 10, 6, 0.0 },
  { 5880.0000000000000, 10, 7, 0.0 },
  { 750.00000000000000, 10, 8, 0.0 },
  { 45.000000000000000, 10, 9, 0.0 },
  { 1.0000000000000000, 10, 10, 0.0 },
};
const double toler011 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_stirling_2<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::stirling_2<Ret>(data[i].n, data[i].m);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  return 0;
}
