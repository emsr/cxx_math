// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  chebyshev_v
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_chebyshev_v<double>
data001[21] =
{
  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },
  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },
  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },
  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },
  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },
  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 6.6613381477509392e-16 at index 6
// max(|f - f_GSL| / |f_GSL|): 8.3266726846886593e-16
// mean(f - f_GSL): -1.0249396128986487e-16
// variance(f - f_GSL): 5.5151313529663665e-34
// stddev(f - f_GSL): 2.3484316794333972e-17
const testcase_chebyshev_v<double>
data002[21] =
{
  { -3.0000000000000000, 1, -1.0000000000000000, 0.0 },
  { -2.7999999999999994, 1, -0.90000000000000002, 0.0 },
  { -2.5999999999999996, 1, -0.80000000000000004, 0.0 },
  { -2.4000000000000004, 1, -0.69999999999999996, 0.0 },
  { -2.1999999999999997, 1, -0.59999999999999998, 0.0 },
  { -2.0000000000000004, 1, -0.50000000000000000, 0.0 },
  { -1.7999999999999992, 1, -0.39999999999999991, 0.0 },
  { -1.5999999999999996, 1, -0.29999999999999993, 0.0 },
  { -1.3999999999999999, 1, -0.19999999999999996, 0.0 },
  { -1.1999999999999995, 1, -0.099999999999999978, 0.0 },
  { -0.99999999999999989, 1, 0.0000000000000000, 0.0 },
  { -0.79999999999999993, 1, 0.10000000000000009, 0.0 },
  { -0.59999999999999976, 1, 0.20000000000000018, 0.0 },
  { -0.39999999999999969, 1, 0.30000000000000004, 0.0 },
  { -0.19999999999999971, 1, 0.40000000000000013, 0.0 },
  { 7.0705015914993692e-17, 1, 0.50000000000000000, 0.0 },
  { 0.20000000000000034, 1, 0.60000000000000009, 0.0 },
  { 0.40000000000000024, 1, 0.70000000000000018, 0.0 },
  { 0.60000000000000020, 1, 0.80000000000000004, 0.0 },
  { 0.80000000000000027, 1, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 1, 1.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 3.5527136788005009e-15 at index 1
// max(|f - f_GSL| / |f_GSL|): 3.2792504271772992e-15
// mean(f - f_GSL): -2.4319171015598669e-16
// variance(f - f_GSL): 3.1049659141511552e-33
// stddev(f - f_GSL): 5.5722221008778492e-17
const testcase_chebyshev_v<double>
data003[21] =
{
  { -11.000000000000000, 5, -1.0000000000000000, 0.0 },
  { -2.7452799999999993, 5, -0.90000000000000002, 0.0 },
  { 1.2246400000000000, 5, -0.80000000000000004, 0.0 },
  { 2.4361599999999992, 5, -0.69999999999999996, 0.0 },
  { 2.0700799999999995, 5, -0.59999999999999998, 0.0 },
  { 1.0000000000000016, 5, -0.50000000000000000, 0.0 },
  { -0.16928000000000154, 5, -0.39999999999999991, 0.0 },
  { -1.0633600000000010, 5, -0.29999999999999993, 0.0 },
  { -1.4998400000000001, 5, -0.19999999999999996, 0.0 },
  { -1.4499199999999994, 5, -0.099999999999999978, 0.0 },
  { -0.99999999999999878, 5, 0.0000000000000000, 0.0 },
  { -0.31327999999999995, 5, 0.10000000000000009, 0.0 },
  { 0.40864000000000106, 5, 0.20000000000000018, 0.0 },
  { 0.96416000000000057, 5, 0.30000000000000004, 0.0 },
  { 1.1900800000000000, 5, 0.40000000000000013, 0.0 },
  { 0.99999999999999967, 5, 0.50000000000000000, 0.0 },
  { 0.42271999999999949, 5, 0.60000000000000009, 0.0 },
  { -0.35936000000000123, 5, 0.70000000000000018, 0.0 },
  { -0.97184000000000026, 5, 0.80000000000000004, 0.0 },
  { -0.80991999999999897, 5, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 5, 1.0000000000000000, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for n=8.
// max(|f - f_GSL|): 8.4376949871511897e-15 at index 1
// max(|f - f_GSL| / |f_GSL|): 1.1852596695487092e-14
// mean(f - f_GSL): 5.1116518425449919e-16
// variance(f - f_GSL): 1.3717716893681642e-32
// stddev(f - f_GSL): 1.1712265747361458e-16
const testcase_chebyshev_v<double>
data004[21] =
{
  { 17.000000000000000, 8, -1.0000000000000000, 0.0 },
  { -2.8540390400000049, 8, -0.90000000000000002, 0.0 },
  { -2.2978534399999995, 8, -0.80000000000000004, 0.0 },
  { 1.1870489599999978, 8, -0.69999999999999996, 0.0 },
  { 2.2351897599999990, 8, -0.59999999999999998, 0.0 },
  { 1.0000000000000011, 8, -0.50000000000000000, 0.0 },
  { -0.75960064000000382, 8, -0.39999999999999991, 0.0 },
  { -1.6443622400000009, 8, -0.29999999999999993, 0.0 },
  { -1.2638182400000002, 8, -0.19999999999999996, 0.0 },
  { -0.098352639999998548, 8, -0.099999999999999978, 0.0 },
  { 0.99999999999999956, 8, 0.0000000000000000, 0.0 },
  { 1.3454617599999998, 8, 0.10000000000000009, 0.0 },
  { 0.77578495999999864, 8, 0.20000000000000018, 0.0 },
  { -0.28722944000000022, 8, 0.30000000000000004, 0.0 },
  { -1.0868710400000001, 8, 0.40000000000000013, 0.0 },
  { -0.99999999999999900, 8, 0.50000000000000000, 0.0 },
  { -0.031331839999998633, 8, 0.60000000000000009, 0.0 },
  { 0.96322816000000067, 8, 0.70000000000000018, 0.0 },
  { 0.72417535999999916, 8, 0.80000000000000004, 0.0 },
  { -0.78988544000000172, 8, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 8, 1.0000000000000000, 0.0 },
};
const double toler004 = 1.0000000000000008e-12;

// Test data for n=10.
// max(|f - f_GSL|): 5.1070259132757201e-15 at index 4
// max(|f - f_GSL| / |f_GSL|): 1.7204069146644507e-14
// mean(f - f_GSL): -6.7793764429780610e-17
// variance(f - f_GSL): 2.4128971101693079e-34
// stddev(f - f_GSL): 1.5533502857273718e-17
const testcase_chebyshev_v<double>
data005[21] =
{
  { 21.000000000000000, 10, -1.0000000000000000, 0.0 },
  { -4.4709124095999995, 10, -0.90000000000000002, 0.0 },
  { 1.4422260735999999, 10, -0.80000000000000004, 0.0 },
  { 2.2687420416000044, 10, -0.69999999999999996, 0.0 },
  { -0.68601026560000600, 10, -0.59999999999999998, 0.0 },
  { -2.0000000000000004, 10, -0.50000000000000000, 0.0 },
  { -0.70076712959999776, 10, -0.39999999999999991, 0.0 },
  { 1.1243380736000030, 10, -0.29999999999999993, 0.0 },
  { 1.5350895616000002, 10, -0.19999999999999996, 0.0 },
  { 0.39238717439999821, 10, -0.099999999999999978, 0.0 },
  { -0.99999999999999967, 10, 0.0000000000000000, 0.0 },
  { -1.3008490495999998, 10, 0.10000000000000009, 0.0 },
  { -0.30930032639999799, 10, 0.20000000000000018, 0.0 },
  { 0.92616028160000019, 10, 0.30000000000000004, 0.0 },
  { 1.1036806143999991, 10, 0.40000000000000013, 0.0 },
  { -4.9493511140495585e-16, 10, 0.50000000000000000, 0.0 },
  { -1.0641181696000006, 10, 0.60000000000000009, 0.0 },
  { -0.51782512639999734, 10, 0.70000000000000018, 0.0 },
  { 0.93808220160000066, 10, 0.80000000000000004, 0.0 },
  { 0.023998054399996725, 10, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 10, 1.0000000000000000, 0.0 },
};
const double toler005 = 1.0000000000000008e-12;

// Test data for n=20.
// max(|f - f_GSL|): 2.2759572004815709e-14 at index 1
// max(|f - f_GSL| / |f_GSL|): 2.8626638891546102e-14
// mean(f - f_GSL): -1.4578285668589854e-15
// variance(f - f_GSL): 1.1157636684338145e-31
// stddev(f - f_GSL): 3.3403048789501454e-16
const testcase_chebyshev_v<double>
data006[21] =
{
  { 41.000000000000000, 20, -1.0000000000000000, 0.0 },
  { 0.79504869890740026, 20, -0.90000000000000002, 0.0 },
  { 1.8512711080640354, 20, -0.80000000000000004, 0.0 },
  { -1.4530226431858666, 20, -0.69999999999999996, 0.0 },
  { 0.35623761485477434, 20, -0.59999999999999998, 0.0 },
  { 1.0000000000000118, 20, -0.50000000000000000, 0.0 },
  { -1.7881475926508568, 20, -0.39999999999999991, 0.0 },
  { 1.2386077195392646, 20, -0.29999999999999993, 0.0 },
  { 0.31543552675929504, 20, -0.19999999999999996, 0.0 },
  { -1.4229092060125592, 20, -0.099999999999999978, 0.0 },
  { 1.0000000000000040, 20, 0.0000000000000000, 0.0 },
  { 0.40203624022562057, 20, 0.10000000000000009, 0.0 },
  { -1.2650429316715133, 20, 0.20000000000000018, 0.0 },
  { 0.84402681417869452, 20, 0.30000000000000004, 0.0 },
  { 0.24130140035435174, 20, 0.40000000000000013, 0.0 },
  { -0.99999999999999778, 20, 0.50000000000000000, 0.0 },
  { 1.1037543614594003, 20, 0.60000000000000009, 0.0 },
  { -0.89660062573515742, 20, 0.70000000000000018, 0.0 },
  { 0.85458211259118944, 20, 0.80000000000000004, 0.0 },
  { -1.0096350973538484, 20, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 20, 1.0000000000000000, 0.0 },
};
const double toler006 = 2.5000000000000015e-12;

// Test data for n=40.
// max(|f - f_GSL|): 3.4638958368304884e-14 at index 1
// max(|f - f_GSL| / |f_GSL|): 5.6248751147756757e-14
// mean(f - f_GSL): -1.0894974281809147e-15
// variance(f - f_GSL): 6.2317743915673436e-32
// stddev(f - f_GSL): 2.4963522170493778e-16
const testcase_chebyshev_v<double>
data007[21] =
{
  { 81.000000000000000, 40, -1.0000000000000000, 0.0 },
  { -2.4619369906291766, 40, -0.90000000000000002, 0.0 },
  { 2.5331546572256207, 40, -0.80000000000000004, 0.0 },
  { 1.8481101593325175, 40, -0.69999999999999996, 0.0 },
  { -0.32011979092607334, 40, -0.59999999999999998, 0.0 },
  { -2.0000000000000004, 40, -0.50000000000000000, 0.0 },
  { 0.31440756245613771, 40, -0.39999999999999991, 0.0 },
  { 1.4329479238334013, 40, -0.29999999999999993, 0.0 },
  { -1.3992477229963782, 40, -0.19999999999999996, 0.0 },
  { 0.19293637359526886, 40, -0.099999999999999978, 0.0 },
  { 1.0000000000000051, 40, 0.0000000000000000, 0.0 },
  { -1.3370585083307143, 40, 0.10000000000000009, 0.0 },
  { 0.60116875594652786, 40, 0.20000000000000018, 0.0 },
  { 0.65788833124633406, 40, 0.30000000000000004, 0.0 },
  { -1.1773725987499899, 40, 0.40000000000000013, 0.0 },
  { -3.9601956285139501e-15, 40, 0.50000000000000000, 0.0 },
  { 1.1065174331497698, 40, 0.60000000000000009, 0.0 },
  { 0.75745186284308752, 40, 0.70000000000000018, 0.0 },
  { 0.63097169179115309, 40, 0.80000000000000004, 0.0 },
  { 0.85651884958431201, 40, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 40, 1.0000000000000000, 0.0 },
};
const double toler007 = 5.0000000000000029e-12;

// Test data for n=100.
// max(|f - f_GSL|): 2.3980817331903381e-14 at index 1
// max(|f - f_GSL| / |f_GSL|): 1.2810138323776816e-12
// mean(f - f_GSL): -2.0735526376358744e-15
// variance(f - f_GSL): 2.2573007840495132e-31
// stddev(f - f_GSL): 4.7511059597208660e-16
const testcase_chebyshev_v<double>
data008[21] =
{
  { 201.00000000000000, 100, -1.0000000000000000, 0.0 },
  { 4.3595126348515896, 100, -0.90000000000000002, 0.0 },
  { 3.0483748605943672, 100, -0.80000000000000004, 0.0 },
  { -2.5434335568364426, 100, -0.69999999999999996, 0.0 },
  { -1.9447259865843127, 100, -0.59999999999999998, 0.0 },
  { -2.0000000000000004, 100, -0.50000000000000000, 0.0 },
  { -0.48462380179616826, 100, -0.39999999999999991, 0.0 },
  { 1.6902413146121968, 100, -0.29999999999999993, 0.0 },
  { -0.89475669222156184, 100, -0.19999999999999996, 0.0 },
  { -0.21296288072518255, 100, -0.099999999999999978, 0.0 },
  { 1.0000000000000018, 100, 0.0000000000000000, 0.0 },
  { -1.3345690929659351, 100, 0.10000000000000009, 0.0 },
  { 1.0643966872442043, 100, 0.20000000000000018, 0.0 },
  { -0.011059589108422351, 100, 0.30000000000000004, 0.0 },
  { -1.1523528299091910, 100, 0.40000000000000013, 0.0 },
  { -6.7883962651136972e-15, 100, 0.50000000000000000, 0.0 },
  { 0.55182443700499828, 100, 0.60000000000000009, 0.0 },
  { -0.18674254467755041, 100, 0.70000000000000018, 0.0 },
  { -0.28035903752475322, 100, 0.80000000000000004, 0.0 },
  { 0.22880117622187437, 100, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 100, 1.0000000000000000, 0.0 },
};
const double toler008 = 1.0000000000000006e-10;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_chebyshev_v<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::chebyshev_v(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  return 0;
}
