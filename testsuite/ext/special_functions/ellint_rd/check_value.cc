// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_rd
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for x=0.50000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data001[] = {
  { 6.6643244072375483, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 3.0205847775221781, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.8806524630730101, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.3370818171827916, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 1.0233592856949612, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.82104298622829042, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.68068727087691305, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.57813379227068229, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.50023718770301384, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.43925837540695190, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data001[i].x), Tp(data001[i].y),
		     Tp(data001[i].z));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data002[] = {
  { 2.8284271247461898, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.4787028816827661, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.98915776155858848, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.73636967775666784, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.58252335304008718, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.47936133973515282, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.40558098790040226, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.35032352839115055, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.30747679967138358, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.27334019079898858, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data002[i].x), Tp(data002[i].y),
		     Tp(data002[i].z));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data003[] = {
  { 2.2606485591586170, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 1.2108418600591322, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.82154573752379845, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.61767396750725501, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.49231373047778376, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.40757165683116153, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.34656332404703094, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.30061638462319057, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.26481795103277966, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.23617699585414989, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data003)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data003[i].x), Tp(data003[i].y),
		     Tp(data003[i].z));
	const Tp f0 = data003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data004[] = {
  { 1.9549108620038838, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 1.0611477161274090, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.72586814600021654, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.54893055973196070, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.43950072051063654, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.36518380519509192, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.31147420949596138, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.27089078041687914, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.23918047748576837, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.21374598482754290, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data004)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data004[i].x), Tp(data004[i].y),
		     Tp(data004[i].z));
	const Tp f0 = data004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data005[] = {
  { 1.7531355046813080, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.96012401711294926, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.66043636487545310, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.50147982951463554, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.40278805237973769, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.33555181924388899, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.28683033981461781, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.24993166265595113, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.22104256809274758, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.19782954572559397, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data005)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data005[i].x), Tp(data005[i].y),
		     Tp(data005[i].z));
	const Tp f0 = data005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data006[] = {
  { 1.6061049195809842, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.88534802192886508, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.61154086207362235, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.46577960132586499, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.37502224024468017, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.31304670459383982, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.26804805787209740, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.23391006877275144, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.20714173705525246, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.18560354169394075, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data006)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data006[i].x), Tp(data006[i].y),
		     Tp(data006[i].z));
	const Tp f0 = data006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data007[] = {
  { 1.4923701377013003, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.82681551228230354, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.57298419701539560, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.43747841423603606, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.35292026198805915, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.29507237965418759, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.25300508036871605, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.22104742408748265, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.19595843732162688, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.17574955367014042, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data007)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data007[i].x), Tp(data007[i].y),
		     Tp(data007[i].z));
	const Tp f0 = data007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data008[] = {
  { 1.4007769575243452, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.77923181010779019, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.54145321304962368, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.41423400668258142, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.33470600764004355, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.28021882909562468, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.24054506091464567, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.21037210353882052, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.18666070285211242, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.16754435706279278, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data008)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data008[i].x), Tp(data008[i].y),
		     Tp(data008[i].z));
	const Tp f0 = data008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data009[] = {
  { 1.3248382358044246, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.73947439202003218, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.51497797638211906, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.39464586865175749, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.31931301755908920, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.26763661712549192, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.22996951235475088, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.20129588838919918, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.17874390787479075, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.16054856458268146, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data009)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data009[i].x), Tp(data009[i].y),
		     Tp(data009[i].z));
	const Tp f0 = data009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data010[] = {
  { 1.2604751625374033, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.70555729253351007, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.49229699042093134, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.37781286698129474, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.30605263016592266, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.25677566527305340, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.22082505702186819, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.19343623197211957, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.17187932565251629, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.15447553632956265, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data010)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data010[i].x), Tp(data010[i].y),
		     Tp(data010[i].z));
	const Tp f0 = data010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data011[] = {
  { 1.2049706911003792, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.67614468006652750, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.47255674044113682, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.36312278662905823, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.29445551387110391, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.24726015371628141, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.21280130805001146, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.18653078812307397, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.16584118671070608, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.14912815584871789, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test011()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data011)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data011[i].x), Tp(data011[i].y),
		     Tp(data011[i].z));
	const Tp f0 = data011[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data012[] = {
  { 5.0832785087638745, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 2.3561944901923448, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.4873381477764660, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 1.0679379896673959, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.82363382945246122, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.66491105484705426, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.55411470797192719, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.47272980996559200, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.41062645838168715, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.36181214525256422, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test012()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data012)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data012[i].x), Tp(data012[i].y),
		     Tp(data012[i].z));
	const Tp f0 = data012[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data013[] = {
  { 2.2606485591586161, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.2108418600591322, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.82154573752379845, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.61767396750725501, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.49231373047778387, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.40757165683116153, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.34656332404703094, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.30061638462319057, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.26481795103277966, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.23617699585414989, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test013()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data013)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data013[i].x), Tp(data013[i].y),
		     Tp(data013[i].z));
	const Tp f0 = data013[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data014[] = {
  { 1.8209569670010211, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.68839967114991707, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.52280041749898654, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.41987824764540199, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.34972008043069208, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.29886568055108975, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.26034599630094629, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.23018642093643524, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.20595310656708540, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test014()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data014)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data014[i].x), Tp(data014[i].y),
		     Tp(data014[i].z));
	const Tp f0 = data014[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data015[] = {
  { 1.5814081614865474, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.88054503581663068, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.61125925410130966, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.46698823242950277, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.37677786814173148, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.31498751799812219, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.27001912357314961, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.23584167134100853, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.20900272953827995, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.18738132073839855, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test015()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data015)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data015[i].x), Tp(data015[i].y),
		     Tp(data015[i].z));
	const Tp f0 = data015[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data016[] = {
  { 1.4222020153797952, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.79925996303032809, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.55802917749871084, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.42809724509617236, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.34652107475177768, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.29046028102899063, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.24954873194434146, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.21838072549338963, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.19385417369521213, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.17405918864604358, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test016()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data016)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data016[i].x), Tp(data016[i].y),
		     Tp(data016[i].z));
	const Tp f0 = data016[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data017[] = {
  { 1.3056198205930980, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.73874417422781258, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.51799997289580957, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.39864160755780492, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.32347894201494248, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.27169889878937059, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.23383296160821199, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.20493348073535311, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.18215617344720567, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.16374710393804559, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test017()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data017)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data017[i].x), Tp(data017[i].y),
		     Tp(data017[i].z));
	const Tp f0 = data017[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data018[] = {
  { 1.2151025736697127, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.69116536356909253, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.48628331750700976, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.37517237295715422, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.30504032772116141, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.25663314414203003, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.22117588743290356, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.19407626059349833, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.17269067548325900, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.15538696990472234, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test018()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data018)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data018[i].x), Tp(data018[i].y),
		     Tp(data018[i].z));
	const Tp f0 = data018[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data019[] = {
  { 1.1419917039005423, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.65235088546172837, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.46024688486012044, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.35581870961103756, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.28978118810962383, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.24412921280985586, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.21064553855226686, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.18502449827060388, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.16478482871102293, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.14839309852132307, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test019()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data019)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data019[i].x), Tp(data019[i].y),
		     Tp(data019[i].z));
	const Tp f0 = data019[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data020[] = {
  { 1.0812295669164196, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.61982700184952677, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.43831649206456913, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.33945510164031761, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.27684095488117799, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.23349951607281286, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.20167510684220102, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.17729989403903632, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.15802760630811119, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.14240708160931742, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test020()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data020)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data020[i].x), Tp(data020[i].y),
		     Tp(data020[i].z));
	const Tp f0 = data020[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data021[] = {
  { 1.0296247564337100, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.59201357071832994, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.41947926040273381, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.32535367486128924, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.26566096411271745, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.22429633237312194, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.19389460229359842, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.17058958463505433, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.15214967292571627, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.13719370300096684, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test021()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data021)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data021[i].x), Tp(data021[i].y),
		     Tp(data021[i].z));
	const Tp f0 = data021[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data022[] = {
  { 0.98504492018035017, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.56784383996639420, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.40304711931662451, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.31301779500799842, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.25585876344175834, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.21621234527246269, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.18704950966394510, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.16467795731794288, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.14696512174988718, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.13259038458639197, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test022()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data022)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data022[i].x), Tp(data022[i].y),
		     Tp(data022[i].z));
	const Tp f0 = data022[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data023[] = {
  { 4.2978716322005353, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 2.0162044036131705, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.2825498301618641, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.92611816750027975, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.71744598019963990, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.58131181147083866, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.48595010807084882, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.41568974422172894, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.36193173526911160, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.31957598621544386, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test023()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data023)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data023[i].x), Tp(data023[i].y),
		     Tp(data023[i].z));
	const Tp f0 = data023[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data024[] = {
  { 1.9549108620038838, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 1.0611477161274090, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.72586814600021654, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.54893055973196070, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.43950072051063654, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.36518380519509197, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.31147420949596138, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.27089078041687914, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.23918047748576837, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.21374598482754295, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test024()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data024)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data024[i].x), Tp(data024[i].y),
		     Tp(data024[i].z));
	const Tp f0 = data024[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data025[] = {
  { 1.5814081614865474, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.88054503581663068, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.61125925410130988, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.46698823242950288, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.37677786814173136, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.31498751799812219, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.27001912357314961, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.23584167134100853, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.20900272953827995, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.18738132073839855, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test025()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data025)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data025[i].x), Tp(data025[i].y),
		     Tp(data025[i].z));
	const Tp f0 = data025[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data026[] = {
  { 1.3766908327457574, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.77748149179738102, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.54433105395181736, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.41837650815327421, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.33912786739118500, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.28457650226367354, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.24471340945057926, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.21431050909870999, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.19036349996895291, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.17102051213438713, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test026()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data026)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data026[i].x), Tp(data026[i].y),
		     Tp(data026[i].z));
	const Tp f0 = data026[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data027[] = {
  { 1.2401228181757642, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.70703339764066364, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.49791852710991058, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.38432416199179953, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.31255150258997205, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.26297849556575459, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.22665041578672968, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.19887612892179202, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.17695302442341893, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.15921145309369730, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test027()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data027)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data027[i].x), Tp(data027[i].y),
		     Tp(data027[i].z));
	const Tp f0 = data027[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data028[] = {
  { 1.1398486474364056, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.65441549744542571, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.46289159833808347, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.35843536532262715, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.29223188166847097, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.24638988202477222, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.21272432718264370, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.18693825882529830, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.16655159039492887, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.15002963314335371, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test028()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data028)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data028[i].x), Tp(data028[i].y),
		     Tp(data028[i].z));
	const Tp f0 = data028[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data029[] = {
  { 1.0618319977895128, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.61294272686796347, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.43506201805778916, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.33774761508758611, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.27592200955549129, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.23302662461706911, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.20147201353236258, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.17726750745753769, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.15810655090365155, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.14256003399301431, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test029()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data029)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data029[i].x), Tp(data029[i].y),
		     Tp(data029[i].z));
	const Tp f0 = data029[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data030[] = {
  { 0.99871277699951810, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.57904133298268434, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.41216577909955915, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.32064732908289950, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.26239113738919756, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.22190726768073549, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.19208571013328107, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.16918315988532187, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.15103360702596744, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.13629366705973089, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test030()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data030)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data030[i].x), Tp(data030[i].y),
		     Tp(data030[i].z));
	const Tp f0 = data030[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data031[] = {
  { 0.94618205076987916, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.55058670798601161, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.39284474545064513, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.30616051418179241, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.25089289504482509, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.21243444012001572, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.18407229860844418, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.16226862482523122, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.14497441712587616, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.13091780755207250, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test031()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data031)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data031[i].x), Tp(data031[i].y),
		     Tp(data031[i].z));
	const Tp f0 = data031[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data032[] = {
  { 0.90151569394875264, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.52621854843823790, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.37622277080655531, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.29365552311085208, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.24094132614427749, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.20421797318537210, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.17710887253682120, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.15625051876858431, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.13969338982979984, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.12622652631192144, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test032()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data032)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data032[i].x), Tp(data032[i].y),
		     Tp(data032[i].z));
	const Tp f0 = data032[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data033[] = {
  { 0.86289061321428662, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.50501667495530911, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.36170333943276445, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.28270034324677890, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.23220291160200487, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.19698935005202972, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.17097270188240146, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.15093991123975528, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.13502744596076066, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.12207707406867491, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test033()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data033)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data033[i].x), Tp(data033[i].y),
		     Tp(data033[i].z));
	const Tp f0 = data033[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data034[] = {
  { 3.8009937597602086, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.7972103521033889, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.1491867912175242, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.83304055090469353, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.64733799690034244, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.52585344510508902, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.44055184461906954, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.37757309719027227, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.32929762047761185, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.29119853301023979, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test034()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data034)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data034[i].x), Tp(data034[i].y),
		     Tp(data034[i].z));
	const Tp f0 = data034[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data035[] = {
  { 1.7531355046813080, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.96012401711294959, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.66043636487545310, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.50147982951463554, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.40278805237973769, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.33555181924388910, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.28683033981461781, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.24993166265595113, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.22104256809274758, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.19782954572559394, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test035()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data035)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data035[i].x), Tp(data035[i].y),
		     Tp(data035[i].z));
	const Tp f0 = data035[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data036[] = {
  { 1.4222020153797954, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.79925996303032809, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.55802917749871084, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.42809724509617247, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.34652107475177768, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.29046028102899069, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.24954873194434146, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.21838072549338963, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.19385417369521213, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.17405918864604358, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test036()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data036)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data036[i].x), Tp(data036[i].y),
		     Tp(data036[i].z));
	const Tp f0 = data036[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data037[] = {
  { 1.2401228181757642, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.70703339764066353, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.49791852710991058, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.38432416199179953, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.31255150258997205, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.26297849556575459, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.22665041578672968, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.19887612892179199, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.17695302442341893, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.15921145309369730, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test037()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data037)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data037[i].x), Tp(data037[i].y),
		     Tp(data037[i].z));
	const Tp f0 = data037[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data038[] = {
  { 1.1183606845303713, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.64380550980765505, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.45609654740798999, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.35355339059327373, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.28848454403954715, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.24338603781834769, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.21024125233844609, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.18483786021034576, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.16474276906428437, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.14844937809139419, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test038()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data038)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data038[i].x), Tp(data038[i].y),
		     Tp(data038[i].z));
	const Tp f0 = data038[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data039[] = {
  { 1.0287989423954247, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.59647810419029124, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.42445824709773305, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.33009937700548325, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.27003393558467964, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.22829567980143309, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.19755371413001097, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.17394769345507102, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.15524361857280369, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.14005584409361146, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test039()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data039)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data039[i].x), Tp(data039[i].y),
		     Tp(data039[i].z));
	const Tp f0 = data039[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data040[] = {
  { 0.95902057408895203, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.55911221740544415, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.39927388934665914, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.31131968298304530, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.25519306961823912, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.21611278181903348, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.18727903597199327, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.16510527294261051, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.14751292779556122, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.13321109278201460, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test040()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data040)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data040[i].x), Tp(data040[i].y),
		     Tp(data040[i].z));
	const Tp f0 = data040[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data041[] = {
  { 0.90250310497734665, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.52852597747230279, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.37852235490292235, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.29577123669941352, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.24285978826321852, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.20595752308085513, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.17869249731228154, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.15769944445407630, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.14102579994117995, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.12745765236291223, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test041()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data041)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data041[i].x), Tp(data041[i].y),
		     Tp(data041[i].z));
	const Tp f0 = data041[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data042[] = {
  { 0.85542246869229122, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.50282434464611403, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.36098876068085428, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.28258106989482712, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.23236416483159619, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.19729310775464495, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.17135057751833419, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.15135523250739152, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.13545948266743188, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.12251370089051629, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test042()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data042)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data042[i].x), Tp(data042[i].y),
		     Tp(data042[i].z));
	const Tp f0 = data042[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data043[] = {
  { 0.81535812729905277, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.48079215144349863, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.34588803339345520, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.27118200606113158, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.22326916372124522, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.18976821759995394, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.16496223617891401, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.14582603024683105, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.13060131179612539, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.11819323829604647, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test043()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data043)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data043[i].x), Tp(data043[i].y),
		     Tp(data043[i].z));
	const Tp f0 = data043[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data044[] = {
  { 0.78068845414522159, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.46160631439647176, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.33268487290100718, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.26118550757927134, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.21527433441567498, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.18314064674453737, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.15932635698806283, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.14094109198361518, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.12630379536276651, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.11436707673490792, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test044()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data044)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data044[i].x), Tp(data044[i].y),
		     Tp(data044[i].z));
	const Tp f0 = data044[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data045[] = {
  { 3.4486955468275755, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.6399601516866462, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 1.0526606192605990, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.76528469292686951, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.59607529594776598, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.48515600929445024, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.40713640362133913, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.34944504467543969, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.30516151808247999, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.27016931577362674, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test045()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data045)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data045[i].x), Tp(data045[i].y),
		     Tp(data045[i].z));
	const Tp f0 = data045[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data046[] = {
  { 1.6061049195809842, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.88534802192886553, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.61154086207362235, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.46577960132586493, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.37502224024468017, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.31304670459383982, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.26804805787209740, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.23391006877275147, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.20714173705525246, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.18560354169394075, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test046()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data046)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data046[i].x), Tp(data046[i].y),
		     Tp(data046[i].z));
	const Tp f0 = data046[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data047[] = {
  { 1.3056198205930982, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.73874417422781258, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.51799997289580957, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.39864160755780492, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.32347894201494248, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.27169889878937059, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.23383296160821201, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.20493348073535311, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.18215617344720572, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.16374710393804567, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test047()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data047)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data047[i].x), Tp(data047[i].y),
		     Tp(data047[i].z));
	const Tp f0 = data047[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data048[] = {
  { 1.1398486474364056, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.65441549744542593, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.46289159833808347, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.35843536532262710, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.29223188166847103, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.24638988202477222, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.21272432718264370, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.18693825882529827, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.16655159039492887, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.15002963314335371, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test048()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data048)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data048[i].x), Tp(data048[i].y),
		     Tp(data048[i].z));
	const Tp f0 = data048[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data049[] = {
  { 1.0287989423954245, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.59647810419029124, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.42445824709773294, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.33009937700548325, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.27003393558467964, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.22829567980143303, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.19755371413001097, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.17394769345507102, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.15524361857280369, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.14005584409361146, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test049()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data049)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data049[i].x), Tp(data049[i].y),
		     Tp(data049[i].z));
	const Tp f0 = data049[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data050[] = {
  { 0.94701179435835359, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.55304211597011477, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.39533213377632948, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.30846026625449768, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.25298221281347033, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.21433033980271562, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.18579864501502716, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.16384806041360628, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.14642656514910740, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.13225920647869971, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test050()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data050)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data050[i].x), Tp(data050[i].y),
		     Tp(data050[i].z));
	const Tp f0 = data050[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data051[] = {
  { 0.88322637190106779, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.51870588849980037, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.37211529941965255, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.29110791982181117, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.23924499161241772, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.20303725112222404, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.17626300757548063, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.15563327802202254, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.13923822831329410, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.12588968030716380, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test051()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data051)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data051[i].x), Tp(data051[i].y),
		     Tp(data051[i].z));
	const Tp f0 = data051[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data052[] = {
  { 0.83152026568913118, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.49057095595638411, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.35296320663898367, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.27672366320740666, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.22781416778739566, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.19361107586778561, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.16828303486200483, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.14874331417509715, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.13319741424158046, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.12052772989704706, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test052()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data052)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data052[i].x), Tp(data052[i].y),
		     Tp(data052[i].z));
	const Tp f0 = data052[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data053[] = {
  { 0.78841770016803325, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.46690886243398255, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.33676551537135985, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.26450853496326954, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.21807596979319685, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.18555961194525217, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.16145178117610376, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.14283392536415829, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.12800768319660208, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.11591440403017361, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test053()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data053)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data053[i].x), Tp(data053[i].y),
		     Tp(data053[i].z));
	const Tp f0 = data053[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data054[] = {
  { 0.75171669684617648, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.44661005343999294, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.32280382680101521, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.25394274973962694, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.20962942990006528, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.17856025043066376, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.15550179755477397, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.13767835848658191, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.12347339225572537, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.11187851423291065, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test054()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data054)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data054[i].x), Tp(data054[i].y),
		     Tp(data054[i].z));
	const Tp f0 = data054[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data055[] = {
  { 0.71994094443495504, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.42892227004405298, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.31058777828219231, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.24466982149071356, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.20219855406062479, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.17239029176209436, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.15024802304792703, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.13311939795403521, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.11945866268003853, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.10830098836378027, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test055()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data055)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data055[i].x), Tp(data055[i].y),
		     Tp(data055[i].z));
	const Tp f0 = data055[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data056[] = {
  { 3.1814617579585991, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.5195270878991471, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.97827740513355421, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.71283590302652544, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.55625315555895649, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.45344984105855446, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.38104015929570656, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.32743221820975338, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.28623835999824737, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.25365545886709745, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test056()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data056)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data056[i].x), Tp(data056[i].y),
		     Tp(data056[i].z));
	const Tp f0 = data056[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data057[] = {
  { 1.4923701377013003, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.82681551228230354, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.57298419701539560, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.43747841423603617, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.35292026198805915, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.29507237965418759, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.25300508036871605, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.22104742408748271, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.19595843732162688, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.17574955367014047, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test057()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data057)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data057[i].x), Tp(data057[i].y),
		     Tp(data057[i].z));
	const Tp f0 = data057[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data058[] = {
  { 1.2151025736697127, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.69116536356909253, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.48628331750700976, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.37517237295715428, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.30504032772116135, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.25663314414203003, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.22117588743290356, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.19407626059349833, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.17269067548325900, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.15538696990472234, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test058()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data058)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data058[i].x), Tp(data058[i].y),
		     Tp(data058[i].z));
	const Tp f0 = data058[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data059[] = {
  { 1.0618319977895128, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.61294272686796347, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.43506201805778905, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.33774761508758611, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.27592200955549134, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.23302662461706911, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.20147201353236258, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.17726750745753769, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.15810655090365155, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.14256003399301431, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test059()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data059)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data059[i].x), Tp(data059[i].y),
		     Tp(data059[i].z));
	const Tp f0 = data059[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data060[] = {
  { 0.95902057408895203, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.55911221740544426, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.39927388934665914, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.31131968298304530, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.25519306961823907, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.21611278181903348, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.18727903597199327, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.16510527294261054, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.14751292779556122, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.13321109278201460, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test060()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data060)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data060[i].x), Tp(data060[i].y),
		     Tp(data060[i].z));
	const Tp f0 = data060[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data061[] = {
  { 0.88322637190106768, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.51870588849980037, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.37211529941965255, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.29110791982181122, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.23924499161241758, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.20303725112222404, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.17626300757548063, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.15563327802202254, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.13923822831329410, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.12588968030716377, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test061()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data061)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data061[i].x), Tp(data061[i].y),
		     Tp(data061[i].z));
	const Tp f0 = data061[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data062[] = {
  { 0.82406880306471975, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.48673371171594010, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.35044333169358804, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.27488121754848061, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.22638102978922792, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.19245008972987526, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.16731496396884551, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.14791843300216453, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.13248257848281814, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.11989980736081955, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test062()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data062)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data062[i].x), Tp(data062[i].y),
		     Tp(data062[i].z));
	const Tp f0 = data062[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data063[] = {
  { 0.77608343195161344, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.46051499952979214, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.33254966480535647, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.26141711165512876, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.21566596032585361, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.18360375992800163, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.15981849507971338, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.14144046272985844, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.12679879933178567, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.11485148518398806, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test063()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data063)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data063[i].x), Tp(data063[i].y),
		     Tp(data063[i].z));
	const Tp f0 = data063[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data064[] = {
  { 0.73606083017861457, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.43844962711812741, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.31740483360899424, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.24997405499853906, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.20652966753789137, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.17604078349891775, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.15339517205504868, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.13587911055911933, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.12191100711677894, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.11050364347570703, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test064()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data064)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data064[i].x), Tp(data064[i].y),
		     Tp(data064[i].z));
	const Tp f0 = data064[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data065[] = {
  { 0.70196643578457141, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.41950957307134507, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.30434214257764308, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.24006912379411061, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.19859930075036444, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.16946097115410680, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.14779599479809385, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.13102316734612793, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.11763689830001368, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.10669671120574309, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test065()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data065)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data065[i].x), Tp(data065[i].y),
		     Tp(data065[i].z));
	const Tp f0 = data065[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data066[] = {
  { 0.67243540762391030, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.40299735406429821, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.29290614798863196, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.23137081797861417, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.19161797648737747, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.16365689406956915, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.14284849030042365, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.12672603871835356, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.11384972015614130, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.10331957260334025, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test066()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data066)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data066[i].x), Tp(data066[i].y),
		     Tp(data066[i].z));
	const Tp f0 = data066[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data067[] = {
  { 2.9694371495862444, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.4232415329072743, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.91851134135997303, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.67053815267088079, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.52404456072773664, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.42774402149884017, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.35983969464915294, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.30951782104299042, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.27081477697700107, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.24017729914130131, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test067()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data067)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data067[i].x), Tp(data067[i].y),
		     Tp(data067[i].z));
	const Tp f0 = data067[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data068[] = {
  { 1.4007769575243452, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.77923181010779019, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.54145321304962379, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.41423400668258142, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.33470600764004355, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.28021882909562468, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.24054506091464553, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.21037210353882052, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.18666070285211245, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.16754435706279278, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test068()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data068)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data068[i].x), Tp(data068[i].y),
		     Tp(data068[i].z));
	const Tp f0 = data068[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data069[] = {
  { 1.1419917039005423, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.65235088546172837, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.46024688486012044, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.35581870961103756, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.28978118810962378, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.24412921280985586, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.21064553855226686, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.18502449827060383, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.16478482871102293, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.14839309852132307, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test069()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data069)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data069[i].x), Tp(data069[i].y),
		     Tp(data069[i].z));
	const Tp f0 = data069[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data070[] = {
  { 0.99871277699951810, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.57904133298268434, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.41216577909955915, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.32064732908289945, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.26239113738919767, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.22190726768073549, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.19208571013328102, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.16918315988532187, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.15103360702596744, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.13629366705973089, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test070()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data070)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data070[i].x), Tp(data070[i].y),
		     Tp(data070[i].z));
	const Tp f0 = data070[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data071[] = {
  { 0.90250310497734665, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.52852597747230279, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.37852235490292235, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.29577123669941352, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.24285978826321852, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.20595752308085513, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.17869249731228154, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.15769944445407630, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.14102579994117995, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.12745765236291220, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test071()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data071)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data071[i].x), Tp(data071[i].y),
		     Tp(data071[i].z));
	const Tp f0 = data071[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data072[] = {
  { 0.83152026568913140, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.49057095595638406, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.35296320663898373, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.27672366320740660, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.22781416778739566, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.19361107586778561, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.16828303486200483, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.14874331417509712, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.13319741424158049, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.12052772989704705, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test072()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data072)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data072[i].x), Tp(data072[i].y),
		     Tp(data072[i].z));
	const Tp f0 = data072[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data073[] = {
  { 0.77608343195161344, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.46051499952979214, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.33254966480535647, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.26141711165512876, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.21566596032585367, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.18360375992800168, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.15981849507971338, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.14144046272985844, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.12679879933178573, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.11485148518398806, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test073()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data073)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data073[i].x), Tp(data073[i].y),
		     Tp(data073[i].z));
	const Tp f0 = data073[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data074[] = {
  { 0.73109293163336164, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.43585178003832342, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.31568279195720306, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.24870653210676338, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.20553867201914108, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.17523466914596678, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.15272070966424250, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.13530274428287928, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.12141028290792609, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.11006283631027457, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test074()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data074)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data074[i].x), Tp(data074[i].y),
		     Tp(data074[i].z));
	const Tp f0 = data074[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data075[] = {
  { 0.69355180313411025, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.41508412062446814, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.30139821221421115, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.23789668754143037, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.19689745748590898, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.16807441510136864, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.14663434214427468, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.13002934283364664, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.11677265324587040, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.10593522431942011, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test075()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data075)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data075[i].x), Tp(data075[i].y),
		     Tp(data075[i].z));
	const Tp f0 = data075[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data076[] = {
  { 0.66155920777571686, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.39724951501383304, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.28907092028557912, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.22853444770475487, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.18939223193740307, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.16184098634210528, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.14132536745647908, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.12542167802943824, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.11271445297164348, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.10231853060877000, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test076()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data076)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data076[i].x), Tp(data076[i].y),
		     Tp(data076[i].z));
	const Tp f0 = data076[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data077[] = {
  { 0.63383944056141561, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.38169455741536806, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.27827367482698762, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.22030854348613491, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.18278161466609860, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.15633936012100086, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.13663155134484470, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.12134180312760508, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.10911636586568768, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.099108127499405244, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test077()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data077)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data077[i].x), Tp(data077[i].y),
		     Tp(data077[i].z));
	const Tp f0 = data077[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data078[] = {
  { 2.7957181830885744, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.3438542313870974, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.86902926564433447, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.63540981359548432, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.49722921558246896, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.40629888645996026, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.34212250135987998, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.29452431127404310, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.25788891816182635, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.22886854366397424, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test078()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data078)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data078[i].x), Tp(data078[i].y),
		     Tp(data078[i].z));
	const Tp f0 = data078[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data079[] = {
  { 1.3248382358044246, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.73947439202003218, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.51497797638211906, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.39464586865175749, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.31931301755908920, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.26763661712549192, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.22996951235475088, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.20129588838919918, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.17874390787479075, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.16054856458268146, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test079()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data079)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data079[i].x), Tp(data079[i].y),
		     Tp(data079[i].z));
	const Tp f0 = data079[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data080[] = {
  { 1.0812295669164196, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.61982700184952677, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.43831649206456913, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.33945510164031767, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.27684095488117794, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.23349951607281286, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.20167510684220102, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.17729989403903632, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.15802760630811116, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.14240708160931742, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test080()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data080)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data080[i].x), Tp(data080[i].y),
		     Tp(data080[i].z));
	const Tp f0 = data080[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data081[] = {
  { 0.94618205076987916, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.55058670798601161, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.39284474545064513, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.30616051418179241, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.25089289504482515, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.21243444012001572, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.18407229860844418, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.16226862482523122, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.14497441712587619, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.13091780755207250, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test081()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data081)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data081[i].x), Tp(data081[i].y),
		     Tp(data081[i].z));
	const Tp f0 = data081[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data082[] = {
  { 0.85542246869229122, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.50282434464611414, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.36098876068085428, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.28258106989482701, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.23236416483159619, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.19729310775464498, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.17135057751833419, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.15135523250739152, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.13545948266743188, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.12251370089051629, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test082()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data082)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data082[i].x), Tp(data082[i].y),
		     Tp(data082[i].z));
	const Tp f0 = data082[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data083[] = {
  { 0.78841770016803303, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.46690886243398255, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.33676551537135996, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.26450853496326954, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.21807596979319685, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.18555961194525217, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.16145178117610376, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.14283392536415829, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.12800768319660208, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.11591440403017361, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test083()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data083)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data083[i].x), Tp(data083[i].y),
		     Tp(data083[i].z));
	const Tp f0 = data083[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data084[] = {
  { 0.73606083017861434, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.43844962711812741, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.31740483360899424, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.24997405499853897, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.20652966753789137, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.17604078349891775, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.15339517205504866, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.13587911055911933, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.12191100711677894, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.11050364347570703, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test084()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data084)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data084[i].x), Tp(data084[i].y),
		     Tp(data084[i].z));
	const Tp f0 = data084[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data085[] = {
  { 0.69355180313411025, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.41508412062446831, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.30139821221421115, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.23789668754143037, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.19689745748590903, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.16807441510136861, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.14663434214427470, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.13002934283364664, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.11677265324587037, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.10593522431942011, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test085()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data085)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data085[i].x), Tp(data085[i].y),
		     Tp(data085[i].z));
	const Tp f0 = data085[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data086[] = {
  { 0.65806839500142289, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.39540021192192726, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.28783518604533220, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.22761962087512763, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.18867379829694031, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.16125448077398072, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.14083317720134331, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.12500000000000000, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.11234730565945150, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.10199468867893653, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test086()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data086)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data086[i].x), Tp(data086[i].y),
		     Tp(data086[i].z));
	const Tp f0 = data086[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data087[] = {
  { 0.62781986015308988, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.37848959024338219, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.27612533329516536, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.21871448708573704, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.18152755381677393, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.15531411600095618, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.13577014173391874, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.12060304246691116, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.10847256570159687, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.098539817012806882, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test087()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data087)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data087[i].x), Tp(data087[i].y),
		     Tp(data087[i].z));
	const Tp f0 = data087[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data088[] = {
  { 0.60160394534475825, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.36373535432267656, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.26586483871333838, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.21088685615112543, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.17523026672771963, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.15006865242668110, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.13129155535329287, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.11670775397301596, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.10503533930178945, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.095471413501209176, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test088()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data088)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data088[i].x), Tp(data088[i].y),
		     Tp(data088[i].z));
	const Tp f0 = data088[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data089[] = {
  { 2.6498983543265657, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.2768630731912678, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.82712578126447844, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.60558237286346228, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.47441179365269026, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.38801871838912427, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.32699729527497673, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.28170753134865645, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.24682682989768706, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.21918039874741832, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test089()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data089)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data089[i].x), Tp(data089[i].y),
		     Tp(data089[i].z));
	const Tp f0 = data089[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data090[] = {
  { 1.2604751625374033, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.70555729253351007, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.49229699042093145, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.37781286698129474, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.30605263016592266, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.25677566527305340, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.22082505702186814, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.19343623197211957, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.17187932565251629, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.15447553632956265, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test090()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data090)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data090[i].x), Tp(data090[i].y),
		     Tp(data090[i].z));
	const Tp f0 = data090[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data091[] = {
  { 1.0296247564337100, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.59201357071832994, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.41947926040273381, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.32535367486128924, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.26566096411271739, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.22429633237312194, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.19389460229359851, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.17058958463505428, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.15214967292571627, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.13719370300096684, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test091()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data091)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data091[i].x), Tp(data091[i].y),
		     Tp(data091[i].z));
	const Tp f0 = data091[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data092[] = {
  { 0.90151569394875264, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.52621854843823779, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.37622277080655525, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.29365552311085208, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.24094132614427743, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.20421797318537210, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.17710887253682117, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.15625051876858434, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.13969338982979984, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.12622652631192144, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test092()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data092)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data092[i].x), Tp(data092[i].y),
		     Tp(data092[i].z));
	const Tp f0 = data092[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data093[] = {
  { 0.81535812729905277, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.48079215144349863, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.34588803339345520, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.27118200606113163, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.22326916372124522, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.18976821759995394, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.16496223617891401, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.14582603024683111, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.13060131179612539, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.11819323829604647, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test093()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data093)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data093[i].x), Tp(data093[i].y),
		     Tp(data093[i].z));
	const Tp f0 = data093[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data094[] = {
  { 0.75171669684617648, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.44661005343999277, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.32280382680101521, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.25394274973962694, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.20962942990006528, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.17856025043066379, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.15550179755477397, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.13767835848658191, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.12347339225572537, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.11187851423291065, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test094()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data094)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data094[i].x), Tp(data094[i].y),
		     Tp(data094[i].z));
	const Tp f0 = data094[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data095[] = {
  { 0.70196643578457141, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.41950957307134507, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.30434214257764308, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.24006912379411061, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.19859930075036444, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.16946097115410680, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.14779599479809385, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.13102316734612793, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.11763689830001368, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.10669671120574309, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test095()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data095)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data095[i].x), Tp(data095[i].y),
		     Tp(data095[i].z));
	const Tp f0 = data095[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data096[] = {
  { 0.66155920777571686, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.39724951501383310, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.28907092028557912, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.22853444770475487, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.18939223193740301, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.16184098634210525, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.14132536745647908, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.12542167802943824, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.11271445297164348, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.10231853060877000, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test096()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data096)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data096[i].x), Tp(data096[i].y),
		     Tp(data096[i].z));
	const Tp f0 = data096[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data097[] = {
  { 0.62781986015308988, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.37848959024338219, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.27612533329516536, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.21871448708573704, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.18152755381677391, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.15531411600095618, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.13577014173391874, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.12060304246691116, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.10847256570159687, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.098539817012806882, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test097()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data097)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data097[i].x), Tp(data097[i].y),
		     Tp(data097[i].z));
	const Tp f0 = data097[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data098[] = {
  { 0.59905039027703089, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.36236732081523426, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.26494427429221773, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.21020189719878088, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.17469023684433330, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.14962638285972318, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.13091941660661227, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.11638820193013964, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.10475656017578483, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.095225087800083014, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test098()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data098)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data098[i].x), Tp(data098[i].y),
		     Tp(data098[i].z));
	const Tp f0 = data098[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data099[] = {
  { 0.57411046795964726, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.34829670728282186, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.25514380722164026, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.20271656184114500, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.16866282308705074, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.14460194030822637, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.12662680541694901, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.11265260970224160, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.10145865459994449, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.092279787050595419, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test099()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data099)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data099[i].x), Tp(data099[i].y),
		     Tp(data099[i].z));
	const Tp f0 = data099[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000.
testcase_ellint_rd<double> data100[] = {
  { 2.5251633071736093, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000 },
  { 1.2192980037048136, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000 },
  { 0.79100793201960873, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000 },
  { 0.57981347206667344, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000 },
  { 0.45466225176639130, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000 },
  { 0.37217173108359985, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000 },
  { 0.31386785472054907, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000 },
  { 0.27056899795342709, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000 },
  { 0.23720335234329348, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000 },
  { 0.21074444193122177, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000.
template<typename Tp>
  void
  test100()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data100)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data100[i].x), Tp(data100[i].y),
		     Tp(data100[i].z));
	const Tp f0 = data100[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000.
testcase_ellint_rd<double> data101[] = {
  { 1.2049706911003792, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000 },
  { 0.67614468006652750, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000 },
  { 0.47255674044113688, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000 },
  { 0.36312278662905817, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000 },
  { 0.29445551387110391, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000 },
  { 0.24726015371628149, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000 },
  { 0.21280130805001146, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000 },
  { 0.18653078812307397, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000 },
  { 0.16584118671070608, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000 },
  { 0.14912815584871789, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000.
template<typename Tp>
  void
  test101()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data101)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data101[i].x), Tp(data101[i].y),
		     Tp(data101[i].z));
	const Tp f0 = data101[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000.
testcase_ellint_rd<double> data102[] = {
  { 0.98504492018034995, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000 },
  { 0.56784383996639420, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000 },
  { 0.40304711931662474, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000 },
  { 0.31301779500799842, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000 },
  { 0.25585876344175834, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000 },
  { 0.21621234527246269, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000 },
  { 0.18704950966394510, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000 },
  { 0.16467795731794288, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000 },
  { 0.14696512174988718, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000 },
  { 0.13259038458639197, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000.
template<typename Tp>
  void
  test102()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data102)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data102[i].x), Tp(data102[i].y),
		     Tp(data102[i].z));
	const Tp f0 = data102[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000.
testcase_ellint_rd<double> data103[] = {
  { 0.86289061321428662, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000 },
  { 0.50501667495530911, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000 },
  { 0.36170333943276439, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000 },
  { 0.28270034324677890, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000 },
  { 0.23220291160200487, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000 },
  { 0.19698935005202972, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000 },
  { 0.17097270188240143, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000 },
  { 0.15093991123975528, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000 },
  { 0.13502744596076066, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000 },
  { 0.12207707406867491, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000.
template<typename Tp>
  void
  test103()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data103)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data103[i].x), Tp(data103[i].y),
		     Tp(data103[i].z));
	const Tp f0 = data103[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000.
testcase_ellint_rd<double> data104[] = {
  { 0.78068845414522159, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000 },
  { 0.46160631439647176, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000 },
  { 0.33268487290100718, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000 },
  { 0.26118550757927134, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000 },
  { 0.21527433441567498, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000 },
  { 0.18314064674453737, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000 },
  { 0.15932635698806277, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000 },
  { 0.14094109198361518, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000 },
  { 0.12630379536276651, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000 },
  { 0.11436707673490792, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000.
template<typename Tp>
  void
  test104()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data104)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data104[i].x), Tp(data104[i].y),
		     Tp(data104[i].z));
	const Tp f0 = data104[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000.
testcase_ellint_rd<double> data105[] = {
  { 0.71994094443495504, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000 },
  { 0.42892227004405292, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000 },
  { 0.31058777828219231, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000 },
  { 0.24466982149071356, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000 },
  { 0.20219855406062481, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000 },
  { 0.17239029176209436, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000 },
  { 0.15024802304792700, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000 },
  { 0.13311939795403521, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000 },
  { 0.11945866268003853, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000 },
  { 0.10830098836378027, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000.
template<typename Tp>
  void
  test105()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data105)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data105[i].x), Tp(data105[i].y),
		     Tp(data105[i].z));
	const Tp f0 = data105[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000.
testcase_ellint_rd<double> data106[] = {
  { 0.67243540762391030, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000 },
  { 0.40299735406429821, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000 },
  { 0.29290614798863196, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000 },
  { 0.23137081797861417, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000 },
  { 0.19161797648737755, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000 },
  { 0.16365689406956915, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000 },
  { 0.14284849030042363, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000 },
  { 0.12672603871835356, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000 },
  { 0.11384972015614130, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000 },
  { 0.10331957260334025, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000.
template<typename Tp>
  void
  test106()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data106)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data106[i].x), Tp(data106[i].y),
		     Tp(data106[i].z));
	const Tp f0 = data106[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000.
testcase_ellint_rd<double> data107[] = {
  { 0.63383944056141561, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000 },
  { 0.38169455741536795, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000 },
  { 0.27827367482698762, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000 },
  { 0.22030854348613491, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000 },
  { 0.18278161466609860, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000 },
  { 0.15633936012100086, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000 },
  { 0.13663155134484470, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000 },
  { 0.12134180312760511, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000 },
  { 0.10911636586568768, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000 },
  { 0.099108127499405244, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000.
template<typename Tp>
  void
  test107()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data107)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data107[i].x), Tp(data107[i].y),
		     Tp(data107[i].z));
	const Tp f0 = data107[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000.
testcase_ellint_rd<double> data108[] = {
  { 0.60160394534475825, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000 },
  { 0.36373535432267656, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000 },
  { 0.26586483871333838, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000 },
  { 0.21088685615112543, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000 },
  { 0.17523026672771963, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000 },
  { 0.15006865242668113, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000 },
  { 0.13129155535329290, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000 },
  { 0.11670775397301596, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000 },
  { 0.10503533930178947, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000 },
  { 0.095471413501209176, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000.
template<typename Tp>
  void
  test108()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data108)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data108[i].x), Tp(data108[i].y),
		     Tp(data108[i].z));
	const Tp f0 = data108[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000.
testcase_ellint_rd<double> data109[] = {
  { 0.57411046795964726, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000 },
  { 0.34829670728282186, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000 },
  { 0.25514380722164026, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000 },
  { 0.20271656184114498, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000 },
  { 0.16866282308705074, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000 },
  { 0.14460194030822637, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000 },
  { 0.12662680541694901, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000 },
  { 0.11265260970224161, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000 },
  { 0.10145865459994449, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000 },
  { 0.092279787050595419, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000.
template<typename Tp>
  void
  test109()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data109)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data109[i].x), Tp(data109[i].y),
		     Tp(data109[i].z));
	const Tp f0 = data109[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000.
testcase_ellint_rd<double> data110[] = {
  { 0.55027182572642119, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000 },
  { 0.33481923082721610, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000 },
  { 0.24574380041928576, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000 },
  { 0.19552991524211258, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000 },
  { 0.16287134249264493, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000 },
  { 0.13977101630709490, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000 },
  { 0.12249723529609871, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000 },
  { 0.10905717299758165, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000 },
  { 0.098283138373428169, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000 },
  { 0.089442719099991588, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000.
template<typename Tp>
  void
  test110()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data110)
			   / sizeof(testcase_ellint_rd<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
  	 {
	const Tp f = __gnu_cxx::ellint_rd(Tp(data110[i].x), Tp(data110[i].y),
		     Tp(data110[i].z));
	const Tp f0 = data110[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

int
main()
{
  test001<double>();
  test002<double>();
  test003<double>();
  test004<double>();
  test005<double>();
  test006<double>();
  test007<double>();
  test008<double>();
  test009<double>();
  test010<double>();
  test011<double>();
  test012<double>();
  test013<double>();
  test014<double>();
  test015<double>();
  test016<double>();
  test017<double>();
  test018<double>();
  test019<double>();
  test020<double>();
  test021<double>();
  test022<double>();
  test023<double>();
  test024<double>();
  test025<double>();
  test026<double>();
  test027<double>();
  test028<double>();
  test029<double>();
  test030<double>();
  test031<double>();
  test032<double>();
  test033<double>();
  test034<double>();
  test035<double>();
  test036<double>();
  test037<double>();
  test038<double>();
  test039<double>();
  test040<double>();
  test041<double>();
  test042<double>();
  test043<double>();
  test044<double>();
  test045<double>();
  test046<double>();
  test047<double>();
  test048<double>();
  test049<double>();
  test050<double>();
  test051<double>();
  test052<double>();
  test053<double>();
  test054<double>();
  test055<double>();
  test056<double>();
  test057<double>();
  test058<double>();
  test059<double>();
  test060<double>();
  test061<double>();
  test062<double>();
  test063<double>();
  test064<double>();
  test065<double>();
  test066<double>();
  test067<double>();
  test068<double>();
  test069<double>();
  test070<double>();
  test071<double>();
  test072<double>();
  test073<double>();
  test074<double>();
  test075<double>();
  test076<double>();
  test077<double>();
  test078<double>();
  test079<double>();
  test080<double>();
  test081<double>();
  test082<double>();
  test083<double>();
  test084<double>();
  test085<double>();
  test086<double>();
  test087<double>();
  test088<double>();
  test089<double>();
  test090<double>();
  test091<double>();
  test092<double>();
  test093<double>();
  test094<double>();
  test095<double>();
  test096<double>();
  test097<double>();
  test098<double>();
  test099<double>();
  test100<double>();
  test101<double>();
  test102<double>();
  test103<double>();
  test104<double>();
  test105<double>();
  test106<double>();
  test107<double>();
  test108<double>();
  test109<double>();
  test110<double>();
  return 0;
}
