// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  chebyshev_t
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_chebyshev_t<double>
data001[21] =
{
  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },
  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },
  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },
  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },
  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },
  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 1.1102230246251565e-16 at index 3
// max(|f - f_GSL| / |f_GSL|): 8.3266726846886829e-16
// mean(f - f_GSL): -1.3489378327733280e-17
// variance(f - f_GSL): 9.5530747026078163e-36
// stddev(f - f_GSL): 3.0908048632367291e-18
const testcase_chebyshev_t<double>
data002[21] =
{
  { -1.0000000000000000, 1, -1.0000000000000000, 0.0 },
  { -0.90000000000000002, 1, -0.90000000000000002, 0.0 },
  { -0.80000000000000004, 1, -0.80000000000000004, 0.0 },
  { -0.70000000000000007, 1, -0.69999999999999996, 0.0 },
  { -0.59999999999999987, 1, -0.59999999999999998, 0.0 },
  { -0.50000000000000011, 1, -0.50000000000000000, 0.0 },
  { -0.39999999999999980, 1, -0.39999999999999991, 0.0 },
  { -0.29999999999999982, 1, -0.29999999999999993, 0.0 },
  { -0.20000000000000004, 1, -0.19999999999999996, 0.0 },
  { -0.099999999999999895, 1, -0.099999999999999978, 0.0 },
  { 6.1232339957367574e-17, 1, 0.0000000000000000, 0.0 },
  { 0.10000000000000001, 1, 0.10000000000000009, 0.0 },
  { 0.20000000000000015, 1, 0.20000000000000018, 0.0 },
  { 0.30000000000000010, 1, 0.30000000000000004, 0.0 },
  { 0.40000000000000008, 1, 0.40000000000000013, 0.0 },
  { 0.50000000000000011, 1, 0.50000000000000000, 0.0 },
  { 0.60000000000000020, 1, 0.60000000000000009, 0.0 },
  { 0.70000000000000018, 1, 0.70000000000000018, 0.0 },
  { 0.80000000000000004, 1, 0.80000000000000004, 0.0 },
  { 0.90000000000000013, 1, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 1, 1.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 1.6653345369377348e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 1.1162250214618833e-14
// mean(f - f_GSL): -5.4229950869319299e-17
// variance(f - f_GSL): 1.5439659749266122e-34
// stddev(f - f_GSL): 1.2425642739619598e-17
const testcase_chebyshev_t<double>
data003[21] =
{
  { -1.0000000000000000, 5, -1.0000000000000000, 0.0 },
  { 0.63216000000000050, 5, -0.90000000000000002, 0.0 },
  { 0.99712000000000001, 5, -0.80000000000000004, 0.0 },
  { 0.67088000000000003, 5, -0.69999999999999996, 0.0 },
  { 0.075839999999999061, 5, -0.59999999999999998, 0.0 },
  { -0.49999999999999833, 5, -0.50000000000000000, 0.0 },
  { -0.88384000000000096, 5, -0.39999999999999991, 0.0 },
  { -0.99887999999999988, 5, -0.29999999999999993, 0.0 },
  { -0.84512000000000009, 5, -0.19999999999999996, 0.0 },
  { -0.48015999999999948, 5, -0.099999999999999978, 0.0 },
  { 3.0616169978683787e-16, 5, 0.0000000000000000, 0.0 },
  { 0.48016000000000009, 5, 0.10000000000000009, 0.0 },
  { 0.84512000000000043, 5, 0.20000000000000018, 0.0 },
  { 0.99887999999999999, 5, 0.30000000000000004, 0.0 },
  { 0.88383999999999985, 5, 0.40000000000000013, 0.0 },
  { 0.49999999999999928, 5, 0.50000000000000000, 0.0 },
  { -0.075840000000000560, 5, 0.60000000000000009, 0.0 },
  { -0.67088000000000081, 5, 0.70000000000000018, 0.0 },
  { -0.99712000000000001, 5, 0.80000000000000004, 0.0 },
  { -0.63215999999999861, 5, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 5, 1.0000000000000000, 0.0 },
};
const double toler003 = 1.0000000000000008e-12;

// Test data for n=8.
// max(|f - f_GSL|): 1.4988010832439613e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 1.5763788217578506e-14
// mean(f - f_GSL): -1.6554218313607245e-16
// variance(f - f_GSL): 1.4387212558664898e-33
// stddev(f - f_GSL): 3.7930479246464706e-17
const testcase_chebyshev_t<double>
data004[21] =
{
  { 1.0000000000000000, 8, -1.0000000000000000, 0.0 },
  { -0.89309311999999974, 8, -0.90000000000000002, 0.0 },
  { 0.42197247999999993, 8, -0.80000000000000004, 0.0 },
  { 0.99680128000000012, 8, -0.69999999999999996, 0.0 },
  { 0.42197247999999865, 8, -0.59999999999999998, 0.0 },
  { -0.49999999999999850, 8, -0.50000000000000000, 0.0 },
  { -0.98868992000000022, 8, -0.39999999999999991, 0.0 },
  { -0.76222591999999878, 8, -0.29999999999999993, 0.0 },
  { -0.040056320000000221, 8, -0.19999999999999996, 0.0 },
  { 0.69574528000000069, 8, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 8, 0.0000000000000000, 0.0 },
  { 0.69574527999999991, 8, 0.10000000000000009, 0.0 },
  { -0.040056320000001200, 8, 0.20000000000000018, 0.0 },
  { -0.76222592000000067, 8, 0.30000000000000004, 0.0 },
  { -0.98868991999999989, 8, 0.40000000000000013, 0.0 },
  { -0.49999999999999917, 8, 0.50000000000000000, 0.0 },
  { 0.42197248000000115, 8, 0.60000000000000009, 0.0 },
  { 0.99680128000000012, 8, 0.70000000000000018, 0.0 },
  { 0.42197247999999909, 8, 0.80000000000000004, 0.0 },
  { -0.89309312000000107, 8, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 8, 1.0000000000000000, 0.0 },
};
const double toler004 = 1.0000000000000008e-12;

// Test data for n=10.
// max(|f - f_GSL|): 3.4416913763379853e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 8.8487135106545506e-15
// mean(f - f_GSL): 3.8989975269573947e-17
// variance(f - f_GSL): 7.9811454004904378e-35
// stddev(f - f_GSL): 8.9337256508639423e-18
const testcase_chebyshev_t<double>
data005[21] =
{
  { 1.0000000000000000, 10, -1.0000000000000000, 0.0 },
  { -0.20074746879999861, 10, -0.90000000000000002, 0.0 },
  { 0.98849658880000002, 10, -0.80000000000000004, 0.0 },
  { -0.099840051200000016, 10, -0.69999999999999996, 0.0 },
  { -0.98849658880000035, 10, -0.59999999999999998, 0.0 },
  { -0.50000000000000344, 10, -0.50000000000000000, 0.0 },
  { 0.56234629120000346, 10, -0.39999999999999991, 0.0 },
  { 0.99552250879999971, 10, -0.29999999999999993, 0.0 },
  { 0.42845562880000027, 10, -0.19999999999999996, 0.0 },
  { -0.53889274880000093, 10, -0.099999999999999978, 0.0 },
  { -1.0000000000000000, 10, 0.0000000000000000, 0.0 },
  { -0.53889274879999993, 10, 0.10000000000000009, 0.0 },
  { 0.42845562880000138, 10, 0.20000000000000018, 0.0 },
  { 0.99552250880000015, 10, 0.30000000000000004, 0.0 },
  { 0.56234629119999946, 10, 0.40000000000000013, 0.0 },
  { -0.50000000000000144, 10, 0.50000000000000000, 0.0 },
  { -0.98849658879999991, 10, 0.60000000000000009, 0.0 },
  { -0.099840051199997920, 10, 0.70000000000000018, 0.0 },
  { 0.98849658880000024, 10, 0.80000000000000004, 0.0 },
  { -0.20074746880000333, 10, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 10, 1.0000000000000000, 0.0 },
};
const double toler005 = 5.0000000000000039e-13;

// Test data for n=20.
// max(|f - f_GSL|): 6.7723604502134549e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 1.6463040286655981e-14
// mean(f - f_GSL): -8.5117098554595338e-16
// variance(f - f_GSL): 3.8035832448351651e-32
// stddev(f - f_GSL): 1.9502777353072471e-16
const testcase_chebyshev_t<double>
data006[21] =
{
  { 1.0000000000000000, 20, -1.0000000000000000, 0.0 },
  { -0.91940090754078718, 20, -0.90000000000000002, 0.0 },
  { 0.95425101213847252, 20, -0.80000000000000004, 0.0 },
  { -0.98006392835276279, 20, -0.69999999999999996, 0.0 },
  { 0.95425101213847374, 20, -0.59999999999999998, 0.0 },
  { -0.49999999999999323, 20, -0.50000000000000000, 0.0 },
  { -0.36753329754720182, 20, -0.39999999999999991, 0.0 },
  { 0.98213013105489089, 20, -0.29999999999999993, 0.0 },
  { -0.63285154829919288, 20, -0.19999999999999996, 0.0 },
  { -0.41918921058155817, 20, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 20, 0.0000000000000000, 0.0 },
  { -0.41918921058156039, 20, 0.10000000000000009, 0.0 },
  { -0.63285154829919099, 20, 0.20000000000000018, 0.0 },
  { 0.98213013105489266, 20, 0.30000000000000004, 0.0 },
  { -0.36753329754721076, 20, 0.40000000000000013, 0.0 },
  { -0.49999999999999728, 20, 0.50000000000000000, 0.0 },
  { 0.95425101213847185, 20, 0.60000000000000009, 0.0 },
  { -0.98006392835276357, 20, 0.70000000000000018, 0.0 },
  { 0.95425101213847330, 20, 0.80000000000000004, 0.0 },
  { -0.91940090754078341, 20, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 20, 1.0000000000000000, 0.0 },
};
const double toler006 = 1.0000000000000008e-12;

// Test data for n=40.
// max(|f - f_GSL|): 1.3655743202889425e-14 at index 5
// max(|f - f_GSL| / |f_GSL|): 2.7311486405778106e-14
// mean(f - f_GSL): 1.5358085173981333e-15
// variance(f - f_GSL): 1.2383215961091424e-31
// stddev(f - f_GSL): 3.5189793919674242e-16
const testcase_chebyshev_t<double>
data007[21] =
{
  { 1.0000000000000000, 40, -1.0000000000000000, 0.0 },
  { 0.69059605757364606, 40, -0.90000000000000002, 0.0 },
  { 0.82118998833459877, 40, -0.80000000000000004, 0.0 },
  { 0.92105060731649857, 40, -0.69999999999999996, 0.0 },
  { 0.82118998833460299, 40, -0.59999999999999998, 0.0 },
  { -0.50000000000001366, 40, -0.50000000000000000, 0.0 },
  { -0.72983855038816003, 40, -0.39999999999999991, 0.0 },
  { 0.92915918865179414, 40, -0.29999999999999993, 0.0 },
  { -0.19899783563062889, 40, -0.19999999999999996, 0.0 },
  { -0.64856081146402023, 40, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 40, 0.0000000000000000, 0.0 },
  { -0.64856081146401656, 40, 0.10000000000000009, 0.0 },
  { -0.19899783563063367, 40, 0.20000000000000018, 0.0 },
  { 0.92915918865180114, 40, 0.30000000000000004, 0.0 },
  { -0.72983855038814682, 40, 0.40000000000000013, 0.0 },
  { -0.50000000000000555, 40, 0.50000000000000000, 0.0 },
  { 0.82118998833459611, 40, 0.60000000000000009, 0.0 },
  { 0.92105060731650190, 40, 0.70000000000000018, 0.0 },
  { 0.82118998833460155, 40, 0.80000000000000004, 0.0 },
  { 0.69059605757363229, 40, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 40, 1.0000000000000000, 0.0 },
};
const double toler007 = 2.5000000000000015e-12;

// Test data for n=100.
// max(|f - f_GSL|): 2.3876733923344773e-14 at index 4
// max(|f - f_GSL| / |f_GSL|): 4.5467063542505796e-13
// mean(f - f_GSL): 2.3374159750590348e-15
// variance(f - f_GSL): 2.8683445562421188e-31
// stddev(f - f_GSL): 5.3556928181535193e-16
const testcase_chebyshev_t<double>
data008[21] =
{
  { 1.0000000000000000, 100, -1.0000000000000000, 0.0 },
  { 0.43533674915333020, 100, -0.90000000000000002, 0.0 },
  { 0.052514352287148618, 100, -0.80000000000000004, 0.0 },
  { -0.54024619650137840, 100, -0.69999999999999996, 0.0 },
  { 0.052514352287174056, 100, -0.59999999999999998, 0.0 },
  { -0.50000000000000933, 100, -0.50000000000000000, 0.0 },
  { -0.95203412147528033, 100, -0.39999999999999991, 0.0 },
  { 0.58439572719376509, 100, -0.29999999999999993, 0.0 },
  { 0.28073533545790169, 100, -0.19999999999999996, 0.0 },
  { -0.82984629745760197, 100, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 100, 0.0000000000000000, 0.0 },
  { -0.82984629745758720, 100, 0.10000000000000009, 0.0 },
  { 0.28073533545787627, 100, 0.20000000000000018, 0.0 },
  { 0.58439572719378663, 100, 0.30000000000000004, 0.0 },
  { -0.95203412147526789, 100, 0.40000000000000013, 0.0 },
  { -0.50000000000000766, 100, 0.50000000000000000, 0.0 },
  { 0.052514352287133442, 100, 0.60000000000000009, 0.0 },
  { -0.54024619650137673, 100, 0.70000000000000018, 0.0 },
  { 0.052514352287160851, 100, 0.80000000000000004, 0.0 },
  { 0.43533674915335402, 100, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 100, 1.0000000000000000, 0.0 },
};
const double toler008 = 2.5000000000000014e-11;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_chebyshev_t<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::chebyshev_t(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  return 0;
}
