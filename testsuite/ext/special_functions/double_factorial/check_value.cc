// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  double_factorial

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 0.030000000000200089
// max(|f - f_GSL| / |f_GSL|): 7.8125000000521062e-06
// mean(f - f_GSL): 0.00058823529412157041
// variance(f - f_GSL): 7.0588235845850159e-09
// stddev(f - f_GSL): 8.4016805370027114e-05
const testcase_double_factorial<double>
data001[51] =
{
  { 1.0000000000000000, 0 },
  { 1.0000000000000000, 1 },
  { 2.0000000000000000, 2 },
  { 3.0000000000000000, 3 },
  { 8.0000000000000000, 4 },
  { 15.000000000000000, 5 },
  { 48.000000000000000, 6 },
  { 105.00000000000000, 7 },
  { 384.00000000000000, 8 },
  { 945.00000000000000, 9 },
  { 3840.0000000000000, 10 },
  { 10395.000000000000, 11 },
  { 46080.000000000000, 12 },
  { 135135.00000000000, 13 },
  { 645120.00000000000, 14 },
  { 2027025.0000000000, 15 },
  { 10321920.000000000, 16 },
  { 34459425.000000000, 17 },
  { 185794560.00000000, 18 },
  { 654729075.00000000, 19 },
  { 3715891200.0000000, 20 },
  { 13749310575.000000, 21 },
  { 81749606400.000000, 22 },
  { 316234143225.00000, 23 },
  { 1961990553600.0000, 24 },
  { 7905853580625.0000, 25 },
  { 51011754393600.000, 26 },
  { 213458046676875.00, 27 },
  { 1428329123020800.0, 28 },
  { 6190283353629375.0, 29 },
  { 42849873690624000., 30 },
  { 1.9189878396251062e+17, 31 },
  { 1.3711959580999680e+18, 32 },
  { 6.3326598707628503e+18, 33 },
  { 4.6620662575398912e+19, 34 },
  { 2.2164309547669976e+20, 35 },
  { 1.6783438527143608e+21, 36 },
  { 8.2007945326378919e+21, 37 },
  { 6.3777066403145712e+22, 38 },
  { 3.1983098677287775e+23, 39 },
  { 2.5510826561258285e+24, 40 },
  { 1.3113070457687988e+25, 41 },
  { 1.0714547155728480e+26, 42 },
  { 5.6386202968058351e+26, 43 },
  { 4.7144007485205310e+27, 44 },
  { 2.5373791335626256e+28, 45 },
  { 2.1686243443194444e+29, 46 },
  { 1.1925681927744342e+30, 47 },
  { 1.0409396852733332e+31, 48 },
  { 5.8435841445947271e+31, 49 },
  { 5.2046984263666663e+32, 50 },
};
const double toler001 = 0.00050000000000000001;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_double_factorial<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::double_factorial<Tp>(data[i].n);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
