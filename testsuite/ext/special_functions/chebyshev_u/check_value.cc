// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  chebyshev_u
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for n=0.
// max(|f - f_GSL|): 0.0000000000000000 at index 0
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_chebyshev_u<double>
data001[21] =
{
  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },
  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },
  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },
  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },
  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },
  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for n=1.
// max(|f - f_GSL|): 3.3306690738754696e-16 at index 6
// max(|f - f_GSL| / |f_GSL|): 8.3266726846886829e-16
// mean(f - f_GSL): -2.1691980347727720e-17
// variance(f - f_GSL): 2.4703455598825792e-35
// stddev(f - f_GSL): 4.9702570958478386e-18
const testcase_chebyshev_u<double>
data002[21] =
{
  { -2.0000000000000000, 1, -1.0000000000000000, 0.0 },
  { -1.8000000000000003, 1, -0.90000000000000002, 0.0 },
  { -1.6000000000000001, 1, -0.80000000000000004, 0.0 },
  { -1.4000000000000001, 1, -0.69999999999999996, 0.0 },
  { -1.1999999999999997, 1, -0.59999999999999998, 0.0 },
  { -1.0000000000000002, 1, -0.50000000000000000, 0.0 },
  { -0.79999999999999949, 1, -0.39999999999999991, 0.0 },
  { -0.59999999999999953, 1, -0.29999999999999993, 0.0 },
  { -0.40000000000000002, 1, -0.19999999999999996, 0.0 },
  { -0.19999999999999979, 1, -0.099999999999999978, 0.0 },
  { 1.2246467991473515e-16, 1, 0.0000000000000000, 0.0 },
  { 0.20000000000000001, 1, 0.10000000000000009, 0.0 },
  { 0.40000000000000024, 1, 0.20000000000000018, 0.0 },
  { 0.60000000000000020, 1, 0.30000000000000004, 0.0 },
  { 0.80000000000000027, 1, 0.40000000000000013, 0.0 },
  { 1.0000000000000002, 1, 0.50000000000000000, 0.0 },
  { 1.2000000000000002, 1, 0.60000000000000009, 0.0 },
  { 1.4000000000000004, 1, 0.70000000000000018, 0.0 },
  { 1.6000000000000003, 1, 0.80000000000000004, 0.0 },
  { 1.8000000000000000, 1, 0.90000000000000013, 0.0 },
  { 2.0000000000000000, 1, 1.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for n=5.
// max(|f - f_GSL|): 2.1094237467877974e-15 at index 1
// max(|f - f_GSL| / |f_GSL|): 2.1798773838332869e-15
// mean(f - f_GSL): -6.0382912171767847e-18
// variance(f - f_GSL): 1.9142004432303007e-36
// stddev(f - f_GSL): 1.3835463285449825e-18
const testcase_chebyshev_u<double>
data003[21] =
{
  { -6.0000000000000000, 5, -1.0000000000000000, 0.0 },
  { -0.96768000000000109, 5, -0.90000000000000002, 0.0 },
  { 1.0982400000000001, 5, -0.80000000000000004, 0.0 },
  { 1.3977600000000001, 5, -0.69999999999999996, 0.0 },
  { 0.82367999999999897, 5, -0.59999999999999998, 0.0 },
  { 1.4855200714891853e-15, 5, -0.50000000000000000, 0.0 },
  { -0.67968000000000106, 5, -0.39999999999999991, 0.0 },
  { -1.0137600000000004, 5, -0.29999999999999993, 0.0 },
  { -0.95424000000000009, 5, -0.19999999999999996, 0.0 },
  { -0.56831999999999938, 5, -0.099999999999999978, 0.0 },
  { 3.6739403974420544e-16, 5, 0.0000000000000000, 0.0 },
  { 0.56831999999999994, 5, 0.10000000000000009, 0.0 },
  { 0.95424000000000042, 5, 0.20000000000000018, 0.0 },
  { 1.0137599999999998, 5, 0.30000000000000004, 0.0 },
  { 0.67967999999999917, 5, 0.40000000000000013, 0.0 },
  { -2.8282006365997477e-16, 5, 0.50000000000000000, 0.0 },
  { -0.82368000000000141, 5, 0.60000000000000009, 0.0 },
  { -1.3977600000000003, 5, 0.70000000000000018, 0.0 },
  { -1.0982399999999992, 5, 0.80000000000000004, 0.0 },
  { 0.96768000000000420, 5, 0.90000000000000013, 0.0 },
  { 6.0000000000000000, 5, 1.0000000000000000, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for n=8.
// max(|f - f_GSL|): 3.2538602066383457e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 2.5023812455733982e-15
// mean(f - f_GSL): -9.8488900781991948e-17
// variance(f - f_GSL): 5.0925333780536536e-34
// stddev(f - f_GSL): 2.2566642147323678e-17
const testcase_chebyshev_u<double>
data004[21] =
{
  { 9.0000000000000000, 8, -1.0000000000000000, 0.0 },
  { -1.8219622399999986, 8, -0.90000000000000002, 0.0 },
  { -0.78683904000000016, 8, -0.80000000000000004, 0.0 },
  { 1.0751385599999994, 8, -0.69999999999999996, 0.0 },
  { 1.1019289599999977, 8, -0.59999999999999998, 0.0 },
  { 3.2538602066383457e-15, 8, -0.50000000000000000, 0.0 },
  { -0.92323584000000170, 8, -0.39999999999999991, 0.0 },
  { -0.96579583999999918, 8, -0.29999999999999993, 0.0 },
  { -0.24401664000000023, 8, -0.19999999999999996, 0.0 },
  { 0.62355456000000087, 8, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 8, 0.0000000000000000, 0.0 },
  { 0.62355455999999998, 8, 0.10000000000000009, 0.0 },
  { -0.24401664000000134, 8, 0.20000000000000018, 0.0 },
  { -0.96579584000000052, 8, 0.30000000000000004, 0.0 },
  { -0.92323583999999903, 8, 0.40000000000000013, 0.0 },
  { 4.2423009548996217e-16, 8, 0.50000000000000000, 0.0 },
  { 1.1019289600000008, 8, 0.60000000000000009, 0.0 },
  { 1.0751385599999987, 8, 0.70000000000000018, 0.0 },
  { -0.78683904000000182, 8, 0.80000000000000004, 0.0 },
  { -1.8219622399999968, 8, 0.90000000000000013, 0.0 },
  { 9.0000000000000000, 8, 1.0000000000000000, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for n=10.
// max(|f - f_GSL|): 3.6637359812630166e-15 at index 3
// max(|f - f_GSL| / |f_GSL|): 4.4087798160490705e-15
// mean(f - f_GSL): -1.9296733523246769e-16
// variance(f - f_GSL): 1.9549106045027772e-33
// stddev(f - f_GSL): 4.4214371017835108e-17
const testcase_chebyshev_u<double>
data005[21] =
{
  { 11.000000000000000, 10, -1.0000000000000000, 0.0 },
  { -2.2234571775999998, 10, -0.90000000000000002, 0.0 },
  { 1.1901541376000000, 10, -0.80000000000000004, 0.0 },
  { 0.87545845760000296, 10, -0.69999999999999996, 0.0 },
  { -0.87506421760000030, 10, -0.59999999999999998, 0.0 },
  { -1.0000000000000009, 10, -0.50000000000000000, 0.0 },
  { 0.20145674240000189, 10, -0.39999999999999991, 0.0 },
  { 1.0252491776000001, 10, -0.29999999999999993, 0.0 },
  { 0.61289461760000008, 10, -0.19999999999999996, 0.0 },
  { -0.45423093760000111, 10, -0.099999999999999978, 0.0 },
  { -1.0000000000000000, 10, 0.0000000000000000, 0.0 },
  { -0.45423093759999988, 10, 0.10000000000000009, 0.0 },
  { 0.61289461760000141, 10, 0.20000000000000018, 0.0 },
  { 1.0252491775999997, 10, 0.30000000000000004, 0.0 },
  { 0.20145674239999850, 10, 0.40000000000000013, 0.0 },
  { -1.0000000000000007, 10, 0.50000000000000000, 0.0 },
  { -0.87506421759999919, 10, 0.60000000000000009, 0.0 },
  { 0.87545845760000285, 10, 0.70000000000000018, 0.0 },
  { 1.1901541375999987, 10, 0.80000000000000004, 0.0 },
  { -2.2234571776000029, 10, 0.90000000000000013, 0.0 },
  { 11.000000000000000, 10, 1.0000000000000000, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for n=20.
// max(|f - f_GSL|): 6.2249003496167167e-15 at index 5
// max(|f - f_GSL| / |f_GSL|): 1.9531023160381672e-14
// mean(f - f_GSL): -9.0131540391533485e-16
// variance(f - f_GSL): 4.2649396510090810e-32
// stddev(f - f_GSL): 2.0651730317358594e-16
const testcase_chebyshev_u<double>
data006[21] =
{
  { 21.000000000000000, 20, -1.0000000000000000, 0.0 },
  { -0.10729319922321122, 20, -0.90000000000000002, 0.0 },
  { 1.3529266103276114, 20, -0.80000000000000004, 0.0 },
  { -1.1748116344605093, 20, -0.69999999999999996, 0.0 },
  { 0.72999598815708777, 20, -0.59999999999999998, 0.0 },
  { 6.2249003496167167e-15, 20, -0.50000000000000000, 0.0 },
  { -0.77342309614825044, 20, -0.39999999999999991, 0.0 },
  { 1.0413172668589781, 20, -0.29999999999999993, 0.0 },
  { -0.47480370245611236, 20, -0.19999999999999996, 0.0 },
  { -0.51043648289346744, 20, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 20, 0.0000000000000000, 0.0 },
  { -0.51043648289346966, 20, 0.10000000000000009, 0.0 },
  { -0.47480370245611009, 20, 0.20000000000000018, 0.0 },
  { 1.0413172668589774, 20, 0.30000000000000004, 0.0 },
  { -0.77342309614825533, 20, 0.40000000000000013, 0.0 },
  { 9.8987022280991171e-16, 20, 0.50000000000000000, 0.0 },
  { 0.72999598815707789, 20, 0.60000000000000009, 0.0 },
  { -1.1748116344605100, 20, 0.70000000000000018, 0.0 },
  { 1.3529266103276094, 20, 0.80000000000000004, 0.0 },
  { -0.10729319922320131, 20, 0.90000000000000013, 0.0 },
  { 21.000000000000000, 20, 1.0000000000000000, 0.0 },
};
const double toler006 = 1.0000000000000008e-12;

// Test data for n=40.
// max(|f - f_GSL|): 2.3869795029440866e-14 at index 1
// max(|f - f_GSL| / |f_GSL|): 2.9736545787262312e-14
// mean(f - f_GSL): 3.8593467046493538e-16
// variance(f - f_GSL): 7.8196424180111086e-33
// stddev(f - f_GSL): 8.8428742035670216e-17
const testcase_chebyshev_u<double>
data007[21] =
{
  { 41.000000000000000, 40, -1.0000000000000000, 0.0 },
  { -0.80270907052242502, 40, -0.90000000000000002, 0.0 },
  { 1.5820631745083924, 40, -0.80000000000000004, 0.0 },
  { 1.3027810110877993, 40, -0.69999999999999996, 0.0 },
  { 0.39319882111185078, 40, -0.59999999999999998, 0.0 },
  { -1.0000000000000078, 40, -0.50000000000000000, 0.0 },
  { -0.43148251814693117, 40, -0.39999999999999991, 0.0 },
  { 1.0454181275398589, 40, -0.29999999999999993, 0.0 },
  { -0.39903948352492669, 40, -0.19999999999999996, 0.0 },
  { -0.57206106736772666, 40, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 40, 0.0000000000000000, 0.0 },
  { -0.57206106736771378, 40, 0.10000000000000009, 0.0 },
  { -0.39903948352492813, 40, 0.20000000000000018, 0.0 },
  { 1.0454181275398597, 40, 0.30000000000000004, 0.0 },
  { -0.43148251814691552, 40, 0.40000000000000013, 0.0 },
  { -1.0000000000000044, 40, 0.50000000000000000, 0.0 },
  { 0.39319882111183224, 40, 0.60000000000000009, 0.0 },
  { 1.3027810110877989, 40, 0.70000000000000018, 0.0 },
  { 1.5820631745083902, 40, 0.80000000000000004, 0.0 },
  { -0.80270907052246676, 40, 0.90000000000000013, 0.0 },
  { 41.000000000000000, 40, 1.0000000000000000, 0.0 },
};
const double toler007 = 2.5000000000000015e-12;

// Test data for n=100.
// max(|f - f_GSL|): 2.4980018054066022e-14 at index 4
// max(|f - f_GSL| / |f_GSL|): 1.7539482393868886e-13
// mean(f - f_GSL): 2.4140742315212483e-15
// variance(f - f_GSL): 3.0595710575298249e-31
// stddev(f - f_GSL): 5.5313389495942343e-16
const testcase_chebyshev_u<double>
data008[21] =
{
  { 101.00000000000000, 100, -1.0000000000000000, 0.0 },
  { 2.2941569055367088, 100, -0.90000000000000002, 0.0 },
  { 1.3840079115348121, 100, -0.80000000000000004, 0.0 },
  { -1.3650880507569956, 100, -0.69999999999999996, 0.0 },
  { -0.69645077478962614, 100, -0.59999999999999998, 0.0 },
  { -1.0000000000000131, 100, -0.50000000000000000, 0.0 },
  { -0.81848831585268778, 100, -0.39999999999999991, 0.0 },
  { 0.83959086275187023, 100, -0.29999999999999993, 0.0 },
  { 0.084819997511314860, 100, -0.19999999999999996, 0.0 },
  { -0.77376598684556985, 100, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 100, 0.0000000000000000, 0.0 },
  { -0.77376598684556430, 100, 0.10000000000000009, 0.0 },
  { 0.084819997511305908, 100, 0.20000000000000018, 0.0 },
  { 0.83959086275188488, 100, 0.30000000000000004, 0.0 },
  { -0.81848831585265081, 100, 0.40000000000000013, 0.0 },
  { -1.0000000000000098, 100, 0.50000000000000000, 0.0 },
  { -0.69645077478966488, 100, 0.60000000000000009, 0.0 },
  { -1.3650880507569940, 100, 0.70000000000000018, 0.0 },
  { 1.3840079115348072, 100, 0.80000000000000004, 0.0 },
  { 2.2941569055367101, 100, 0.90000000000000013, 0.0 },
  { 101.00000000000000, 100, 1.0000000000000000, 0.0 },
};
const double toler008 = 1.0000000000000006e-11;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_chebyshev_u<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::chebyshev_u(data[i].n, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  return 0;
}
