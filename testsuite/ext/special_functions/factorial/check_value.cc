// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  factorial

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data.
// max(|f - f_GSL|): 0.0000000000000000
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_factorial<double>
data001[51] =
{
  { 1.0000000000000000, 0 },
  { 1.0000000000000000, 1 },
  { 2.0000000000000000, 2 },
  { 6.0000000000000000, 3 },
  { 24.000000000000000, 4 },
  { 120.00000000000000, 5 },
  { 720.00000000000000, 6 },
  { 5040.0000000000000, 7 },
  { 40320.000000000000, 8 },
  { 362880.00000000000, 9 },
  { 3628800.0000000000, 10 },
  { 39916800.000000000, 11 },
  { 479001600.00000000, 12 },
  { 6227020800.0000000, 13 },
  { 87178291200.000000, 14 },
  { 1307674368000.0000, 15 },
  { 20922789888000.000, 16 },
  { 355687428096000.00, 17 },
  { 6402373705728000.0, 18 },
  { 1.2164510040883200e+17, 19 },
  { 2.4329020081766400e+18, 20 },
  { 5.1090942171709440e+19, 21 },
  { 1.1240007277776077e+21, 22 },
  { 2.5852016738884978e+22, 23 },
  { 6.2044840173323941e+23, 24 },
  { 1.5511210043330986e+25, 25 },
  { 4.0329146112660565e+26, 26 },
  { 1.0888869450418352e+28, 27 },
  { 3.0488834461171387e+29, 28 },
  { 8.8417619937397019e+30, 29 },
  { 2.6525285981219107e+32, 30 },
  { 8.2228386541779224e+33, 31 },
  { 2.6313083693369352e+35, 32 },
  { 8.6833176188118859e+36, 33 },
  { 2.9523279903960416e+38, 34 },
  { 1.0333147966386145e+40, 35 },
  { 3.7199332678990125e+41, 36 },
  { 1.3763753091226346e+43, 37 },
  { 5.2302261746660112e+44, 38 },
  { 2.0397882081197444e+46, 39 },
  { 8.1591528324789768e+47, 40 },
  { 3.3452526613163808e+49, 41 },
  { 1.4050061177528800e+51, 42 },
  { 6.0415263063373834e+52, 43 },
  { 2.6582715747884489e+54, 44 },
  { 1.1962222086548019e+56, 45 },
  { 5.5026221598120892e+57, 46 },
  { 2.5862324151116818e+59, 47 },
  { 1.2413915592536073e+61, 48 },
  { 6.0828186403426752e+62, 49 },
  { 3.0414093201713376e+64, 50 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_factorial<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::factorial<Tp>(data[i].n);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
