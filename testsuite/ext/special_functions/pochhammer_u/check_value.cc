// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  pochhammer_u
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 1.4210854715202004e-13
// max(|f - f_GSL| / |f_GSL|): 1.8037631934315502e-15
const testcase_pochhammer_u<double>
data001[20] =
{
  { 0.90640247705547805, 1.0000000000000000, 0.25000000000000000 },
  { 0.88622692545275894, 1.0000000000000000, 0.50000000000000000 },
  { 0.91906252684888390, 1.0000000000000000, 0.75000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000 },
  { 1.1330030963193474, 1.0000000000000000, 1.2500000000000000 },
  { 1.3293403881791381, 1.0000000000000000, 1.5000000000000000 },
  { 1.6083594219855482, 1.0000000000000000, 1.7500000000000000 },
  { 2.0000000000000000, 1.0000000000000000, 2.0000000000000000 },
  { 2.5492569667185303, 1.0000000000000000, 2.2500000000000000 },
  { 3.3233509704478443, 1.0000000000000000, 2.5000000000000000 },
  { 4.4229884104602544, 1.0000000000000000, 2.7500000000000000 },
  { 6.0000000000000000, 1.0000000000000000, 3.0000000000000000 },
  { 8.2850851418352303, 1.0000000000000000, 3.2500000000000000 },
  { 11.631728396567455, 1.0000000000000000, 3.5000000000000000 },
  { 16.586206539225945, 1.0000000000000000, 3.7500000000000000 },
  { 24.000000000000004, 1.0000000000000000, 4.0000000000000000 },
  { 35.211611852799692, 1.0000000000000000, 4.2500000000000000 },
  { 52.342777784553512, 1.0000000000000000, 4.5000000000000000 },
  { 78.784481061323319, 1.0000000000000000, 4.7500000000000000 },
  { 119.99999999999997, 1.0000000000000000, 5.0000000000000000 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 3.9790393202565610e-13
// max(|f - f_GSL| / |f_GSL|): 1.8037631934315502e-15
const testcase_pochhammer_u<double>
data002[20] =
{
  { 1.1330030963193474, 2.0000000000000000, 0.25000000000000000 },
  { 1.3293403881791381, 2.0000000000000000, 0.50000000000000000 },
  { 1.6083594219855482, 2.0000000000000000, 0.75000000000000000 },
  { 2.0000000000000000, 2.0000000000000000, 1.0000000000000000 },
  { 2.5492569667185303, 2.0000000000000000, 1.2500000000000000 },
  { 3.3233509704478443, 2.0000000000000000, 1.5000000000000000 },
  { 4.4229884104602544, 2.0000000000000000, 1.7500000000000000 },
  { 6.0000000000000000, 2.0000000000000000, 2.0000000000000000 },
  { 8.2850851418352303, 2.0000000000000000, 2.2500000000000000 },
  { 11.631728396567455, 2.0000000000000000, 2.5000000000000000 },
  { 16.586206539225945, 2.0000000000000000, 2.7500000000000000 },
  { 24.000000000000004, 2.0000000000000000, 3.0000000000000000 },
  { 35.211611852799692, 2.0000000000000000, 3.2500000000000000 },
  { 52.342777784553512, 2.0000000000000000, 3.5000000000000000 },
  { 78.784481061323319, 2.0000000000000000, 3.7500000000000000 },
  { 119.99999999999997, 2.0000000000000000, 4.0000000000000000 },
  { 184.86096222719851, 2.0000000000000000, 4.2500000000000000 },
  { 287.88527781504445, 2.0000000000000000, 4.5000000000000000 },
  { 453.01076610260861, 2.0000000000000000, 4.7500000000000000 },
  { 720.00000000000011, 2.0000000000000000, 5.0000000000000000 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 2.7284841053187847e-11
// max(|f - f_GSL| / |f_GSL|): 2.6481053907869688e-15
const testcase_pochhammer_u<double>
data003[20] =
{
  { 1.4671504938666537, 5.0000000000000000, 0.25000000000000000 },
  { 2.1809490743563962, 5.0000000000000000, 0.50000000000000000 },
  { 3.2826867108884703, 5.0000000000000000, 0.75000000000000000 },
  { 4.9999999999999991, 5.0000000000000000, 1.0000000000000000 },
  { 7.7025400927999339, 5.0000000000000000, 1.2500000000000000 },
  { 11.995219908960177, 5.0000000000000000, 1.5000000000000000 },
  { 18.875448587608680, 5.0000000000000000, 1.7500000000000000 },
  { 29.999999999999989, 5.0000000000000000, 2.0000000000000000 },
  { 48.140875579999587, 5.0000000000000000, 2.2500000000000000 },
  { 77.968929408241181, 5.0000000000000000, 2.5000000000000000 },
  { 127.40927796635857, 5.0000000000000000, 2.7500000000000000 },
  { 209.99999999999994, 5.0000000000000000, 3.0000000000000000 },
  { 349.02134795499683, 5.0000000000000000, 3.2500000000000000 },
  { 584.76697056180910, 5.0000000000000000, 3.5000000000000000 },
  { 987.42190423927889, 5.0000000000000000, 3.7500000000000000 },
  { 1680.0000000000000, 5.0000000000000000, 4.0000000000000000 },
  { 2879.4261206287224, 5.0000000000000000, 4.2500000000000000 },
  { 4970.5192497753769, 5.0000000000000000, 4.5000000000000000 },
  { 8639.9416620936900, 5.0000000000000000, 4.7500000000000000 },
  { 15119.999999999996, 5.0000000000000000, 5.0000000000000000 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for a=10.000000000000000.
// max(|f - f_GSL|): 8.4401108324527740e-10
// max(|f - f_GSL| / |f_GSL|): 4.1170006113175519e-15
const testcase_pochhammer_u<double>
data004[20] =
{
  { 1.7615536782946897, 10.000000000000000, 0.25000000000000000 },
  { 3.1230114333906132, 10.000000000000000, 0.50000000000000000 },
  { 5.5713909527389918, 10.000000000000000, 0.75000000000000000 },
  { 10.000000000000002, 10.000000000000000, 1.0000000000000000 },
  { 18.055925202520566, 10.000000000000000, 1.2500000000000000 },
  { 32.791620050601445, 10.000000000000000, 1.5000000000000000 },
  { 59.892452741944169, 10.000000000000000, 1.7500000000000000 },
  { 110.00000000000004, 10.000000000000000, 2.0000000000000000 },
  { 203.12915852835638, 10.000000000000000, 2.2500000000000000 },
  { 377.10363058191638, 10.000000000000000, 2.5000000000000000 },
  { 703.73631971784380, 10.000000000000000, 2.7500000000000000 },
  { 1320.0000000000000, 10.000000000000000, 3.0000000000000000 },
  { 2488.3321919723658, 10.000000000000000, 3.2500000000000000 },
  { 4713.7953822739555, 10.000000000000000, 3.5000000000000000 },
  { 8972.6380764025107, 10.000000000000000, 3.7500000000000000 },
  { 17160.000000000007, 10.000000000000000, 4.0000000000000000 },
  { 32970.401543633860, 10.000000000000000, 4.2500000000000000 },
  { 63636.237660698396, 10.000000000000000, 4.5000000000000000 },
  { 123373.77355053442, 10.000000000000000, 4.7500000000000000 },
  { 240240.00000000015, 10.000000000000000, 5.0000000000000000 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for a=20.000000000000000.
// max(|f - f_GSL|): 4.5634806156158447e-08
// max(|f - f_GSL| / |f_GSL|): 8.9471591215255065e-15
const testcase_pochhammer_u<double>
data005[20] =
{
  { 2.1048125445904668, 20.000000000000000, 0.25000000000000000 },
  { 4.4442751612399150, 20.000000000000000, 0.50000000000000000 },
  { 9.4133754185436729, 20.000000000000000, 0.75000000000000000 },
  { 19.999999999999996, 20.000000000000000, 1.0000000000000000 },
  { 42.622454027956941, 20.000000000000000, 1.2500000000000000 },
  { 91.107640805418242, 20.000000000000000, 1.5000000000000000 },
  { 195.32753993478133, 20.000000000000000, 1.7500000000000000 },
  { 419.99999999999994, 20.000000000000000, 2.0000000000000000 },
  { 905.72714809408501, 20.000000000000000, 2.2500000000000000 },
  { 1958.8142773164927, 20.000000000000000, 2.5000000000000000 },
  { 4248.3739935814892, 20.000000000000000, 2.7500000000000000 },
  { 9239.9999999999927, 20.000000000000000, 3.0000000000000000 },
  { 20152.429045093384, 20.000000000000000, 3.2500000000000000 },
  { 44073.321239621117, 20.000000000000000, 3.5000000000000000 },
  { 96650.508353978847, 20.000000000000000, 3.7500000000000000 },
  { 212519.99999999983, 20.000000000000000, 4.0000000000000000 },
  { 468543.97529842128, 20.000000000000000, 4.2500000000000000 },
  { 1035723.0491310951, 20.000000000000000, 4.5000000000000000 },
  { 2295449.5734069990, 20.000000000000000, 4.7500000000000000 },
  { 5100480.0000000037, 20.000000000000000, 5.0000000000000000 },
};
const double toler005 = 5.0000000000000039e-13;

// Test data for a=50.000000000000000.
// max(|f - f_GSL|): 1.3470649719238281e-05
// max(|f - f_GSL| / |f_GSL|): 3.6379788070917137e-14
const testcase_pochhammer_u<double>
data006[20] =
{
  { 2.6541584858928045, 50.000000000000000, 0.25000000000000000 },
  { 7.0534125148769125, 50.000000000000000, 0.50000000000000000 },
  { 18.767851928564557, 50.000000000000000, 0.75000000000000000 },
  { 49.999999999999993, 50.000000000000000, 1.0000000000000000 },
  { 133.37146391611338, 50.000000000000000, 1.2500000000000000 },
  { 356.19733200128428, 50.000000000000000, 1.5000000000000000 },
  { 952.46848537465041, 50.000000000000000, 1.7500000000000000 },
  { 2549.9999999999995, 50.000000000000000, 2.0000000000000000 },
  { 6835.2875257008118, 50.000000000000000, 2.2500000000000000 },
  { 18344.162598066127, 50.000000000000000, 2.5000000000000000 },
  { 49290.244118138224, 50.000000000000000, 2.7500000000000000 },
  { 132600.00000000006, 50.000000000000000, 3.0000000000000000 },
  { 357143.77321786730, 50.000000000000000, 3.2500000000000000 },
  { 963068.53639847203, 50.000000000000000, 3.5000000000000000 },
  { 2600060.3772317888, 50.000000000000000, 3.7500000000000000 },
  { 7027799.9999999953, 50.000000000000000, 4.0000000000000000 },
  { 19017905.923851471, 50.000000000000000, 4.2500000000000000 },
  { 51524166.697318278, 50.000000000000000, 4.5000000000000000 },
  { 139753245.27620870, 50.000000000000000, 4.7500000000000000 },
  { 379501200.00000048, 50.000000000000000, 5.0000000000000000 },
};
const double toler006 = 2.5000000000000015e-12;

// Test data for a=100.00000000000000.
// max(|f - f_GSL|): 0.0014114379882812500
// max(|f - f_GSL| / |f_GSL|): 1.2789974911167181e-13
const testcase_pochhammer_u<double>
data007[20] =
{
  { 3.1593119551812845, 100.00000000000000, 0.25000000000000000 },
  { 9.9875078612625181, 100.00000000000000, 0.50000000000000000 },
  { 31.593168915329436, 100.00000000000000, 0.75000000000000000 },
  { 99.999999999999957, 100.00000000000000, 1.0000000000000000 },
  { 316.72102350692387, 100.00000000000000, 1.2500000000000000 },
  { 1003.7445400568824, 100.00000000000000, 1.5000000000000000 },
  { 3183.0117682194405, 100.00000000000000, 1.7500000000000000 },
  { 10099.999999999998, 100.00000000000000, 2.0000000000000000 },
  { 32068.003630076055, 100.00000000000000, 2.2500000000000000 },
  { 101880.07081577372, 100.00000000000000, 2.5000000000000000 },
  { 323871.44741632842, 100.00000000000000, 2.7500000000000000 },
  { 1030200.0000000002, 100.00000000000000, 3.0000000000000000 },
  { 3278953.3711752743, 100.00000000000000, 3.2500000000000000 },
  { 10442707.258616809, 100.00000000000000, 3.5000000000000000 },
  { 33277791.222027697, 100.00000000000000, 3.7500000000000000 },
  { 106110600.00000003, 100.00000000000000, 4.0000000000000000 },
  { 338551935.57384747, 100.00000000000000, 4.2500000000000000 },
  { 1080820201.2668402, 100.00000000000000, 4.5000000000000000 },
  { 3452570839.2853775, 100.00000000000000, 4.7500000000000000 },
  { 11035502399.999983, 100.00000000000000, 5.0000000000000000 },
};
const double toler007 = 1.0000000000000006e-11;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_pochhammer_u<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::pochhammer_u(data[i].a, data[i].nu);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  return 0;
}
