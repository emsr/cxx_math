// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  pochhammer_l
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

//  Divergence at a=0.0000000000000000 x=0.25000000000000000 f1=0.81604893909826304 f2=inf
//  Divergence at a=1.0000000000000000 x=1.0000000000000000 f1=1.0000000000000000 f2=inf

// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 2.5223472569010696
// max(|f - f_GSL| / |f_GSL|): 0.69570288055012908
const testcase_pochhammer_l<double>
data001[3] =
{
  { 1.2254167024651781, 1.0000000000000000, 0.25000000000000000 },
  { 1.7724538509055161, 1.0000000000000000, 0.50000000000000000 },
  { 3.6256099082219069, 1.0000000000000000, 0.75000000000000000 },
};
const double toler001 = 0.050000000000000003;
//  Divergence at a=2.0000000000000000 x=2.0000000000000000 f1=2.0000000000000000 f2=inf

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 1.4190846055802324
// max(|f - f_GSL| / |f_GSL|): 1.0000000000000000
const testcase_pochhammer_l<double>
data002[7] =
{
  { 0.91906252684888379, 2.0000000000000000, 0.25000000000000000 },
  { 0.88622692545275883, 2.0000000000000000, 0.50000000000000000 },
  { 0.90640247705547794, 2.0000000000000000, 0.75000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 1.0000000000000000 },
  { 1.2254167024651781, 2.0000000000000000, 1.2500000000000000 },
  { 1.7724538509055161, 2.0000000000000000, 1.5000000000000000 },
  { 3.6256099082219069, 2.0000000000000000, 1.7500000000000000 },
};
const double toler002 = 0.050000000000000003;
//  Divergence at a=5.0000000000000000 x=5.0000000000000000 f1=119.99999999999997 f2=inf

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 135.33164780767370
// max(|f - f_GSL| / |f_GSL|): 2878.9999999999995
const testcase_pochhammer_l<double>
data003[19] =
{
  { 0.69109193913441436, 5.0000000000000000, 0.25000000000000000 },
  { 0.48465534985697728, 5.0000000000000000, 0.50000000000000000 },
  { 0.34521188090980126, 5.0000000000000000, 0.75000000000000000 },
  { 0.25000000000000000, 5.0000000000000000, 1.0000000000000000 },
  { 0.18429118376917722, 5.0000000000000000, 1.2500000000000000 },
  { 0.13847295710199350, 5.0000000000000000, 1.5000000000000000 },
  { 0.10621904027993877, 5.0000000000000000, 1.7500000000000000 },
  { 0.083333333333333329, 5.0000000000000000, 2.0000000000000000 },
  { 0.067014975916064506, 5.0000000000000000, 2.2500000000000000 },
  { 0.055389182840797420, 5.0000000000000000, 2.5000000000000000 },
  { 0.047208462346639474, 5.0000000000000000, 2.7500000000000000 },
  { 0.041666666666666664, 5.0000000000000000, 3.0000000000000000 },
  { 0.038294271952036822, 5.0000000000000000, 3.2500000000000000 },
  { 0.036926121893864954, 5.0000000000000000, 3.5000000000000000 },
  { 0.037766769877311583, 5.0000000000000000, 3.7500000000000000 },
  { 0.041666666666666664, 5.0000000000000000, 4.0000000000000000 },
  { 0.051059029269382418, 5.0000000000000000, 4.2500000000000000 },
  { 0.073852243787729838, 5.0000000000000000, 4.5000000000000000 },
  { 0.15106707950924611, 5.0000000000000000, 4.7500000000000000 },
};
const double toler003 = 0.050000000000000003;

// Test data for a=10.000000000000000.
// max(|f - f_GSL|): 30239.999933862538
// max(|f - f_GSL| / |f_GSL|): 457228799.00000155
const testcase_pochhammer_l<double>
data004[20] =
{
  { 0.57142471310143417, 10.000000000000000, 0.25000000000000000 },
  { 0.32873804562006437, 10.000000000000000, 0.50000000000000000 },
  { 0.19043823549131764, 10.000000000000000, 0.75000000000000000 },
  { 0.11111111111111110, 10.000000000000000, 1.0000000000000000 },
  { 0.065305681497306825, 10.000000000000000, 1.2500000000000000 },
  { 0.038675064190595826, 10.000000000000000, 1.5000000000000000 },
  { 0.023083422483796096, 10.000000000000000, 1.7500000000000000 },
  { 0.013888888888888888, 10.000000000000000, 2.0000000000000000 },
  { 0.0084265395480395914, 10.000000000000000, 2.2500000000000000 },
  { 0.0051566752254127764, 10.000000000000000, 2.5000000000000000 },
  { 0.0031839203425925648, 10.000000000000000, 2.7500000000000000 },
  { 0.0019841269841269840, 10.000000000000000, 3.0000000000000000 },
  { 0.0012483762293391987, 10.000000000000000, 3.2500000000000000 },
  { 0.00079333465006350403, 10.000000000000000, 3.5000000000000000 },
  { 0.00050942725481481054, 10.000000000000000, 3.7500000000000000 },
  { 0.00033068783068783067, 10.000000000000000, 4.0000000000000000 },
  { 0.00021710890945029565, 10.000000000000000, 4.2500000000000000 },
  { 0.00014424266364790981, 10.000000000000000, 4.5000000000000000 },
  { 9.7033762821868637e-05, 10.000000000000000, 4.7500000000000000 },
  { 6.6137566137566142e-05, 10.000000000000000, 5.0000000000000000 },
};
const double toler004 = 0.050000000000000003;

// Test data for a=20.000000000000000.
// max(|f - f_GSL|): 1860479.9999992857
// max(|f - f_GSL| / |f_GSL|): 2596039372799.0034
const testcase_pochhammer_l<double>
data005[20] =
{
  { 0.47662660347056579, 20.000000000000000, 0.25000000000000000 },
  { 0.22791154673025207, 20.000000000000000, 0.50000000000000000 },
  { 0.10934091140729693, 20.000000000000000, 0.75000000000000000 },
  { 0.052631578947368418, 20.000000000000000, 1.0000000000000000 },
  { 0.025420085518430172, 20.000000000000000, 1.2500000000000000 },
  { 0.012319543066500113, 20.000000000000000, 1.5000000000000000 },
  { 0.0059912828168381923, 20.000000000000000, 1.7500000000000000 },
  { 0.0029239766081871343, 20.000000000000000, 2.0000000000000000 },
  { 0.0014321174939960660, 20.000000000000000, 2.2500000000000000 },
  { 0.00070397388951429229, 20.000000000000000, 2.5000000000000000 },
  { 0.00034732074300511254, 20.000000000000000, 2.7500000000000000 },
  { 0.00017199862401100791, 20.000000000000000, 3.0000000000000000 },
  { 8.5499551880362159e-05, 20.000000000000000, 3.2500000000000000 },
  { 4.2665084212987399e-05, 20.000000000000000, 3.5000000000000000 },
  { 2.1373584184929994e-05, 20.000000000000000, 3.7500000000000000 },
  { 1.0749914000687994e-05, 20.000000000000000, 4.0000000000000000 },
  { 5.4285429765309311e-06, 20.000000000000000, 4.2500000000000000 },
  { 2.7525860782572522e-06, 20.000000000000000, 4.5000000000000000 },
  { 1.4015465039298358e-06, 20.000000000000000, 4.7500000000000000 },
  { 7.1666093337919961e-07, 20.000000000000000, 5.0000000000000000 },
};
const double toler005 = 0.050000000000000003;

// Test data for a=50.000000000000000.
// max(|f - f_GSL|): 254251199.99999669
// max(|f - f_GSL| / |f_GSL|): 58179305431295240.
const testcase_pochhammer_l<double>
data006[20] =
{
  { 0.37724325484551874, 50.000000000000000, 0.25000000000000000 },
  { 0.14249318211872553, 50.000000000000000, 0.50000000000000000 },
  { 0.053891542860767590, 50.000000000000000, 0.75000000000000000 },
  { 0.020408163265306124, 50.000000000000000, 1.0000000000000000 },
  { 0.0077383231763183333, 50.000000000000000, 1.2500000000000000 },
  { 0.0029380037550252691, 50.000000000000000, 1.5000000000000000 },
  { 0.0011169231680988106, 50.000000000000000, 1.7500000000000000 },
  { 0.00042517006802721092, 50.000000000000000, 2.0000000000000000 },
  { 0.00016205912411137866, 50.000000000000000, 2.2500000000000000 },
  { 6.1852710632110926e-05, 50.000000000000000, 2.5000000000000000 },
  { 2.3638585568228793e-05, 50.000000000000000, 2.7500000000000000 },
  { 9.0461716601534239e-06, 50.000000000000000, 3.0000000000000000 },
  { 3.4665053285856395e-06, 50.000000000000000, 3.2500000000000000 },
  { 1.3301658200453964e-06, 50.000000000000000, 3.5000000000000000 },
  { 5.1110455282656848e-07, 50.000000000000000, 3.7500000000000000 },
  { 1.9665590565550920e-07, 50.000000000000000, 4.0000000000000000 },
  { 7.5770608275095964e-08, 50.000000000000000, 4.2500000000000000 },
  { 2.9234413627371349e-08, 50.000000000000000, 4.5000000000000000 },
  { 1.1295128239261184e-08, 50.000000000000000, 4.7500000000000000 },
  { 4.3701312367890935e-09, 50.000000000000000, 5.0000000000000000 },
};
const double toler006 = 0.050000000000000003;

// Test data for a=100.00000000000000.
// max(|f - f_GSL|): 9034502400.0003014
// max(|f - f_GSL| / |f_GSL|): 7.7541121934828061e+19
const testcase_pochhammer_l<double>
data007[20] =
{
  { 0.31672349789803944, 100.00000000000000, 0.25000000000000000 },
  { 0.10037696342977404, 100.00000000000000, 0.50000000000000000 },
  { 0.031831858490491541, 100.00000000000000, 0.75000000000000000 },
  { 0.010101010101010102, 100.00000000000000, 1.0000000000000000 },
  { 0.0032073265609928055, 100.00000000000000, 1.2500000000000000 },
  { 0.0010190554662921226, 100.00000000000000, 1.5000000000000000 },
  { 0.00032398838158261098, 100.00000000000000, 1.7500000000000000 },
  { 0.00010307153164296021, 100.00000000000000, 2.0000000000000000 },
  { 3.2811524920642497e-05, 100.00000000000000, 2.2500000000000000 },
  { 1.0451850936329462e-05, 100.00000000000000, 2.5000000000000000 },
  { 3.3315000676875169e-06, 100.00000000000000, 2.7500000000000000 },
  { 1.0625931097212393e-06, 100.00000000000000, 3.0000000000000000 },
  { 3.3913720848209303e-07, 100.00000000000000, 3.2500000000000000 },
  { 1.0830933612776646e-07, 100.00000000000000, 3.5000000000000000 },
  { 3.4612987716233947e-08, 100.00000000000000, 3.7500000000000000 },
  { 1.1068678226262910e-08, 100.00000000000000, 4.0000000000000000 },
  { 3.5419029606484917e-09, 100.00000000000000, 4.2500000000000000 },
  { 1.1341291741127374e-09, 100.00000000000000, 4.5000000000000000 },
  { 3.6339094715206225e-10, 100.00000000000000, 4.7500000000000000 },
  { 1.1651240238171485e-10, 100.00000000000000, 5.0000000000000000 },
};
const double toler007 = 0.050000000000000003;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_pochhammer_l<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::pochhammer_l(data[i].a, data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  return 0;
}
