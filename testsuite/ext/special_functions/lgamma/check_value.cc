// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016-2017 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  lgamma

//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Divergence at a=-9.0000000000000000 f=inf f_Boost=inf
// Divergence at a=-8.0000000000000000 f=inf f_Boost=inf
// Divergence at a=-7.0000000000000000 f=inf f_Boost=inf
//  ...
// Divergence at a=0.0000000000000000 f=inf f_Boost=inf
// Test data.
// max(|f - f_Boost|): 7.1054273576010019e-15 at index 131
// max(|f - f_Boost| / |f_Boost|): 2.3519355639624262e-16
// mean(f - f_Boost): 1.4214819797432807e-16
// variance(f - f_Boost): 1.4641350997509589e-34
// stddev(f - f_Boost): 1.2100145039423945e-17
const testcase_lgamma<double>
data001[140] =
{
  { -12.959854063575134, -9.8000000000000007, 0.0 },
  { -12.976511577561531, -9.5999999999999996, 0.0 },
  { -12.515914695849260, -9.4000000000000004, 0.0 },
  { -11.578143243404925, -9.1999999999999993, 0.0 },
  { -10.677471677898609, -8.8000000000000007, 0.0 },
  { -10.714748479087742, -8.5999999999999996, 0.0 },
  { -10.275205006573302, -8.4000000000000004, 0.0 },
  { -9.3589397593499299, -8.1999999999999993, 0.0 },
  { -8.5027199564144489, -7.7999999999999998, 0.0 },
  { -8.5629862758282798, -7.5999999999999996, 0.0 },
  { -8.1469733007240333, -7.4000000000000004, 0.0 },
  { -7.2548056050797234, -7.1999999999999993, 0.0 },
  { -6.4485962227189031, -6.7999999999999998, 0.0 },
  { -6.5348380285359946, -6.5999999999999996, 0.0 },
  { -6.1454933005139099, -6.4000000000000004, 0.0 },
  { -5.2807245790577131, -6.1999999999999993, 0.0 },
  { -4.5316736105368420, -5.7999999999999998, 0.0 },
  { -4.6477683795036144, -5.5999999999999996, 0.0 },
  { -4.2891953101482816, -5.3999999999999995, 0.0 },
  { -3.4561752870066678, -5.1999999999999993, 0.0 },
  { -2.7738156929844688, -4.7999999999999998, 0.0 },
  { -2.9250017817625107, -4.5999999999999996, 0.0 },
  { -2.6027963565780525, -4.3999999999999995, 0.0 },
  { -1.8075166614192861, -4.1999999999999993, 0.0 },
  { -1.2051997750706236, -3.7999999999999998, 0.0 },
  { -1.3989454782674617, -3.5999999999999996, 0.0 },
  { -1.1211918156538374, -3.3999999999999995, 0.0 },
  { -0.37243213612996368, -3.1999999999999993, 0.0 },
  { 0.12980129166171647, -2.7999999999999998, 0.0 },
  { -0.11801163280539742, -2.5999999999999996, 0.0 },
  { 0.10258361596827821, -2.3999999999999995, 0.0 },
  { 0.79071867367571691, -2.1999999999999993, 0.0 },
  { 1.1594207088428716, -1.7999999999999989, 0.0 },
  { 0.83749981222203884, -1.5999999999999996, 0.0 },
  { 0.97805235332217644, -1.4000000000000004, 0.0 },
  { 1.5791760340399867, -1.1999999999999993, 0.0 },
  { 1.7472073737449900, -0.79999999999999893, 0.0 },
  { 1.3075034414677742, -0.59999999999999964, 0.0 },
  { 1.3145245899433913, -0.39999999999999858, 0.0 },
  { 1.7614975908339408, -0.19999999999999929, 0.0 },
  { 1.5240638224307790, 0.20000000000000107, 0.0 },
  { 0.79667781770178281, 0.40000000000000036, 0.0 },
  { 0.39823385806923273, 0.60000000000000142, 0.0 },
  { 0.15205967839983689, 0.80000000000000071, 0.0 },
  { 0.0000000000000000, 1.0000000000000000, 0.0 },
  { -0.085374090003316153, 1.2000000000000011, 0.0 },
  { -0.11961291417237133, 1.4000000000000004, 0.0 },
  { -0.11259176569675561, 1.6000000000000014, 0.0 },
  { -0.071083872914371959, 1.8000000000000007, 0.0 },
  { 0.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.096947466790639356, 2.2000000000000011, 0.0 },
  { 0.21685932244884187, 2.4000000000000004, 0.0 },
  { 0.35741186354898086, 2.6000000000000014, 0.0 },
  { 0.51670279198774749, 2.8000000000000007, 0.0 },
  { 0.69314718055994529, 3.0000000000000000, 0.0 },
  { 0.88540482715490998, 3.2000000000000011, 0.0 },
  { 1.0923280598027421, 3.4000000000000004, 0.0 },
  { 1.3129233085764178, 3.6000000000000014, 0.0 },
  { 1.5463222091689059, 3.8000000000000007, 0.0 },
  { 1.7917594692280550, 4.0000000000000000, 0.0 },
  { 2.0485556369605913, 4.2000000000000011, 0.0 },
  { 2.3161034914248577, 4.4000000000000004, 0.0 },
  { 2.5938571540384823, 4.6000000000000014, 0.0 },
  { 2.8813232759012464, 4.8000000000000007, 0.0 },
  { 3.1780538303479458, 5.0000000000000000, 0.0 },
  { 3.4836401622499142, 5.2000000000000011, 0.0 },
  { 3.7977080323490733, 5.4000000000000004, 0.0 },
  { 4.1199134575335323, 5.6000000000000014, 0.0 },
  { 4.4499391938150916, 5.8000000000000007, 0.0 },
  { 4.7874917427820458, 6.0000000000000000, 0.0 },
  { 5.1322987878372928, 6.1999999999999993, 0.0 },
  { 5.4841069859193050, 6.4000000000000021, 0.0 },
  { 5.8426800552746361, 6.6000000000000014, 0.0 },
  { 6.2077971113674657, 6.8000000000000007, 0.0 },
  { 6.5792512120101012, 7.0000000000000000, 0.0 },
  { 6.9568480798883385, 7.1999999999999993, 0.0 },
  { 7.3404049762849315, 7.4000000000000021, 0.0 },
  { 7.7297497043070162, 7.6000000000000014, 0.0 },
  { 8.1247197235495268, 7.8000000000000007, 0.0 },
  { 8.5251613610654147, 8.0000000000000000, 0.0 },
  { 8.9309291059103479, 8.1999999999999993, 0.0 },
  { 9.3418849764950558, 8.4000000000000021, 0.0 },
  { 9.7578979515993023, 8.6000000000000014, 0.0 },
  { 10.178843457245073, 8.8000000000000007, 0.0 },
  { 10.604602902745251, 9.0000000000000000, 0.0 },
  { 11.035063260180562, 9.2000000000000028, 0.0 },
  { 11.470116682344324, 9.4000000000000021, 0.0 },
  { 11.909660154858765, 9.6000000000000014, 0.0 },
  { 12.353595178729233, 9.8000000000000007, 0.0 },
  { 12.801827480081469, 10.000000000000000, 0.0 },
  { 13.254266744235558, 10.200000000000003, 0.0 },
  { 13.710826371620282, 10.400000000000002, 0.0 },
  { 14.171423253332554, 10.600000000000001, 0.0 },
  { 14.635977564405760, 10.800000000000001, 0.0 },
  { 15.104412573075516, 11.000000000000000, 0.0 },
  { 15.576654464525785, 11.200000000000003, 0.0 },
  { 16.052632177767610, 11.400000000000002, 0.0 },
  { 16.532277254450577, 11.600000000000001, 0.0 },
  { 17.015523698535933, 11.800000000000001, 0.0 },
  { 17.502307845873887, 12.000000000000000, 0.0 },
  { 17.992568242826835, 12.200000000000003, 0.0 },
  { 18.486245533168059, 12.400000000000002, 0.0 },
  { 18.983282352562895, 12.600000000000001, 0.0 },
  { 19.483623230007552, 12.800000000000001, 0.0 },
  { 19.987214495661885, 13.000000000000000, 0.0 },
  { 20.494004194566045, 13.200000000000003, 0.0 },
  { 21.003942005779052, 13.400000000000002, 0.0 },
  { 21.516979166520329, 13.600000000000001, 0.0 },
  { 22.033068400933125, 13.800000000000001, 0.0 },
  { 22.552163853123425, 14.000000000000000, 0.0 },
  { 23.074221024158369, 14.200000000000003, 0.0 },
  { 23.599196712735917, 14.400000000000002, 0.0 },
  { 24.127048959262336, 14.600000000000001, 0.0 },
  { 24.657736993096282, 14.800000000000001, 0.0 },
  { 25.191221182738680, 15.000000000000000, 0.0 },
  { 25.727462988765584, 15.200000000000003, 0.0 },
  { 26.266424919317870, 15.400000000000002, 0.0 },
  { 26.808070487976625, 15.600000000000001, 0.0 },
  { 27.352364173866352, 15.800000000000001, 0.0 },
  { 27.899271383840890, 16.000000000000000, 0.0 },
  { 28.448758416617814, 16.200000000000003, 0.0 },
  { 29.000792428737455, 16.400000000000002, 0.0 },
  { 29.555341402232116, 16.600000000000001, 0.0 },
  { 30.112374113899275, 16.800000000000001, 0.0 },
  { 30.671860106080672, 17.000000000000000, 0.0 },
  { 31.233769658856154, 17.200000000000003, 0.0 },
  { 31.798073763567608, 17.400000000000002, 0.0 },
  { 32.364744097594617, 17.600000000000001, 0.0 },
  { 32.933753000308485, 17.800000000000001, 0.0 },
  { 33.505073450136891, 18.000000000000000, 0.0 },
  { 34.078679042675560, 18.200000000000003, 0.0 },
  { 34.654543969788094, 18.400000000000002, 0.0 },
  { 35.232642999638720, 18.600000000000001, 0.0 },
  { 35.812951457606530, 18.800000000000001, 0.0 },
  { 36.395445208033053, 19.000000000000000, 0.0 },
  { 36.980100636758308, 19.200000000000003, 0.0 },
  { 37.566894634403035, 19.400000000000002, 0.0 },
  { 38.155804580357874, 19.600000000000001, 0.0 },
  { 38.746808327442430, 19.800000000000001, 0.0 },
  { 39.339884187199495, 20.000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_lgamma<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::lgamma(data[i].a);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
