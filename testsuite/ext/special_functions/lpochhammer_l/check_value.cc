// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  lpochhammer_l
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Failure at a=0.25000000000000000 x=2.0000000000000000 f=-1.6739764335716716 f_Boost=nan
// Test data for a=0.25000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data001[2] =
{
  { 0.0000000000000000, 0.25000000000000000, 0.0000000000000000 },
  { -1.3862943611198906, 0.25000000000000000, 1.0000000000000000 },
};
const double toler001 = 2.5000000000000020e-13;

// Failure at a=0.50000000000000000 x=2.0000000000000000 f=-1.3862943611198906 f_Boost=nan
// Test data for a=0.50000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data002[2] =
{
  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { -0.69314718055994529, 0.50000000000000000, 1.0000000000000000 },
};
const double toler002 = 2.5000000000000020e-13;

// Failure at a=0.75000000000000000 x=2.0000000000000000 f=-1.6739764335716716 f_Boost=nan
// Test data for a=0.75000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data003[2] =
{
  { 0.0000000000000000, 0.75000000000000000, 0.0000000000000000 },
  { -0.28768207245178090, 0.75000000000000000, 1.0000000000000000 },
};
const double toler003 = 2.5000000000000020e-13;

// Divergence at a=1.0000000000000000 x=2.0000000000000000 f=-inf f_Boost=-inf
// Divergence at a=1.0000000000000000 x=5.0000000000000000 f=-inf f_Boost=-inf
// Divergence at a=1.0000000000000000 x=10.000000000000000 f=-inf f_Boost=-inf
// ...
// Divergence at a=1.0000000000000000 x=100.00000000000000 f=-inf f_Boost=-inf
// Failure at a=1.2500000000000000 x=5.0000000000000000 f=0.12038381735644083 f_Boost=nan
// Test data for a=1.2500000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data004[3] =
{
  { 0.0000000000000000, 1.2500000000000000, 0.0000000000000000 },
  { 0.22314355131420976, 1.2500000000000000, 1.0000000000000000 },
  { -1.1631508098056809, 1.2500000000000000, 2.0000000000000000 },
};
const double toler004 = 2.5000000000000020e-13;

// Failure at a=1.5000000000000000 x=5.0000000000000000 f=0.34092658697059325 f_Boost=nan
// Test data for a=1.5000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data005[3] =
{
  { 0.0000000000000000, 1.5000000000000000, 0.0000000000000000 },
  { 0.40546510810816438, 1.5000000000000000, 1.0000000000000000 },
  { -0.28768207245178090, 1.5000000000000000, 2.0000000000000000 },
};
const double toler005 = 2.5000000000000020e-13;

// Failure at a=1.7500000000000000 x=5.0000000000000000 f=-0.080286878105710280 f_Boost=nan
// Test data for a=1.7500000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data006[3] =
{
  { 0.0000000000000000, 1.7500000000000000, 0.0000000000000000 },
  { 0.55961578793542266, 1.7500000000000000, 1.0000000000000000 },
  { 0.27193371548364176, 1.7500000000000000, 2.0000000000000000 },
};
const double toler006 = 2.5000000000000020e-13;

// Divergence at a=2.0000000000000000 x=5.0000000000000000 f=-inf f_Boost=-inf
// Divergence at a=2.0000000000000000 x=10.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=2.0000000000000000 x=20.000000000000000 f=-inf f_Boost=-inf
// ...
// Divergence at a=2.0000000000000000 x=100.00000000000000 f=-inf f_Boost=-inf
// Test data for a=2.0000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data007[3] =
{
  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },
  { 0.69314718055994529, 2.0000000000000000, 1.0000000000000000 },
  { 0.69314718055994529, 2.0000000000000000, 2.0000000000000000 },
};
const double toler007 = 2.5000000000000020e-13;

// Failure at a=2.2500000000000000 x=10.000000000000000 f=7.4699568512953363 f_Boost=nan
// Test data for a=2.2500000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16
// max(|f - f_Boost| / |f_Boost|): 1.3828200209296628e-15
// mean(f - f_Boost): -2.7755575615628914e-17
// variance(f - f_Boost): 3.0814879110195774e-33
// stddev(f - f_Boost): 5.5511151231257827e-17
const testcase_lpochhammer_l<double>
data008[4] =
{
  { 0.0000000000000000, 2.2500000000000000, 0.0000000000000000 },
  { 0.81093021621632877, 2.2500000000000000, 1.0000000000000000 },
  { 1.0340737675305385, 2.2500000000000000, 2.0000000000000000 },
  { -0.080286878105710335, 2.2500000000000000, 5.0000000000000000 },
};
const double toler008 = 2.5000000000000020e-13;

// Failure at a=2.5000000000000000 x=10.000000000000000 f=7.5906079532564075 f_Boost=nan
// Test data for a=2.5000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16
// max(|f - f_Boost| / |f_Boost|): 6.5129741537049407e-16
// mean(f - f_Boost): 5.5511151231257827e-17
// variance(f - f_Boost): 1.2325951644078309e-32
// stddev(f - f_Boost): 1.1102230246251565e-16
const testcase_lpochhammer_l<double>
data009[4] =
{
  { 0.0000000000000000, 2.5000000000000000, 0.0000000000000000 },
  { 0.91629073187415511, 2.5000000000000000, 1.0000000000000000 },
  { 1.3217558399823195, 2.5000000000000000, 2.0000000000000000 },
  { 0.34092658697059319, 2.5000000000000000, 5.0000000000000000 },
};
const double toler009 = 2.5000000000000020e-13;

// Failure at a=2.7500000000000000 x=10.000000000000000 f=7.0476975532025836 f_Boost=nan
// Test data for a=2.7500000000000000.
// max(|f - f_Boost|): 5.5511151231257827e-17
// max(|f - f_Boost| / |f_Boost|): 4.6111805099930103e-16
// mean(f - f_Boost): 1.3877787807814457e-17
// variance(f - f_Boost): 7.7037197775489434e-34
// stddev(f - f_Boost): 2.7755575615628914e-17
const testcase_lpochhammer_l<double>
data010[4] =
{
  { 0.0000000000000000, 2.7500000000000000, 0.0000000000000000 },
  { 1.0116009116784799, 2.7500000000000000, 1.0000000000000000 },
  { 1.5712166996139025, 2.7500000000000000, 2.0000000000000000 },
  { 0.12038381735644083, 2.7500000000000000, 5.0000000000000000 },
};
const double toler010 = 2.5000000000000020e-13;

// Divergence at a=3.0000000000000000 x=5.0000000000000000 f=-inf f_Boost=-inf
// Divergence at a=3.0000000000000000 x=10.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=3.0000000000000000 x=20.000000000000000 f=-inf f_Boost=-inf
// ...
// Divergence at a=3.0000000000000000 x=100.00000000000000 f=-inf f_Boost=-inf
// Test data for a=3.0000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16
// max(|f - f_Boost| / |f_Boost|): 2.0211370946362213e-16
// mean(f - f_Boost): -7.4014868308343765e-17
// variance(f - f_Boost): 4.1086505480261029e-33
// stddev(f - f_Boost): 6.4098756212785461e-17
const testcase_lpochhammer_l<double>
data011[3] =
{
  { 0.0000000000000000, 3.0000000000000000, 0.0000000000000000 },
  { 1.0986122886681098, 3.0000000000000000, 1.0000000000000000 },
  { 1.7917594692280550, 3.0000000000000000, 2.0000000000000000 },
};
const double toler011 = 2.5000000000000020e-13;

// Failure at a=3.2500000000000000 x=5.0000000000000000 f=0.53875233030051328 f_Boost=nan
// Test data for a=3.2500000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16
// max(|f - f_Boost| / |f_Boost|): 1.8838812512077047e-16
// mean(f - f_Boost): 1.4802973661668753e-16
// variance(f - f_Boost): 4.1086505480261029e-33
// stddev(f - f_Boost): 6.4098756212785461e-17
const testcase_lpochhammer_l<double>
data012[3] =
{
  { 0.0000000000000000, 3.2500000000000000, 0.0000000000000000 },
  { 1.1786549963416462, 3.2500000000000000, 1.0000000000000000 },
  { 1.9895852125579749, 3.2500000000000000, 2.0000000000000000 },
};
const double toler012 = 2.5000000000000020e-13;

// Failure at a=3.5000000000000000 x=5.0000000000000000 f=1.1882244473577970 f_Boost=nan
// Test data for a=3.5000000000000000.
// max(|f - f_Boost|): 0.0000000000000000
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_lpochhammer_l<double>
data013[3] =
{
  { 0.0000000000000000, 3.5000000000000000, 0.0000000000000000 },
  { 1.2527629684953681, 3.5000000000000000, 1.0000000000000000 },
  { 2.1690537003695232, 3.5000000000000000, 2.0000000000000000 },
};
const double toler013 = 2.5000000000000020e-13;

// Failure at a=3.7500000000000000 x=5.0000000000000000 f=1.2189961060245509 f_Boost=nan
// Test data for a=3.7500000000000000.
// max(|f - f_Boost|): 4.4408920985006262e-16
// max(|f - f_Boost| / |f_Boost|): 3.3598429938164902e-16
// mean(f - f_Boost): 1.4802973661668753e-16
// variance(f - f_Boost): 1.6434602192104412e-32
// stddev(f - f_Boost): 1.2819751242557092e-16
const testcase_lpochhammer_l<double>
data014[3] =
{
  { 0.0000000000000000, 3.7500000000000000, 0.0000000000000000 },
  { 1.3217558399823195, 3.7500000000000000, 1.0000000000000000 },
  { 2.3333567516607996, 3.7500000000000000, 2.0000000000000000 },
};
const double toler014 = 2.5000000000000020e-13;

// Divergence at a=4.0000000000000000 x=5.0000000000000000 f=-inf f_Boost=-inf
// Divergence at a=4.0000000000000000 x=10.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=4.0000000000000000 x=20.000000000000000 f=-inf f_Boost=-inf
// ...
// Divergence at a=4.0000000000000000 x=100.00000000000000 f=-inf f_Boost=-inf
// Test data for a=4.0000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16
// max(|f - f_Boost| / |f_Boost|): 1.6017132519074588e-16
// mean(f - f_Boost): 7.4014868308343765e-17
// variance(f - f_Boost): 4.1086505480261029e-33
// stddev(f - f_Boost): 6.4098756212785461e-17
const testcase_lpochhammer_l<double>
data015[3] =
{
  { 0.0000000000000000, 4.0000000000000000, 0.0000000000000000 },
  { 1.3862943611198906, 4.0000000000000000, 1.0000000000000000 },
  { 2.4849066497880004, 4.0000000000000000, 2.0000000000000000 },
};
const double toler015 = 2.5000000000000020e-13;

// Failure at a=4.2500000000000000 x=10.000000000000000 f=6.4367884708796108 f_Boost=nan
// Test data for a=4.2500000000000000.
// max(|f - f_Boost|): 4.4408920985006262e-16
// max(|f - f_Boost| / |f_Boost|): 1.9534543667769627e-16
// mean(f - f_Boost): 1.1102230246251565e-16
// variance(f - f_Boost): 4.9303806576313238e-32
// stddev(f - f_Boost): 2.2204460492503131e-16
const testcase_lpochhammer_l<double>
data016[4] =
{
  { 0.0000000000000000, 4.2500000000000000, 0.0000000000000000 },
  { 1.4469189829363254, 4.2500000000000000, 1.0000000000000000 },
  { 2.6255739792779718, 4.2500000000000000, 2.0000000000000000 },
  { 2.2733533856886194, 4.2500000000000000, 5.0000000000000000 },
};
const double toler016 = 2.5000000000000020e-13;

// Failure at a=4.5000000000000000 x=10.000000000000000 f=6.7708980493880331 f_Boost=nan
// Test data for a=4.5000000000000000.
// max(|f - f_Boost|): 4.4408920985006262e-16
// max(|f - f_Boost| / |f_Boost|): 1.3117586666076012e-16
// mean(f - f_Boost): 1.1102230246251565e-16
// variance(f - f_Boost): 4.9303806576313238e-32
// stddev(f - f_Boost): 2.2204460492503131e-16
const testcase_lpochhammer_l<double>
data017[4] =
{
  { 0.0000000000000000, 4.5000000000000000, 0.0000000000000000 },
  { 1.5040773967762742, 4.5000000000000000, 1.0000000000000000 },
  { 2.7568403652716422, 4.5000000000000000, 2.0000000000000000 },
  { 3.3854490246940161, 4.5000000000000000, 5.0000000000000000 },
};
const double toler017 = 2.5000000000000020e-13;

// Failure at a=4.7500000000000000 x=10.000000000000000 f=6.4367884708796099 f_Boost=nan
// Test data for a=4.7500000000000000.
// max(|f - f_Boost|): 8.8817841970012523e-16
// max(|f - f_Boost| / |f_Boost|): 5.7002309632442003e-16
// mean(f - f_Boost): -2.2204460492503131e-16
// variance(f - f_Boost): 2.1912802922805882e-32
// stddev(f - f_Boost): 1.4802973661668753e-16
const testcase_lpochhammer_l<double>
data018[4] =
{
  { 0.0000000000000000, 4.7500000000000000, 0.0000000000000000 },
  { 1.5581446180465499, 4.7500000000000000, 1.0000000000000000 },
  { 2.8799004580288692, 4.7500000000000000, 2.0000000000000000 },
  { 4.1634350851909909, 4.7500000000000000, 5.0000000000000000 },
};
const double toler018 = 2.5000000000000020e-13;

// Divergence at a=5.0000000000000000 x=10.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=5.0000000000000000 x=20.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=5.0000000000000000 x=50.000000000000000 f=-inf f_Boost=-inf
// Divergence at a=5.0000000000000000 x=100.00000000000000 f=-inf f_Boost=-inf
// Test data for a=5.0000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16
// max(|f - f_Boost| / |f_Boost|): 1.3796407007040920e-16
// mean(f - f_Boost): -5.5511151231257827e-17
// variance(f - f_Boost): 1.3695501826753676e-33
// stddev(f - f_Boost): 3.7007434154171883e-17
const testcase_lpochhammer_l<double>
data019[4] =
{
  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },
  { 1.6094379124341003, 5.0000000000000000, 1.0000000000000000 },
  { 2.9957322735539909, 5.0000000000000000, 2.0000000000000000 },
  { 4.7874917427820458, 5.0000000000000000, 5.0000000000000000 },
};
const double toler019 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_lpochhammer_l<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = -Ret(1);
    Ret max_abs_frac = -Ret(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::lpochhammer_l(data[i].a, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  return 0;
}
