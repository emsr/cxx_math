// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_rc
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for x=0.50000000000000000.
testcase_ellint_rc<double> data001[] = {
  { 1.4142135623730949, 0.50000000000000000, 0.50000000000000000 },
  { 1.1107207345395913, 0.50000000000000000, 1.0000000000000000 },
  { 0.95531661812450930, 0.50000000000000000, 1.5000000000000000 },
  { 0.85503322010790939, 0.50000000000000000, 2.0000000000000000 },
  { 0.78287236613419264, 0.50000000000000000, 2.5000000000000000 },
  { 0.72748955981916175, 0.50000000000000000, 3.0000000000000000 },
  { 0.68312063073973328, 0.50000000000000000, 3.5000000000000000 },
  { 0.64646710153810172, 0.50000000000000000, 4.0000000000000000 },
  { 0.61547970867038726, 0.50000000000000000, 4.5000000000000000 },
  { 0.58880582378346324, 0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data001[i].x), Tp(data001[i].y));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000.
testcase_ellint_rc<double> data002[] = {
  { 1.2464504802804612, 1.0000000000000000, 0.50000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000 },
  { 0.87041975136710314, 1.0000000000000000, 1.5000000000000000 },
  { 0.78539816339744817, 1.0000000000000000, 2.0000000000000000 },
  { 0.72347894201494256, 1.0000000000000000, 2.5000000000000000 },
  { 0.67551085885604001, 1.0000000000000000, 3.0000000000000000 },
  { 0.63679018330139725, 1.0000000000000000, 3.5000000000000000 },
  { 0.60459978807807258, 1.0000000000000000, 4.0000000000000000 },
  { 0.57723812571556010, 1.0000000000000000, 4.5000000000000000 },
  { 0.55357435889704532, 1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000.
template<typename Tp>
  void
  test002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data002[i].x), Tp(data002[i].y));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000.
testcase_ellint_rc<double> data003[] = {
  { 1.1462158347805889, 1.5000000000000000, 0.50000000000000000 },
  { 0.93122985945271219, 1.5000000000000000, 1.0000000000000000 },
  { 0.81649658092772615, 1.5000000000000000, 1.5000000000000000 },
  { 0.74048048969306102, 1.5000000000000000, 2.0000000000000000 },
  { 0.68471920300228295, 1.5000000000000000, 2.5000000000000000 },
  { 0.64127491508093204, 1.5000000000000000, 3.0000000000000000 },
  { 0.60604138628959081, 1.5000000000000000, 3.5000000000000000 },
  { 0.57663392588994911, 1.5000000000000000, 4.0000000000000000 },
  { 0.55155230663550825, 1.5000000000000000, 4.5000000000000000 },
  { 0.52979548043855929, 1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000.
template<typename Tp>
  void
  test003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data003)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data003[i].x), Tp(data003[i].y));
	const Tp f0 = data003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000.
testcase_ellint_rc<double> data004[] = {
  { 1.0752916200648814, 2.0000000000000000, 0.50000000000000000 },
  { 0.88137358701954316, 2.0000000000000000, 1.0000000000000000 },
  { 0.77683619921209335, 2.0000000000000000, 1.5000000000000000 },
  { 0.70710678118654746, 2.0000000000000000, 2.0000000000000000 },
  { 0.65569673681079788, 2.0000000000000000, 2.5000000000000000 },
  { 0.61547970867038726, 2.0000000000000000, 3.0000000000000000 },
  { 0.58275351513316587, 2.0000000000000000, 3.5000000000000000 },
  { 0.55536036726979565, 2.0000000000000000, 4.0000000000000000 },
  { 0.53193853352089682, 2.0000000000000000, 4.5000000000000000 },
  { 0.51157686594443497, 2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000.
template<typename Tp>
  void
  test004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data004)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data004[i].x), Tp(data004[i].y));
	const Tp f0 = data004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000.
testcase_ellint_rc<double> data005[] = {
  { 1.0208044340604008, 2.5000000000000000, 0.50000000000000000 },
  { 0.84239465585637685, 2.5000000000000000, 1.0000000000000000 },
  { 0.74549815449740420, 2.5000000000000000, 1.5000000000000000 },
  { 0.68053628937360033, 2.5000000000000000, 2.0000000000000000 },
  { 0.63245553203367588, 2.5000000000000000, 2.5000000000000000 },
  { 0.59472536040213786, 2.5000000000000000, 3.0000000000000000 },
  { 0.56394264136062888, 2.5000000000000000, 3.5000000000000000 },
  { 0.53811863288520567, 2.5000000000000000, 4.0000000000000000 },
  { 0.51599537413745378, 2.5000000000000000, 4.5000000000000000 },
  { 0.49672941328980502, 2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000.
template<typename Tp>
  void
  test005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data005)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data005[i].x), Tp(data005[i].y));
	const Tp f0 = data005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000.
testcase_ellint_rc<double> data006[] = {
  { 0.97681805230225316, 3.0000000000000000, 0.50000000000000000 },
  { 0.81049698947675386, 3.0000000000000000, 1.0000000000000000 },
  { 0.71963852032146258, 3.0000000000000000, 1.5000000000000000 },
  { 0.65847894846240840, 3.0000000000000000, 2.0000000000000000 },
  { 0.61307199249007827, 3.0000000000000000, 2.5000000000000000 },
  { 0.57735026918962584, 3.0000000000000000, 3.0000000000000000 },
  { 0.54814449099863127, 3.0000000000000000, 3.5000000000000000 },
  { 0.52359877559829893, 3.0000000000000000, 4.0000000000000000 },
  { 0.50253707775976419, 3.0000000000000000, 4.5000000000000000 },
  { 0.48416959165156237, 3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000.
template<typename Tp>
  void
  test006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data006)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data006[i].x), Tp(data006[i].y));
	const Tp f0 = data006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000.
testcase_ellint_rc<double> data007[] = {
  { 0.94010347172525088, 3.5000000000000000, 0.50000000000000000 },
  { 0.78357721761742360, 3.5000000000000000, 1.0000000000000000 },
  { 0.69766475679190165, 3.5000000000000000, 1.5000000000000000 },
  { 0.63964310999407192, 3.5000000000000000, 2.0000000000000000 },
  { 0.59645536549652434, 3.5000000000000000, 2.5000000000000000 },
  { 0.56240831115298973, 3.5000000000000000, 3.0000000000000000 },
  { 0.53452248382484879, 3.5000000000000000, 3.5000000000000000 },
  { 0.51105028762462490, 3.5000000000000000, 4.0000000000000000 },
  { 0.49088267828931120, 3.5000000000000000, 4.5000000000000000 },
  { 0.47327386617679934, 3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000.
template<typename Tp>
  void
  test007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data007)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data007[i].x), Tp(data007[i].y));
	const Tp f0 = data007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000.
testcase_ellint_rc<double> data008[] = {
  { 0.90871078312300901, 4.0000000000000000, 0.50000000000000000 },
  { 0.76034599630094646, 4.0000000000000000, 1.0000000000000000 },
  { 0.67859209091559147, 4.0000000000000000, 1.5000000000000000 },
  { 0.62322524014023062, 4.0000000000000000, 2.0000000000000000 },
  { 0.58192403020680306, 4.0000000000000000, 2.5000000000000000 },
  { 0.54930614433405489, 4.0000000000000000, 3.0000000000000000 },
  { 0.52255045738047989, 4.0000000000000000, 3.5000000000000000 },
  { 0.50000000000000000, 4.0000000000000000, 4.0000000000000000 },
  { 0.48060196634497682, 4.0000000000000000, 4.5000000000000000 },
  { 0.46364760900080609, 4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000.
template<typename Tp>
  void
  test008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data008)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data008[i].x), Tp(data008[i].y));
	const Tp f0 = data008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000.
testcase_ellint_rc<double> data009[] = {
  { 0.88137358701954316, 4.5000000000000000, 0.50000000000000000 },
  { 0.73995534521687278, 4.5000000000000000, 1.0000000000000000 },
  { 0.66176802075998464, 4.5000000000000000, 1.5000000000000000 },
  { 0.60869016167793533, 4.5000000000000000, 2.0000000000000000 },
  { 0.56902223089043658, 4.5000000000000000, 2.5000000000000000 },
  { 0.53764581003244083, 4.5000000000000000, 3.0000000000000000 },
  { 0.51187461509367371, 4.5000000000000000, 3.5000000000000000 },
  { 0.49012907173427356, 4.5000000000000000, 4.0000000000000000 },
  { 0.47140452079103173, 4.5000000000000000, 4.5000000000000000 },
  { 0.45502399772879371, 4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000.
template<typename Tp>
  void
  test009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data009)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data009[i].x), Tp(data009[i].y));
	const Tp f0 = data009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000.
testcase_ellint_rc<double> data010[] = {
  { 0.85722388169844066, 5.0000000000000000, 0.50000000000000000 },
  { 0.72181773758940515, 5.0000000000000000, 1.0000000000000000 },
  { 0.64673752632340953, 5.0000000000000000, 1.5000000000000000 },
  { 0.59566297359135223, 5.0000000000000000, 2.0000000000000000 },
  { 0.55742960089887450, 5.0000000000000000, 2.5000000000000000 },
  { 0.52714680040717099, 5.0000000000000000, 3.0000000000000000 },
  { 0.50224501365509533, 5.0000000000000000, 3.5000000000000000 },
  { 0.48121182505960342, 5.0000000000000000, 4.0000000000000000 },
  { 0.46308444346663852, 5.0000000000000000, 4.5000000000000000 },
  { 0.44721359549995793, 5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000.
template<typename Tp>
  void
  test010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data010)
			   / sizeof(testcase_ellint_rc<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rc(Tp(data010[i].x), Tp(data010[i].y));
	const Tp f0 = data010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

int
main()
{
  test001<double>();
  test002<double>();
  test003<double>();
  test004<double>();
  test005<double>();
  test006<double>();
  test007<double>();
  test008<double>();
  test009<double>();
  test010<double>();
  return 0;
}
