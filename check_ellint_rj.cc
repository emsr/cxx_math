// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_rj
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for x=0.50000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data001[] = {
  { 6.6643244072375483, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 3.9038708537057190, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 2.8166749167519574, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 2.2214414690791826, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 1.8419739637493597, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 1.5774501443544886, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 1.3818155148978262, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 1.2308942620129153, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 1.1107207345395917, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 1.0126399973167404, 0.50000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data001)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data001[i].x), Tp(data001[i].y),
		     Tp(data001[i].z), Tp(data001[i].p));
	const Tp f0 = data001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data002[] = {
  { 5.0832785087638745, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 3.0205847775221781, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 2.1973661077954416, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 1.7428419316550681, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 1.4512875541496524, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 1.2470657530421689, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 1.0954340601914754, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.97807184990022789, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.88435517821018417, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.80767820858787065, 0.50000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data002)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data002[i].x), Tp(data002[i].y),
		     Tp(data002[i].z), Tp(data002[i].p));
	const Tp f0 = data002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data003[] = {
  { 4.2978716322005361, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 2.5734477287298509, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 1.8806524630730097, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 1.4964482887725452, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 1.2491827947076342, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 1.0755248644599535, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.94630341021465791, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.84609986064974685, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.76595520702690467, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.70028904855358465, 0.50000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data003)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data003[i].x), Tp(data003[i].y),
		     Tp(data003[i].z), Tp(data003[i].p));
	const Tp f0 = data003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data004[] = {
  { 3.8009937597602086, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 2.2873302571228442, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 1.6766867517649831, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 1.3370818171827918, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 1.1180456329443651, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.96394371439393434, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.84910565200448118, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.75994320932668891, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.68855078657464353, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.62999854566270364, 0.50000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data004)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data004[i].x), Tp(data004[i].y),
		     Tp(data004[i].z), Tp(data004[i].p));
	const Tp f0 = data004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data005[] = {
  { 3.4486955468275755, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 2.0828351548210402, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 1.5302303306837042, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 1.2222853262837821, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 1.0233592856949612, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.88322736655512224, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.77868739473107906, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.69744501354206045, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.63234093582850048, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.57890711567971709, 0.50000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data005)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data005[i].x), Tp(data005[i].y),
		     Tp(data005[i].z), Tp(data005[i].p));
	const Tp f0 = data005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data006[] = {
  { 3.1814617579585991, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 1.9267719159486534, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 1.4180586144770113, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 1.1341426707228186, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.95052080503716641, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.82104298622829042, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.72437054641292686, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.64918789322931358, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.58890123107273074, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.53939292908171732, 0.50000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data006)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data006[i].x), Tp(data006[i].y),
		     Tp(data006[i].z), Tp(data006[i].p));
	const Tp f0 = data006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data007[] = {
  { 2.9694371495862444, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 1.8023516014996519, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 1.3283711490916292, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 1.0635241918017548, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.89207345813689432, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.77108317736781407, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.68068727087691305, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.61034475802113153, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.55390996774625134, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.50754327524378695, 0.50000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data007)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data007[i].x), Tp(data007[i].y),
		     Tp(data007[i].z), Tp(data007[i].p));
	const Tp f0 = data007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data008[] = {
  { 2.7957181830885749, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 1.7000050391699437, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 1.2544173977804063, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 1.0051946107285361, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.84373385183465388, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.72971996124302185, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.64448919435342700, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.57813379227068229, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.52487480026761746, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.48110030907459589, 0.50000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data008)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data008[i].x), Tp(data008[i].y),
		     Tp(data008[i].z), Tp(data008[i].p));
	const Tp f0 = data008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data009[] = {
  { 2.6498983543265657, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 1.6138084171153579, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 1.1920055072756153, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.95589630327837638, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.80283267460018048, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.69468986307888980, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.61381026139851969, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.55081653632788519, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.50023718770301384, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.45865137206980555, 0.50000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data009)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data009[i].x), Tp(data009[i].y),
		     Tp(data009[i].z), Tp(data009[i].p));
	const Tp f0 = data009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data010[] = {
  { 2.5251633071736093, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 1.5398644654482321, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 1.1383703069075368, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.91347651070764513, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.76760362606933297, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.66449360407569580, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.58734713574982367, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.52723975772596432, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.47896266566575291, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.43925837540695190, 0.50000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data010)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data010[i].x), Tp(data010[i].y),
		     Tp(data010[i].z), Tp(data010[i].p));
	const Tp f0 = data010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data011[] = {
  { 6.6643244072375483, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 3.9038708537057190, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 2.8166749167519574, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 2.2214414690791826, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.8419739637493597, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 1.5774501443544886, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 1.3818155148978262, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 1.2308942620129153, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 1.1107207345395917, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 1.0126399973167404, 0.50000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test011()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data011)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data011[i].x), Tp(data011[i].y),
		     Tp(data011[i].z), Tp(data011[i].p));
	const Tp f0 = data011[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data012[] = {
  { 2.8284271247461898, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.8209569670010211, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.3766908327457570, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.1183606845303711, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.94701179435835359, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.82406880306471997, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.73109293163336164, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.65806839500142289, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.59905039027703078, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.55027182572642119, 0.50000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test012()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data012)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data012[i].x), Tp(data012[i].y),
		     Tp(data012[i].z), Tp(data012[i].p));
	const Tp f0 = data012[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data013[] = {
  { 2.2606485591586170, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.4787028816827661, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.1280921867400735, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.92210463376602547, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.78445730739827779, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.68512754570930512, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.60966029697906376, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.55015773617347585, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.50190926592367568, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.46191741425561045, 0.50000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test013()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data013)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data013[i].x), Tp(data013[i].y),
		     Tp(data013[i].z), Tp(data013[i].p));
	const Tp f0 = data013[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data014[] = {
  { 1.9549108620038838, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.2899158519672600, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.98915776155858837, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.81147069017505580, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.69224494766745903, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.60592910363958818, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.54017444849099827, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.48821306476340537, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.44599764610881032, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.41094690289468638, 0.50000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test014()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data014)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data014[i].x), Tp(data014[i].y),
		     Tp(data014[i].z), Tp(data014[i].p));
	const Tp f0 = data014[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data015[] = {
  { 1.7531355046813082, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.1635081982720308, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.89536626255836449, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.73636967775666784, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.62939232488112529, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.55177429367339303, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.49253810493171563, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.44565535953864471, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.40751481490798852, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.37580983608029767, 0.50000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test015()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data015)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data015[i].x), Tp(data015[i].y),
		     Tp(data015[i].z), Tp(data015[i].p));
	const Tp f0 = data015[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data016[] = {
  { 1.6061049195809842, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.0704586692241420, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.82591883868898919, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.68053628937360044, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.58252335304008718, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.51129488838991533, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.45686179269977184, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.41373068672159574, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.37860679494221028, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.34938334718039704, 0.50000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test016()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data016)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data016[i].x), Tp(data016[i].y),
		     Tp(data016[i].z), Tp(data016[i].p));
	const Tp f0 = data016[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data017[] = {
  { 1.4923701377013003, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.99792637695299691, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.77153859594237217, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.63667820767968974, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.54561908971826223, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.47936133973515282, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.42867356130362194, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.38847366574624670, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.35571073090686667, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.32843230710046056, 0.50000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test017()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data017)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data017[i].x), Tp(data017[i].y),
		     Tp(data017[i].z), Tp(data017[i].p));
	const Tp f0 = data017[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data018[] = {
  { 1.4007769575243452, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.93915752464696489, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.72731614480004825, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.60092072346235836, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.51547215934308965, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.45323419268671378, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.40558098790040226, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.36775987208625094, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.33691559507695468, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.31121973703230116, 0.50000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test018()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data018)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data018[i].x), Tp(data018[i].y),
		     Tp(data018[i].z), Tp(data018[i].p));
	const Tp f0 = data018[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data019[] = {
  { 1.3248382358044246, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.89018872093237578, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.69035607662225207, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.57097108596555690, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.49018012937430855, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.43128556654674499, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.38616032574252912, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.35032352839115055, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.32108161258352425, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.29670878274813522, 0.50000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test019()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data019)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data019[i].x), Tp(data019[i].y),
		     Tp(data019[i].z), Tp(data019[i].p));
	const Tp f0 = data019[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data020[] = {
  { 1.2604751625374033, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.84850945081602158, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.65881669877867521, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.54536685068321544, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.46852703419365971, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.41247333238452277, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.36949897192586928, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.33535244167308814, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.30747679967138358, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.28423305952716632, 0.50000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test020()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data020)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data020[i].x), Tp(data020[i].y),
		     Tp(data020[i].z), Tp(data020[i].p));
	const Tp f0 = data020[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data021[] = {
  { 1.2049706911003792, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.81243686465421328, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.63145906612509362, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.52312181621417730, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.44969142119934957, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.39609249754952380, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.35497886804334561, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.32229604854757482, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.29560457867385176, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.27334019079898864, 0.50000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test021()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data021)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data021[i].x), Tp(data021[i].y),
		     Tp(data021[i].z), Tp(data021[i].p));
	const Tp f0 = data021[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data022[] = {
  { 5.0832785087638745, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 3.0205847775221781, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 2.1973661077954416, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.7428419316550681, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.4512875541496524, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 1.2470657530421689, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 1.0954340601914754, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.97807184990022789, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.88435517821018417, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.80767820858787065, 0.50000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test022()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data022)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data022[i].x), Tp(data022[i].y),
		     Tp(data022[i].z), Tp(data022[i].p));
	const Tp f0 = data022[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data023[] = {
  { 2.2606485591586170, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.4787028816827661, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.1280921867400735, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.92210463376602547, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.78445730739827779, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.68512754570930512, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.60966029697906376, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.55015773617347585, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.50190926592367568, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.46191741425561045, 0.50000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test023()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data023)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data023[i].x), Tp(data023[i].y),
		     Tp(data023[i].z), Tp(data023[i].p));
	const Tp f0 = data023[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data024[] = {
  { 1.8209569670010213, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.2108418600591322, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.93242469849049370, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.76706254329504642, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.65569673681079788, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.57484676208064478, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.51312012455983003, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.46425363300148986, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.42449230788788939, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.39143618306709632, 0.50000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test024()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data024)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data024[i].x), Tp(data024[i].y),
		     Tp(data024[i].z), Tp(data024[i].p));
	const Tp f0 = data024[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data025[] = {
  { 1.5814081614865472, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 0.50000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test025()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data025)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data025[i].x), Tp(data025[i].y),
		     Tp(data025[i].z), Tp(data025[i].p));
	const Tp f0 = data025[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data026[] = {
  { 1.4222020153797952, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.96012401711294926, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.74606434416007095, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.53057644836823648, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.46698009947142677, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.41819552269804866, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.37941950603660374, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.32135735706415808, 0.50000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test026()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data026)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data026[i].x), Tp(data026[i].y),
		     Tp(data026[i].z), Tp(data026[i].p));
	const Tp f0 = data026[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data027[] = {
  { 1.3056198205930980, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.88534802192886530, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.68984446400997923, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.49231373047778376, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.38892581349755662, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.35318003278354576, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.32396243335749902, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 0.50000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test027()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data027)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data027[i].x), Tp(data027[i].y),
		     Tp(data027[i].z), Tp(data027[i].p));
	const Tp f0 = data027[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data028[] = {
  { 1.2151025736697127, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.40757165683116159, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.36568221542956669, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.33231367632708936, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 0.50000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test028()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data028)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data028[i].x), Tp(data028[i].y),
		     Tp(data028[i].z), Tp(data028[i].p));
	const Tp f0 = data028[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data029[] = {
  { 1.1419917039005423, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.43721435515669904, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.28939808488878999, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 0.50000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test029()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data029)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data029[i].x), Tp(data029[i].y),
		     Tp(data029[i].z), Tp(data029[i].p));
	const Tp f0 = data029[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data030[] = {
  { 1.0812295669164198, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.48243192207925389, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.41632034563196063, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 0.50000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test030()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data030)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data030[i].x), Tp(data030[i].y),
		     Tp(data030[i].z), Tp(data030[i].p));
	const Tp f0 = data030[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data031[] = {
  { 1.0296247564337100, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.24532360659601604, 0.50000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test031()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data031)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data031[i].x), Tp(data031[i].y),
		     Tp(data031[i].z), Tp(data031[i].p));
	const Tp f0 = data031[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data032[] = {
  { 0.98504492018034995, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.30442632980811574, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.27719259367796739, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 0.50000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test032()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data032)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data032[i].x), Tp(data032[i].y),
		     Tp(data032[i].z), Tp(data032[i].p));
	const Tp f0 = data032[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data033[] = {
  { 4.2978716322005361, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.5734477287298509, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.8806524630730097, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.4964482887725452, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.2491827947076342, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 1.0755248644599535, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.94630341021465791, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.84609986064974685, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.76595520702690467, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.70028904855358465, 0.50000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test033()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data033)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data033[i].x), Tp(data033[i].y),
		     Tp(data033[i].z), Tp(data033[i].p));
	const Tp f0 = data033[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data034[] = {
  { 1.9549108620038840, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.2899158519672600, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.98915776155858837, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.81147069017505580, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.69224494766745903, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.60592910363958818, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.54017444849099827, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.48821306476340542, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.44599764610881032, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.41094690289468638, 0.50000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test034()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data034)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data034[i].x), Tp(data034[i].y),
		     Tp(data034[i].z), Tp(data034[i].p));
	const Tp f0 = data034[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data035[] = {
  { 1.5814081614865472, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 0.50000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test035()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data035)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data035[i].x), Tp(data035[i].y),
		     Tp(data035[i].z), Tp(data035[i].p));
	const Tp f0 = data035[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data036[] = {
  { 1.3766908327457574, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.93242469849049403, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.72586814600021643, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.60170038809959936, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.51733275597095008, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.45565411661069510, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.40829398107716403, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.37061941990368924, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.33983690945412198, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.31415210943518240, 0.50000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test036()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data036)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data036[i].x), Tp(data036[i].y),
		     Tp(data036[i].z), Tp(data036[i].p));
	const Tp f0 = data036[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data037[] = {
  { 1.2401228181757644, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.41724626194602865, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.34025576623858034, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 0.50000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test037()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data037)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data037[i].x), Tp(data037[i].y),
		     Tp(data037[i].z), Tp(data037[i].p));
	const Tp f0 = data037[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data038[] = {
  { 1.1398486474364056, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.50932051572295522, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.31723583109620401, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 0.50000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test038()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data038)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data038[i].x), Tp(data038[i].y),
		     Tp(data038[i].z), Tp(data038[i].p));
	const Tp f0 = data038[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data039[] = {
  { 1.0618319977895125, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.72958644011384366, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.47797677946192796, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.36518380519509192, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.32831816101817296, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.29887508595628870, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.27473478449730915, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.25453047328755496, 0.50000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test039()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data039)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data039[i].x), Tp(data039[i].y),
		     Tp(data039[i].z), Tp(data039[i].p));
	const Tp f0 = data039[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data040[] = {
  { 0.99871277699951810, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.54145321304962368, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.45227149650398507, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.39116916738484903, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.34619871482405529, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 0.50000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test040()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data040)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data040[i].x), Tp(data040[i].y),
		     Tp(data040[i].z), Tp(data040[i].p));
	const Tp f0 = data040[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data041[] = {
  { 0.94618205076987905, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.43063641346229342, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.37278471192273888, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.24926404039506464, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 0.50000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test041()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data041)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data041[i].x), Tp(data041[i].y),
		     Tp(data041[i].z), Tp(data041[i].p));
	const Tp f0 = data041[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data042[] = {
  { 0.90151569394875264, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 0.50000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test042()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data042)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data042[i].x), Tp(data042[i].y),
		     Tp(data042[i].z), Tp(data042[i].p));
	const Tp f0 = data042[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data043[] = {
  { 0.86289061321428662, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.59826640042081203, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.34317743248401800, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.30430255416260910, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.25013826445237003, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.23034553941811325, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.21374598482754290, 0.50000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test043()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data043)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data043[i].x), Tp(data043[i].y),
		     Tp(data043[i].z), Tp(data043[i].p));
	const Tp f0 = data043[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data044[] = {
  { 3.8009937597602086, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.2873302571228442, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.6766867517649831, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.3370818171827918, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.1180456329443651, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.96394371439393434, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.84910565200448118, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.75994320932668891, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.68855078657464353, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.62999854566270364, 0.50000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test044()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data044)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data044[i].x), Tp(data044[i].y),
		     Tp(data044[i].z), Tp(data044[i].p));
	const Tp f0 = data044[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data045[] = {
  { 1.7531355046813082, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.1635081982720308, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.89536626255836449, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.73636967775666784, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.62939232488112529, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.55177429367339303, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.49253810493171563, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.44565535953864471, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.40751481490798852, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.37580983608029767, 0.50000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test045()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data045)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data045[i].x), Tp(data045[i].y),
		     Tp(data045[i].z), Tp(data045[i].p));
	const Tp f0 = data045[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data046[] = {
  { 1.4222020153797952, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.96012401711294926, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.74606434416007095, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.53057644836823648, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.46698009947142677, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.41819552269804866, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.37941950603660374, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.32135735706415808, 0.50000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test046()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data046)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data046[i].x), Tp(data046[i].y),
		     Tp(data046[i].z), Tp(data046[i].p));
	const Tp f0 = data046[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data047[] = {
  { 1.2401228181757644, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.41724626194602865, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.34025576623858028, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 0.50000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test047()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data047)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data047[i].x), Tp(data047[i].y),
		     Tp(data047[i].z), Tp(data047[i].p));
	const Tp f0 = data047[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data048[] = {
  { 1.1183606845303713, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.76706254329504642, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.60170038809959925, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.50147982951463554, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.43296512384230068, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.38263098086624298, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.34382517873635210, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.31284917785471156, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.28746421372502651, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.26622739632444620, 0.50000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test048()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data048)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data048[i].x), Tp(data048[i].y),
		     Tp(data048[i].z), Tp(data048[i].p));
	const Tp f0 = data048[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data049[] = {
  { 1.0287989423954247, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.70894375613893612, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.55771167880702011, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.35642667060665739, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.32062906080557096, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.29201689183182339, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.24888391852810277, 0.50000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test049()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data049)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data049[i].x), Tp(data049[i].y),
		     Tp(data049[i].z), Tp(data049[i].p));
	const Tp f0 = data049[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data050[] = {
  { 0.95902057408895180, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.66326984938537448, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.43747841423603606, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.25339986965394762, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.23498900543731904, 0.50000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test050()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data050)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data050[i].x), Tp(data050[i].y),
		     Tp(data050[i].z), Tp(data050[i].p));
	const Tp f0 = data050[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data051[] = {
  { 0.90250310497734676, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.49450910722023028, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.35905468421976594, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 0.50000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test051()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data051)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data051[i].x), Tp(data051[i].y),
		     Tp(data051[i].z), Tp(data051[i].p));
	const Tp f0 = data051[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data052[] = {
  { 0.85542246869229122, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.21370251886958525, 0.50000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test052()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data052)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data052[i].x), Tp(data052[i].y),
		     Tp(data052[i].z), Tp(data052[i].p));
	const Tp f0 = data052[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data053[] = {
  { 0.81535812729905288, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.29123776130118406, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.20524892428816363, 0.50000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test053()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data053)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data053[i].x), Tp(data053[i].y),
		     Tp(data053[i].z), Tp(data053[i].p));
	const Tp f0 = data053[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data054[] = {
  { 0.78068845414522159, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.54494833083219307, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.43220566332383364, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.36312278662905823, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.31549408045108396, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.28026194988618319, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.21298191526646920, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.19782954572559397, 0.50000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test054()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data054)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data054[i].x), Tp(data054[i].y),
		     Tp(data054[i].z), Tp(data054[i].p));
	const Tp f0 = data054[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data055[] = {
  { 3.4486955468275755, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.0828351548210402, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.5302303306837042, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.2222853262837821, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.0233592856949612, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.88322736655512224, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.77868739473107906, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.69744501354206045, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.63234093582850048, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.57890711567971709, 0.50000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test055()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data055)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data055[i].x), Tp(data055[i].y),
		     Tp(data055[i].z), Tp(data055[i].p));
	const Tp f0 = data055[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data056[] = {
  { 1.6061049195809842, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.0704586692241420, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.82591883868898919, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.68053628937360044, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.58252335304008718, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.51129488838991533, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.45686179269977184, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.41373068672159574, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.37860679494221028, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.34938334718039704, 0.50000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test056()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data056)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data056[i].x), Tp(data056[i].y),
		     Tp(data056[i].z), Tp(data056[i].p));
	const Tp f0 = data056[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data057[] = {
  { 1.3056198205930980, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.88534802192886530, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.68984446400997923, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.49231373047778376, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.38892581349755662, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.35318003278354576, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.32396243335749902, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 0.50000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test057()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data057)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data057[i].x), Tp(data057[i].y),
		     Tp(data057[i].z), Tp(data057[i].p));
	const Tp f0 = data057[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data058[] = {
  { 1.1398486474364056, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.50932051572295522, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.31723583109620401, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 0.50000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test058()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data058)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data058[i].x), Tp(data058[i].y),
		     Tp(data058[i].z), Tp(data058[i].p));
	const Tp f0 = data058[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data059[] = {
  { 1.0287989423954245, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.70894375613893612, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.55771167880702011, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.35642667060665745, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.32062906080557096, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.29201689183182339, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.24888391852810277, 0.50000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test059()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data059)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data059[i].x), Tp(data059[i].y),
		     Tp(data059[i].z), Tp(data059[i].p));
	const Tp f0 = data059[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data060[] = {
  { 0.94701179435835359, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.65569673681079788, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.51733275597094996, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.43296512384230063, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.37502224024468017, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.33229683789018527, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.29925520618337781, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.27281052919218196, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.25108898619570796, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.23287985082087534, 0.50000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test060()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data060)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data060[i].x), Tp(data060[i].y),
		     Tp(data060[i].z), Tp(data060[i].p));
	const Tp f0 = data060[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data061[] = {
  { 0.88322637190106779, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.40691664717747028, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.31304670459383982, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.25743679052360119, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.22003776396270477, 0.50000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test061()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data061)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data061[i].x), Tp(data061[i].y),
		     Tp(data061[i].z), Tp(data061[i].p));
	const Tp f0 = data061[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data062[] = {
  { 0.83152026568913140, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.45921578556213027, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.33470600764004355, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 0.50000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test062()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data062)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data062[i].x), Tp(data062[i].y),
		     Tp(data062[i].z), Tp(data062[i].p));
	const Tp f0 = data062[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data063[] = {
  { 0.78841770016803325, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.55092905081432408, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.43718780399449209, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.36743325468131166, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.31931301755908925, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.28370170658624394, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.25607743108839104, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.23391006877275144, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.21565961679522067, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.20032866163672836, 0.50000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test063()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data063)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data063[i].x), Tp(data063[i].y),
		     Tp(data063[i].z), Tp(data063[i].p));
	const Tp f0 = data063[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data064[] = {
  { 0.75171669684617670, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.24573998678755610, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 0.50000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test064()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data064)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data064[i].x), Tp(data064[i].y),
		     Tp(data064[i].z), Tp(data064[i].p));
	const Tp f0 = data064[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data065[] = {
  { 0.71994094443495504, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.50506385303798651, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.33832764042495694, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.29445551387110397, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.23667971146773958, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.21638788243953927, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 0.50000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test065()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data065)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data065[i].x), Tp(data065[i].y),
		     Tp(data065[i].z), Tp(data065[i].p));
	const Tp f0 = data065[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data066[] = {
  { 3.1814617579585991, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.9267719159486534, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.4180586144770113, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.1341426707228186, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.95052080503716641, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.82104298622829042, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.72437054641292697, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.64918789322931370, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.58890123107273074, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.53939292908171732, 0.50000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test066()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data066)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data066[i].x), Tp(data066[i].y),
		     Tp(data066[i].z), Tp(data066[i].p));
	const Tp f0 = data066[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data067[] = {
  { 1.4923701377013003, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.99792637695299702, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.77153859594237217, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.63667820767968974, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.54561908971826223, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.47936133973515282, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.42867356130362194, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.38847366574624670, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.35571073090686678, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.32843230710046056, 0.50000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test067()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data067)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data067[i].x), Tp(data067[i].y),
		     Tp(data067[i].z), Tp(data067[i].p));
	const Tp f0 = data067[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data068[] = {
  { 1.2151025736697127, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.40757165683116159, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.36568221542956669, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.33231367632708936, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 0.50000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test068()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data068)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data068[i].x), Tp(data068[i].y),
		     Tp(data068[i].z), Tp(data068[i].p));
	const Tp f0 = data068[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data069[] = {
  { 1.0618319977895125, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.72958644011384366, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.47797677946192790, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.36518380519509192, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.32831816101817296, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.29887508595628870, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.27473478449730909, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.25453047328755496, 0.50000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test069()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data069)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data069[i].x), Tp(data069[i].y),
		     Tp(data069[i].z), Tp(data069[i].p));
	const Tp f0 = data069[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data070[] = {
  { 0.95902057408895180, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.66326984938537448, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.43747841423603606, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.25339986965394762, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.23498900543731904, 0.50000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test070()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data070)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data070[i].x), Tp(data070[i].y),
		     Tp(data070[i].z), Tp(data070[i].p));
	const Tp f0 = data070[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data071[] = {
  { 0.88322637190106779, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.40691664717747028, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.31304670459383982, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.25743679052360119, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.22003776396270477, 0.50000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test071()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data071)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data071[i].x), Tp(data071[i].y),
		     Tp(data071[i].z), Tp(data071[i].p));
	const Tp f0 = data071[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data072[] = {
  { 0.82406880306471975, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.57484676208064467, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.45565411661069516, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.38263098086624314, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.33229683789018521, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.29507237965418759, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.26621357447657029, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.24306737484318022, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.22401970229754878, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.20802560405354784, 0.50000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test072()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data072)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data072[i].x), Tp(data072[i].y),
		     Tp(data072[i].z), Tp(data072[i].p));
	const Tp f0 = data072[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data073[] = {
  { 0.77608343195161344, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.23115912572057210, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.21316758019503021, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.19804990582983045, 0.50000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test073()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data073)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data073[i].x), Tp(data073[i].y),
		     Tp(data073[i].z), Tp(data073[i].p));
	const Tp f0 = data073[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data074[] = {
  { 0.73606083017861434, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.41070634284965735, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.30089848244725997, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.26763661712549192, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.22104742408748265, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.20394381261466935, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18956390308246604, 0.50000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test074()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data074)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data074[i].x), Tp(data074[i].y),
		     Tp(data074[i].z), Tp(data074[i].p));
	const Tp f0 = data074[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data075[] = {
  { 0.70196643578457152, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.25677566527305340, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.21230066656860408, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 0.50000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test075()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data075)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data075[i].x), Tp(data075[i].y),
		     Tp(data075[i].z), Tp(data075[i].p));
	const Tp f0 = data075[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data076[] = {
  { 0.67243540762391030, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.47358314076150670, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.37767691694270900, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.31857200599266750, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.27764347267224720, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.24726015371628141, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.22362928147368366, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.20462324582094821, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.17574955367014042, 0.50000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test076()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data076)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data076[i].x), Tp(data076[i].y),
		     Tp(data076[i].z), Tp(data076[i].p));
	const Tp f0 = data076[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data077[] = {
  { 2.9694371495862444, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.8023516014996519, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.3283711490916292, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0635241918017548, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.89207345813689432, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.77108317736781407, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.68068727087691305, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.61034475802113153, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.55390996774625134, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.50754327524378695, 0.50000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test077()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data077)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data077[i].x), Tp(data077[i].y),
		     Tp(data077[i].z), Tp(data077[i].p));
	const Tp f0 = data077[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data078[] = {
  { 1.4007769575243452, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.93915752464696489, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.72731614480004825, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.60092072346235836, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.51547215934308965, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.45323419268671372, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.40558098790040226, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.36775987208625094, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.33691559507695468, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.31121973703230116, 0.50000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test078()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data078)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data078[i].x), Tp(data078[i].y),
		     Tp(data078[i].z), Tp(data078[i].p));
	const Tp f0 = data078[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data079[] = {
  { 1.1419917039005423, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.43721435515669904, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.28939808488878999, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 0.50000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test079()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data079)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data079[i].x), Tp(data079[i].y),
		     Tp(data079[i].z), Tp(data079[i].p));
	const Tp f0 = data079[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data080[] = {
  { 0.99871277699951810, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.54145321304962368, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.45227149650398507, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.39116916738484903, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.34619871482405529, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 0.50000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test080()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data080)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data080[i].x), Tp(data080[i].y),
		     Tp(data080[i].z), Tp(data080[i].p));
	const Tp f0 = data080[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data081[] = {
  { 0.90250310497734676, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.49450910722023028, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.35905468421976594, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 0.50000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test081()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data081)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data081[i].x), Tp(data081[i].y),
		     Tp(data081[i].z), Tp(data081[i].p));
	const Tp f0 = data081[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data082[] = {
  { 0.83152026568913140, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.45921578556213027, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.33470600764004355, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 0.50000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test082()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data082)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data082[i].x), Tp(data082[i].y),
		     Tp(data082[i].z), Tp(data082[i].p));
	const Tp f0 = data082[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data083[] = {
  { 0.77608343195161344, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.23115912572057210, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.21316758019503021, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.19804990582983045, 0.50000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test083()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data083)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data083[i].x), Tp(data083[i].y),
		     Tp(data083[i].z), Tp(data083[i].p));
	const Tp f0 = data083[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data084[] = {
  { 0.73109293163336186, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.51312012455982980, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.40829398107716380, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.34382517873635215, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.29925520618337781, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.26621357447657040, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.24054506091464567, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21992117520979027, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.20292276620803798, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18862961391254046, 0.50000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test084()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data084)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data084[i].x), Tp(data084[i].y),
		     Tp(data084[i].z), Tp(data084[i].p));
	const Tp f0 = data084[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data085[] = {
  { 0.69355180313411036, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.21037210353882049, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 0.50000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test085()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data085)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data085[i].x), Tp(data085[i].y),
		     Tp(data085[i].z), Tp(data085[i].p));
	const Tp f0 = data085[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data086[] = {
  { 0.66155920777571686, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.46652318314465940, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.37233745780747152, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.31424297259281730, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.24408916990767501, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.20210711136517917, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.18666070285211239, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.17365832663910130, 0.50000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test086()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data086)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data086[i].x), Tp(data086[i].y),
		     Tp(data086[i].z), Tp(data086[i].p));
	const Tp f0 = data086[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data087[] = {
  { 0.63383944056141561, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 0.50000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test087()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data087)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data087[i].x), Tp(data087[i].y),
		     Tp(data087[i].z), Tp(data087[i].p));
	const Tp f0 = data087[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data088[] = {
  { 2.7957181830885749, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.7000050391699437, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.2544173977804063, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0051946107285361, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.84373385183465388, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.72971996124302185, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.64448919435342700, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.57813379227068229, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.52487480026761746, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.48110030907459589, 0.50000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test088()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data088)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data088[i].x), Tp(data088[i].y),
		     Tp(data088[i].z), Tp(data088[i].p));
	const Tp f0 = data088[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data089[] = {
  { 1.3248382358044246, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.89018872093237578, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.69035607662225207, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.57097108596555690, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.49018012937430855, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.43128556654674499, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.38616032574252912, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.35032352839115055, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.32108161258352425, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.29670878274813522, 0.50000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test089()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data089)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data089[i].x), Tp(data089[i].y),
		     Tp(data089[i].z), Tp(data089[i].p));
	const Tp f0 = data089[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data090[] = {
  { 1.0812295669164198, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.48243192207925389, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.41632034563196063, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 0.50000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test090()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data090)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data090[i].x), Tp(data090[i].y),
		     Tp(data090[i].z), Tp(data090[i].p));
	const Tp f0 = data090[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data091[] = {
  { 0.94618205076987905, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.43063641346229342, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.37278471192273888, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.24926404039506464, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 0.50000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test091()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data091)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data091[i].x), Tp(data091[i].y),
		     Tp(data091[i].z), Tp(data091[i].p));
	const Tp f0 = data091[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data092[] = {
  { 0.85542246869229122, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21370251886958525, 0.50000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test092()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data092)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data092[i].x), Tp(data092[i].y),
		     Tp(data092[i].z), Tp(data092[i].p));
	const Tp f0 = data092[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data093[] = {
  { 0.78841770016803325, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.55092905081432408, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.43718780399449203, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.36743325468131166, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.31931301755908925, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.28370170658624394, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.25607743108839104, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23391006877275144, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21565961679522067, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20032866163672836, 0.50000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test093()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data093)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data093[i].x), Tp(data093[i].y),
		     Tp(data093[i].z), Tp(data093[i].p));
	const Tp f0 = data093[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data094[] = {
  { 0.73606083017861434, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.41070634284965735, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.30089848244725997, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.26763661712549192, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.22104742408748265, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20394381261466935, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18956390308246604, 0.50000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test094()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data094)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data094[i].x), Tp(data094[i].y),
		     Tp(data094[i].z), Tp(data094[i].p));
	const Tp f0 = data094[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data095[] = {
  { 0.69355180313411036, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21037210353882049, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 0.50000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test095()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data095)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data095[i].x), Tp(data095[i].y),
		     Tp(data095[i].z), Tp(data095[i].p));
	const Tp f0 = data095[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data096[] = {
  { 0.65806839500142289, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.46425363300148992, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.37061941990368913, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.31284917785471167, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.27281052919218196, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.24306737484318022, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21992117520979024, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.20129588838919915, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18592435720628581, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17298383326391548, 0.50000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test096()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data096)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data096[i].x), Tp(data096[i].y),
		     Tp(data096[i].z), Tp(data096[i].p));
	const Tp f0 = data096[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data097[] = {
  { 0.62781986015308988, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 0.50000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test097()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data097)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data097[i].x), Tp(data097[i].y),
		     Tp(data097[i].z), Tp(data097[i].p));
	const Tp f0 = data097[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data098[] = {
  { 0.60160394534475825, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18653078812307397, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 0.50000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test098()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data098)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data098[i].x), Tp(data098[i].y),
		     Tp(data098[i].z), Tp(data098[i].p));
	const Tp f0 = data098[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data099[] = {
  { 2.6498983543265657, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.6138084171153579, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1920055072756153, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.95589630327837638, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.80283267460018048, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.69468986307888980, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.61381026139851969, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.55081653632788519, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.50023718770301384, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.45865137206980555, 0.50000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test099()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data099)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data099[i].x), Tp(data099[i].y),
		     Tp(data099[i].z), Tp(data099[i].p));
	const Tp f0 = data099[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data100[] = {
  { 1.2604751625374033, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.84850945081602158, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.65881669877867521, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.54536685068321544, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.46852703419365971, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.41247333238452277, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.36949897192586928, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.33535244167308814, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.30747679967138358, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28423305952716632, 0.50000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test100()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data100)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data100[i].x), Tp(data100[i].y),
		     Tp(data100[i].z), Tp(data100[i].p));
	const Tp f0 = data100[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data101[] = {
  { 1.0296247564337100, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.24532360659601604, 0.50000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test101()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data101)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data101[i].x), Tp(data101[i].y),
		     Tp(data101[i].z), Tp(data101[i].p));
	const Tp f0 = data101[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data102[] = {
  { 0.90151569394875264, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 0.50000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test102()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data102)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data102[i].x), Tp(data102[i].y),
		     Tp(data102[i].z), Tp(data102[i].p));
	const Tp f0 = data102[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data103[] = {
  { 0.81535812729905288, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29123776130118412, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.20524892428816369, 0.50000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test103()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data103)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data103[i].x), Tp(data103[i].y),
		     Tp(data103[i].z), Tp(data103[i].p));
	const Tp f0 = data103[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data104[] = {
  { 0.75171669684617670, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.24573998678755610, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 0.50000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test104()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data104)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data104[i].x), Tp(data104[i].y),
		     Tp(data104[i].z), Tp(data104[i].p));
	const Tp f0 = data104[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data105[] = {
  { 0.70196643578457152, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.25677566527305340, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21230066656860408, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 0.50000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test105()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data105)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data105[i].x), Tp(data105[i].y),
		     Tp(data105[i].z), Tp(data105[i].p));
	const Tp f0 = data105[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data106[] = {
  { 0.66155920777571686, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.46652318314465940, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.37233745780747152, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.31424297259281730, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.24408916990767501, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20210711136517917, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18666070285211239, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17365832663910130, 0.50000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test106()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data106)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data106[i].x), Tp(data106[i].y),
		     Tp(data106[i].z), Tp(data106[i].p));
	const Tp f0 = data106[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data107[] = {
  { 0.62781986015308988, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 0.50000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test107()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data107)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data107[i].x), Tp(data107[i].y),
		     Tp(data107[i].z), Tp(data107[i].p));
	const Tp f0 = data107[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data108[] = {
  { 0.59905039027703089, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.42449230788788933, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.33983690945412193, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.28746421372502645, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25108898619570785, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22401970229754875, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20292276620803801, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.18592435720628583, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17187932565251629, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16004330932154517, 0.50000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test108()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data108)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data108[i].x), Tp(data108[i].y),
		     Tp(data108[i].z), Tp(data108[i].p));
	const Tp f0 = data108[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data109[] = {
  { 0.57411046795964726, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 0.50000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test109()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data109)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data109[i].x), Tp(data109[i].y),
		     Tp(data109[i].z), Tp(data109[i].p));
	const Tp f0 = data109[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data110[] = {
  { 2.5251633071736093, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5398644654482319, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1383703069075368, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.91347651070764513, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.76760362606933297, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.66449360407569580, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.58734713574982367, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.52723975772596432, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.47896266566575291, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.43925837540695190, 0.50000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test110()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data110)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data110[i].x), Tp(data110[i].y),
		     Tp(data110[i].z), Tp(data110[i].p));
	const Tp f0 = data110[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data111[] = {
  { 1.2049706911003792, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.81243686465421328, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.63145906612509362, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.52312181621417730, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.44969142119934957, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.39609249754952380, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.35497886804334561, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.32229604854757482, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.29560457867385176, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.27334019079898864, 0.50000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test111()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data111)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data111[i].x), Tp(data111[i].y),
		     Tp(data111[i].z), Tp(data111[i].p));
	const Tp f0 = data111[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data112[] = {
  { 0.98504492018034995, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.30442632980811574, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27719259367796739, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 0.50000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test112()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data112)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data112[i].x), Tp(data112[i].y),
		     Tp(data112[i].z), Tp(data112[i].p));
	const Tp f0 = data112[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data113[] = {
  { 0.86289061321428662, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.59826640042081203, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.34317743248401800, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.30430255416260910, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25013826445237003, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23034553941811325, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21374598482754290, 0.50000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test113()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data113)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data113[i].x), Tp(data113[i].y),
		     Tp(data113[i].z), Tp(data113[i].p));
	const Tp f0 = data113[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data114[] = {
  { 0.78068845414522159, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.54494833083219307, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.43220566332383364, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.36312278662905823, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31549408045108396, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.28026194988618319, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21298191526646920, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19782954572559397, 0.50000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test114()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data114)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data114[i].x), Tp(data114[i].y),
		     Tp(data114[i].z), Tp(data114[i].p));
	const Tp f0 = data114[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data115[] = {
  { 0.71994094443495504, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.50506385303798651, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33832764042495694, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.29445551387110397, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23667971146773958, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21638788243953927, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 0.50000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test115()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data115)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data115[i].x), Tp(data115[i].y),
		     Tp(data115[i].z), Tp(data115[i].p));
	const Tp f0 = data115[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data116[] = {
  { 0.67243540762391030, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.47358314076150670, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.37767691694270900, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31857200599266750, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27764347267224720, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24726015371628141, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22362928147368366, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20462324582094821, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17574955367014042, 0.50000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test116()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data116)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data116[i].x), Tp(data116[i].y),
		     Tp(data116[i].z), Tp(data116[i].p));
	const Tp f0 = data116[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data117[] = {
  { 0.63383944056141572, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 0.50000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test117()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data117)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data117[i].x), Tp(data117[i].y),
		     Tp(data117[i].z), Tp(data117[i].p));
	const Tp f0 = data117[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data118[] = {
  { 0.60160394534475825, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18653078812307394, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 0.50000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test118()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data118)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data118[i].x), Tp(data118[i].y),
		     Tp(data118[i].z), Tp(data118[i].p));
	const Tp f0 = data118[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data119[] = {
  { 0.57411046795964726, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 0.50000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test119()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data119)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data119[i].x), Tp(data119[i].y),
		     Tp(data119[i].z), Tp(data119[i].p));
	const Tp f0 = data119[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=0.50000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data120[] = {
  { 0.55027182572642119, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.39143618306709621, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.31415210943518235, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26622739632444620, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23287985082087539, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20802560405354784, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18862961391254038, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17298383326391550, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16004330932154509, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14912815584871789, 0.50000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=0.50000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test120()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data120)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data120[i].x), Tp(data120[i].y),
		     Tp(data120[i].z), Tp(data120[i].p));
	const Tp f0 = data120[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data121[] = {
  { 5.0832785087638745, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 3.0205847775221781, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 2.1973661077954416, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.7428419316550681, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 1.4512875541496524, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 1.2470657530421689, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 1.0954340601914754, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.97807184990022789, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.88435517821018417, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.80767820858787065, 1.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test121()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data121)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data121[i].x), Tp(data121[i].y),
		     Tp(data121[i].z), Tp(data121[i].p));
	const Tp f0 = data121[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data122[] = {
  { 3.9038708537057198, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 2.3561944901923448, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.7294789797981953, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 1.3802267767659155, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 1.1546750004305730, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.99584496701668146, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.87740444713624721, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.78539816339744828, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.71169928894443057, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.65123614026811794, 1.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test122()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data122)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data122[i].x), Tp(data122[i].y),
		     Tp(data122[i].z), Tp(data122[i].p));
	const Tp f0 = data122[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data123[] = {
  { 3.3126983627324424, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 2.0162044036131705, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 1.4873381477764660, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 1.1911718262594000, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.99920048804954020, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.86362081463721552, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.76227258514187901, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.68338116349131384, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.62007433962005221, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.56805501197237818, 1.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test123()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data123)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data123[i].x), Tp(data123[i].y),
		     Tp(data123[i].z), Tp(data123[i].p));
	const Tp f0 = data123[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data124[] = {
  { 2.9366712692381185, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.7972103521033889, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 1.3302574312993272, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 1.0679379896673959, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.89749573490256840, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.77688623778582322, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.68658127394975954, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.61618767420478027, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.55963085024841341, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.51310763549542915, 1.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test124()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data124)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data124[i].x), Tp(data124[i].y),
		     Tp(data124[i].z), Tp(data124[i].p));
	const Tp f0 = data124[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data125[] = {
  { 2.6690452968644154, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.6399601516866462, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 1.2168825302615167, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.97867722604046825, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.82363382945246122, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.71376503106635869, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.63140333592040898, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.56713505671041065, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.51545252951255904, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.47290441537711830, 1.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test125()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data125)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data125[i].x), Tp(data125[i].y),
		     Tp(data125[i].z), Tp(data125[i].p));
	const Tp f0 = data125[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data126[] = {
  { 2.4654549549143647, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 1.5195270878991471, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 1.1297052749508756, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.90985117000699822, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.76656181862424699, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.66491105484705415, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.58863895242975239, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.52907436634303584, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.48114021573281435, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.44165281253966543, 1.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test126()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data126)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data126[i].x), Tp(data126[i].y),
		     Tp(data126[i].z), Tp(data126[i].p));
	const Tp f0 = data126[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data127[] = {
  { 2.3035564346855377, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 1.4232415329072743, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 1.0597824778188665, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.85452205359914146, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.72060249495087836, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.62551537384070788, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.55411470797192719, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.49831799048363234, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.45338997795945835, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.41635974305701651, 1.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test127()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data127)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data127[i].x), Tp(data127[i].y),
		     Tp(data127[i].z), Tp(data127[i].p));
	const Tp f0 = data127[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data128[] = {
  { 2.1706589694463734, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 1.3438542313870974, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 1.0019762220786403, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.80869336781236623, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.68247913939368543, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.59279828604933260, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.52541540183471169, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.47272980996559200, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.43028641113267235, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.39528882436548302, 1.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test128()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data128)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data128[i].x), Tp(data128[i].y),
		     Tp(data128[i].z), Tp(data128[i].p));
	const Tp f0 = data128[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data129[] = {
  { 2.0589291172490309, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 1.2768630731912678, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.95308464885741362, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.76986883081994795, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.65014162880697235, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.56501838754091338, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.50102641833300765, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.45096909104005573, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.41062645838168715, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.37734878208318057, 1.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test129()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data129)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data129[i].x), Tp(data129[i].y),
		     Tp(data129[i].z), Tp(data129[i].p));
	const Tp f0 = data129[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data130[] = {
  { 1.9632259881925387, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 1.2192980037048136, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.91098920475560263, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.73639343103384503, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.62222874715997789, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.54101812180189024, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.47994002983795436, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.43214312138003691, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.39360856814154299, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.36181214525256422, 1.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test130()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data130)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data130[i].x), Tp(data130[i].y),
		     Tp(data130[i].z), Tp(data130[i].p));
	const Tp f0 = data130[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data131[] = {
  { 5.0832785087638745, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 3.0205847775221781, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 2.1973661077954416, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.7428419316550681, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.4512875541496524, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 1.2470657530421689, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 1.0954340601914754, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.97807184990022789, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.88435517821018417, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.80767820858787065, 1.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test131()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data131)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data131[i].x), Tp(data131[i].y),
		     Tp(data131[i].z), Tp(data131[i].p));
	const Tp f0 = data131[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data132[] = {
  { 2.2606485591586161, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.4787028816827661, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.1280921867400733, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.92210463376602547, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.78445730739827757, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.68512754570930512, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.60966029697906365, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.55015773617347574, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.50190926592367568, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.46191741425561045, 1.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test132()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data132)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data132[i].x), Tp(data132[i].y),
		     Tp(data132[i].z), Tp(data132[i].p));
	const Tp f0 = data132[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data133[] = {
  { 1.8209569670010213, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.2108418600591322, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.93242469849049370, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.76706254329504642, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.65569673681079788, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.57484676208064478, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.51312012455983003, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.46425363300148986, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.42449230788788939, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.39143618306709632, 1.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test133()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data133)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data133[i].x), Tp(data133[i].y),
		     Tp(data133[i].z), Tp(data133[i].p));
	const Tp f0 = data133[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data134[] = {
  { 1.5814081614865474, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 1.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test134()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data134)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data134[i].x), Tp(data134[i].y),
		     Tp(data134[i].z), Tp(data134[i].p));
	const Tp f0 = data134[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data135[] = {
  { 1.4222020153797952, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.96012401711294937, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.74606434416007106, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.53057644836823659, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.46698009947142688, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.41819552269804872, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.37941950603660379, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.32135735706415813, 1.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test135()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data135)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data135[i].x), Tp(data135[i].y),
		     Tp(data135[i].z), Tp(data135[i].p));
	const Tp f0 = data135[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data136[] = {
  { 1.3056198205930982, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.88534802192886553, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.68984446400997934, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.49231373047778387, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.38892581349755673, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.35318003278354582, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.32396243335749914, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 1.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test136()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data136)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data136[i].x), Tp(data136[i].y),
		     Tp(data136[i].z), Tp(data136[i].p));
	const Tp f0 = data136[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data137[] = {
  { 1.2151025736697127, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.40757165683116153, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.36568221542956664, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.33231367632708936, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 1.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test137()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data137)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data137[i].x), Tp(data137[i].y),
		     Tp(data137[i].z), Tp(data137[i].p));
	const Tp f0 = data137[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data138[] = {
  { 1.1419917039005423, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.43721435515669904, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.28939808488878999, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 1.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test138()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data138)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data138[i].x), Tp(data138[i].y),
		     Tp(data138[i].z), Tp(data138[i].p));
	const Tp f0 = data138[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data139[] = {
  { 1.0812295669164198, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.48243192207925389, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.41632034563196063, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 1.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test139()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data139)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data139[i].x), Tp(data139[i].y),
		     Tp(data139[i].z), Tp(data139[i].p));
	const Tp f0 = data139[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data140[] = {
  { 1.0296247564337100, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.24532360659601604, 1.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test140()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data140)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data140[i].x), Tp(data140[i].y),
		     Tp(data140[i].z), Tp(data140[i].p));
	const Tp f0 = data140[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data141[] = {
  { 0.98504492018035017, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.30442632980811579, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.27719259367796745, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 1.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test141()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data141)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data141[i].x), Tp(data141[i].y),
		     Tp(data141[i].z), Tp(data141[i].p));
	const Tp f0 = data141[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data142[] = {
  { 3.9038708537057198, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.3561944901923444, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.7294789797981953, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.3802267767659155, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.1546750004305730, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.99584496701668146, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.87740444713624721, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.78539816339744828, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.71169928894443057, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.65123614026811794, 1.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test142()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data142)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data142[i].x), Tp(data142[i].y),
		     Tp(data142[i].z), Tp(data142[i].p));
	const Tp f0 = data142[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data143[] = {
  { 1.8209569670010213, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.2108418600591322, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.93242469849049370, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.76706254329504642, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.65569673681079788, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.57484676208064478, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.51312012455983003, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.46425363300148986, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.42449230788788939, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.39143618306709632, 1.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test143()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data143)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data143[i].x), Tp(data143[i].y),
		     Tp(data143[i].z), Tp(data143[i].p));
	const Tp f0 = data143[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data144[] = {
  { 1.4787028816827659, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.77748149179738080, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.64380550980765516, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.55304211597011477, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.48673371171594015, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.43585178003832348, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.39540021192192748, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.36236732081523426, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.33481923082721610, 1.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test144()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data144)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data144[i].x), Tp(data144[i].y),
		     Tp(data144[i].z), Tp(data144[i].p));
	const Tp f0 = data144[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data145[] = {
  { 1.2899158519672602, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.88054503581663068, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.68839967114991707, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.57224810927895353, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.49302131290085860, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.43493241655767018, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.39022616779574587, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.35459593356276298, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.32543790241474618, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.30107578426061471, 1.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test145()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data145)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data145[i].x), Tp(data145[i].y),
		     Tp(data145[i].z), Tp(data145[i].p));
	const Tp f0 = data145[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data146[] = {
  { 1.1635081982720306, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.79925996303032809, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.62722432684469887, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.52280041749898654, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.45135370041749034, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.39884081752373357, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.35834408626365266, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.32601321974974723, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.29951576014169673, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.27734754080633106, 1.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test146()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data146)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data146[i].x), Tp(data146[i].y),
		     Tp(data146[i].z), Tp(data146[i].p));
	const Tp f0 = data146[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data147[] = {
  { 1.0704586692241420, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.73874417422781258, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.58137900815383625, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.48557509944832955, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.41987824764540205, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.37150394318135854, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.33414241739489770, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.30427602297117118, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.27977081290193417, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.25924893192492893, 1.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test147()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data147)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data147[i].x), Tp(data147[i].y),
		     Tp(data147[i].z), Tp(data147[i].p));
	const Tp f0 = data147[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data148[] = {
  { 0.99792637695299669, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.69116536356909253, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.54515081493174744, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.45605412304303627, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.39484999397335074, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.34972008043069208, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.31482299817374693, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.28689821387845488, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.26396563861456251, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.24474554836889340, 1.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test148()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data148)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data148[i].x), Tp(data148[i].y),
		     Tp(data148[i].z), Tp(data148[i].p));
	const Tp f0 = data148[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data149[] = {
  { 0.93915752464696522, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.65235088546172837, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.51547476495313160, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.43180232287005510, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.37424370424179809, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.33175335969665071, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.29886568055108975, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.27252692999279865, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.25088103370981046, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.23272751358046814, 1.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test149()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data149)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data149[i].x), Tp(data149[i].y),
		     Tp(data149[i].z), Tp(data149[i].p));
	const Tp f0 = data149[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data150[] = {
  { 0.89018872093237578, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.61982700184952677, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.49052343231212836, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.41136226848214746, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.35684393218828647, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.31655977795033724, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.28535464670455979, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.26034599630094629, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.23978059710511687, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.22252379047510520, 1.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test150()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data150)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data150[i].x), Tp(data150[i].y),
		     Tp(data150[i].z), Tp(data150[i].p));
	const Tp f0 = data150[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data151[] = {
  { 0.84850945081602180, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.59201357071832994, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.46912394674132923, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.39379555061681243, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.34186622865287231, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.30346430277664804, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.27369687614783889, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.24982627348259923, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.23018642093643524, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.21369851061605935, 1.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test151()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data151)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data151[i].x), Tp(data151[i].y),
		     Tp(data151[i].z), Tp(data151[i].p));
	const Tp f0 = data151[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data152[] = {
  { 0.81243686465421372, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.56784383996639420, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.45048126759597351, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.37846429199415921, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.32877627338106152, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.29200640577335130, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.26348726872117195, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.24060591252980171, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.22177139496237153, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.20595310656708540, 1.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test152()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data152)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data152[i].x), Tp(data152[i].y),
		     Tp(data152[i].z), Tp(data152[i].p));
	const Tp f0 = data152[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data153[] = {
  { 3.3126983627324424, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.0162044036131705, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.4873381477764660, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.1911718262594000, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.99920048804954020, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.86362081463721552, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.76227258514187901, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.68338116349131384, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.62007433962005221, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.56805501197237818, 1.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test153()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data153)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data153[i].x), Tp(data153[i].y),
		     Tp(data153[i].z), Tp(data153[i].p));
	const Tp f0 = data153[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data154[] = {
  { 1.5814081614865474, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 1.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test154()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data154)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data154[i].x), Tp(data154[i].y),
		     Tp(data154[i].z), Tp(data154[i].p));
	const Tp f0 = data154[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data155[] = {
  { 1.2899158519672602, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.88054503581663068, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.68839967114991707, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.57224810927895353, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.49302131290085871, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.43493241655767018, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.39022616779574587, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.35459593356276298, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.32543790241474618, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.30107578426061471, 1.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test155()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data155)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data155[i].x), Tp(data155[i].y),
		     Tp(data155[i].z), Tp(data155[i].p));
	const Tp f0 = data155[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data156[] = {
  { 1.1280921867400737, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.77748149179738080, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.61125925410130966, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.51012952781792931, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.44082242805648203, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.38981778502212655, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.35044435209855912, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.31898395594683676, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.29318162565154304, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.27158176497433539, 1.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test156()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data156)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data156[i].x), Tp(data156[i].y),
		     Tp(data156[i].z), Tp(data156[i].p));
	const Tp f0 = data156[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data157[] = {
  { 1.0193031752018780, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.70703339764066353, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.40439662148805755, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.35821748724960517, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.29390035045552426, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.27041263738194965, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 1.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test157()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data157)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data157[i].x), Tp(data157[i].y),
		     Tp(data157[i].z), Tp(data157[i].p));
	const Tp f0 = data157[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data158[] = {
  { 0.93899195242353384, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.65441549744542593, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.43439295244732362, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.33419058378657973, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 1.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test158()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data158)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data158[i].x), Tp(data158[i].y),
		     Tp(data158[i].z), Tp(data158[i].p));
	const Tp f0 = data158[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data159[] = {
  { 0.87625012187462770, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.35475287079463041, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 1.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test159()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data159)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data159[i].x), Tp(data159[i].y),
		     Tp(data159[i].z), Tp(data159[i].p));
	const Tp f0 = data159[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data160[] = {
  { 0.82532297424995804, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.22741151525481890, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 1.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test160()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data160)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data160[i].x), Tp(data160[i].y),
		     Tp(data160[i].z), Tp(data160[i].p));
	const Tp f0 = data160[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data161[] = {
  { 0.78282517157855247, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 1.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test161()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data161)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data161[i].x), Tp(data161[i].y),
		     Tp(data161[i].z), Tp(data161[i].p));
	const Tp f0 = data161[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data162[] = {
  { 0.74660796947505947, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.30794075921469910, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.22648518245425833, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 1.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test162()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data162)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data162[i].x), Tp(data162[i].y),
		     Tp(data162[i].z), Tp(data162[i].p));
	const Tp f0 = data162[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data163[] = {
  { 0.71522849851832260, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.50501667495530900, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.34003567806892132, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.29633652745245048, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.26386742498192278, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.23860047673192980, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.21827177905010703, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.20149825408531302, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 1.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test163()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data163)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data163[i].x), Tp(data163[i].y),
		     Tp(data163[i].z), Tp(data163[i].p));
	const Tp f0 = data163[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data164[] = {
  { 2.9366712692381185, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.7972103521033889, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.3302574312993272, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0679379896673959, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.89749573490256840, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.77688623778582322, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.68658127394975965, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.61618767420478027, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.55963085024841341, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.51310763549542915, 1.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test164()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data164)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data164[i].x), Tp(data164[i].y),
		     Tp(data164[i].z), Tp(data164[i].p));
	const Tp f0 = data164[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data165[] = {
  { 1.4222020153797952, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.96012401711294937, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.74606434416007117, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.53057644836823659, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.46698009947142688, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.41819552269804872, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.37941950603660379, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.32135735706415813, 1.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test165()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data165)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data165[i].x), Tp(data165[i].y),
		     Tp(data165[i].z), Tp(data165[i].p));
	const Tp f0 = data165[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data166[] = {
  { 1.1635081982720306, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.79925996303032809, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.62722432684469887, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.52280041749898654, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.45135370041749034, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.39884081752373357, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.35834408626365266, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.32601321974974723, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.29951576014169673, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.27734754080633106, 1.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test166()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data166)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data166[i].x), Tp(data166[i].y),
		     Tp(data166[i].z), Tp(data166[i].p));
	const Tp f0 = data166[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data167[] = {
  { 1.0193031752018780, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.70703339764066353, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.40439662148805766, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.35821748724960523, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.29390035045552426, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.27041263738194965, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 1.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test167()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data167)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data167[i].x), Tp(data167[i].y),
		     Tp(data167[i].z), Tp(data167[i].p));
	const Tp f0 = data167[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data168[] = {
  { 0.92210463376602536, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.64380550980765494, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.51012952781792920, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.42809724509617236, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.37151532829503470, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.32966191362422503, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.29721596019210228, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.27119756297906350, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.24979204521826581, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.23182380450040296, 1.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test168()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data168)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data168[i].x), Tp(data168[i].y),
		     Tp(data168[i].z), Tp(data168[i].p));
	const Tp f0 = data168[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data169[] = {
  { 0.85021282001266962, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.59647810419029135, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.47402508643691188, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.39864160755780492, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 1.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test169()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data169)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data169[i].x), Tp(data169[i].y),
		     Tp(data169[i].z), Tp(data169[i].p));
	const Tp f0 = data169[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data170[] = {
  { 0.79396491050461326, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544403, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041412, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715422, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966169, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899063, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816760, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956772, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401627, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952431, 1.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test170()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data170)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data170[i].x), Tp(data170[i].y),
		     Tp(data170[i].z), Tp(data170[i].p));
	const Tp f0 = data170[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data171[] = {
  { 0.74825358602755421, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.31004190937108117, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.27602345440640175, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.22824778080580607, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 1.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test171()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data171)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data171[i].x), Tp(data171[i].y),
		     Tp(data171[i].z), Tp(data171[i].p));
	const Tp f0 = data171[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data172[] = {
  { 0.71006966150449546, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611403, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642271, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976946, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 1.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test172()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data172)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data172[i].x), Tp(data172[i].y),
		     Tp(data172[i].z), Tp(data172[i].p));
	const Tp f0 = data172[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data173[] = {
  { 0.67750062446352011, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 1.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test173()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data173)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data173[i].x), Tp(data173[i].y),
		     Tp(data173[i].z), Tp(data173[i].p));
	const Tp f0 = data173[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data174[] = {
  { 0.64926076968466362, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027559, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 1.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test174()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data174)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data174[i].x), Tp(data174[i].y),
		     Tp(data174[i].z), Tp(data174[i].p));
	const Tp f0 = data174[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data175[] = {
  { 2.6690452968644154, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.6399601516866462, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.2168825302615167, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.97867722604046825, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.82363382945246122, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.71376503106635869, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.63140333592040898, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.56713505671041065, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.51545252951255904, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.47290441537711819, 1.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test175()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data175)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data175[i].x), Tp(data175[i].y),
		     Tp(data175[i].z), Tp(data175[i].p));
	const Tp f0 = data175[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data176[] = {
  { 1.3056198205930982, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.88534802192886553, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.68984446400997934, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.49231373047778387, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.38892581349755673, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.35318003278354582, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.32396243335749914, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 1.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test176()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data176)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data176[i].x), Tp(data176[i].y),
		     Tp(data176[i].z), Tp(data176[i].p));
	const Tp f0 = data176[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data177[] = {
  { 1.0704586692241420, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.73874417422781258, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.58137900815383625, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.48557509944832955, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.41987824764540205, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.37150394318135854, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.33414241739489770, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.30427602297117118, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27977081290193417, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25924893192492893, 1.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test177()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data177)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data177[i].x), Tp(data177[i].y),
		     Tp(data177[i].z), Tp(data177[i].p));
	const Tp f0 = data177[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data178[] = {
  { 0.93899195242353384, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.65441549744542593, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.43439295244732351, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.33419058378657973, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 1.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test178()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data178)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data178[i].x), Tp(data178[i].y),
		     Tp(data178[i].z), Tp(data178[i].p));
	const Tp f0 = data178[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data179[] = {
  { 0.85021282001266962, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.59647810419029135, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.47402508643691188, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.39864160755780492, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 1.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test179()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data179)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data179[i].x), Tp(data179[i].y),
		     Tp(data179[i].z), Tp(data179[i].p));
	const Tp f0 = data179[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data180[] = {
  { 0.78445730739827779, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.55304211597011477, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.44082242805648197, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.37151532829503464, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.32347894201494254, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.28780849895341543, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.26006627614063610, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23775830787373983, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21936122444907366, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20388549974147677, 1.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test180()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data180)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data180[i].x), Tp(data180[i].y),
		     Tp(data180[i].z), Tp(data180[i].p));
	const Tp f0 = data180[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data181[] = {
  { 0.73295433505383023, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.41443161796397032, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.30504032772116141, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.27169889878937054, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.24573471120867049, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.19305357639153187, 1.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test181()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data181)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data181[i].x), Tp(data181[i].y),
		     Tp(data181[i].z), Tp(data181[i].p));
	const Tp f0 = data181[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data182[] = {
  { 0.69106175006440407, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.33200250540570836, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28978118810962383, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25834168945570546, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21408553360131055, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19777145992322862, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 1.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test182()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data182)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data182[i].x), Tp(data182[i].y),
		     Tp(data182[i].z), Tp(data182[i].p));
	const Tp f0 = data182[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data183[] = {
  { 0.65604142963415046, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.37437691626847658, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.24699601870248775, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.20493348073535311, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 1.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test183()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data183)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data183[i].x), Tp(data183[i].y),
		     Tp(data183[i].z), Tp(data183[i].p));
	const Tp f0 = data183[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data184[] = {
  { 0.62615150586331814, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.35859920693491243, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.30383610797211447, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.26566096411271745, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.23717997682292769, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19699820373548479, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.18215617344720567, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 1.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test184()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data184)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data184[i].x), Tp(data184[i].y),
		     Tp(data184[i].z), Tp(data184[i].p));
	const Tp f0 = data184[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data185[] = {
  { 0.60022003632971521, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.34481369816852914, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.29241747858151068, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22856307759848521, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20723641412862276, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17577045613521000, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16374710393804559, 1.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test185()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data185)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data185[i].x), Tp(data185[i].y),
		     Tp(data185[i].z), Tp(data185[i].p));
	const Tp f0 = data185[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data186[] = {
  { 2.4654549549143647, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5195270878991471, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1297052749508756, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.90985117000699844, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.76656181862424699, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.66491105484705415, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.58863895242975239, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.52907436634303584, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.48114021573281435, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.44165281253966543, 1.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test186()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data186)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data186[i].x), Tp(data186[i].y),
		     Tp(data186[i].z), Tp(data186[i].p));
	const Tp f0 = data186[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data187[] = {
  { 1.2151025736697127, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.40757165683116153, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.36568221542956664, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.33231367632708930, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 1.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test187()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data187)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data187[i].x), Tp(data187[i].y),
		     Tp(data187[i].z), Tp(data187[i].p));
	const Tp f0 = data187[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data188[] = {
  { 0.99792637695299669, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.69116536356909253, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.54515081493174744, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.45605412304303627, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.39484999397335074, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.34972008043069208, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.31482299817374693, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.28689821387845488, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.26396563861456251, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.24474554836889340, 1.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test188()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data188)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data188[i].x), Tp(data188[i].y),
		     Tp(data188[i].z), Tp(data188[i].p));
	const Tp f0 = data188[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data189[] = {
  { 0.87625012187462770, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.35475287079463047, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 1.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test189()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data189)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data189[i].x), Tp(data189[i].y),
		     Tp(data189[i].z), Tp(data189[i].p));
	const Tp f0 = data189[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data190[] = {
  { 0.79396491050461326, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544403, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041412, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715422, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966169, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899063, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816760, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956772, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401627, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952431, 1.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test190()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data190)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data190[i].x), Tp(data190[i].y),
		     Tp(data190[i].z), Tp(data190[i].p));
	const Tp f0 = data190[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data191[] = {
  { 0.73295433505383023, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.41443161796397043, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.30504032772116141, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27169889878937054, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.24573471120867055, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19305357639153189, 1.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test191()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data191)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data191[i].x), Tp(data191[i].y),
		     Tp(data191[i].z), Tp(data191[i].p));
	const Tp f0 = data191[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data192[] = {
  { 0.68512754570930545, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.48673371171594010, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.38981778502212644, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.32966191362422509, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.28780849895341548, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.25663314414202998, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23232405332785688, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21273321233390202, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.19654546628095970, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18290474993849209, 1.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test192()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data192)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data192[i].x), Tp(data192[i].y),
		     Tp(data192[i].z), Tp(data192[i].p));
	const Tp f0 = data192[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data193[] = {
  { 0.64619816831637378, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22117588743290351, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 1.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test193()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data193)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data193[i].x), Tp(data193[i].y),
		     Tp(data193[i].z), Tp(data193[i].p));
	const Tp f0 = data193[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data194[] = {
  { 0.61363584810867344, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 1.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test194()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data194)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data194[i].x), Tp(data194[i].y),
		     Tp(data194[i].z), Tp(data194[i].p));
	const Tp f0 = data194[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data195[] = {
  { 0.58582975227241507, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.28660951724649925, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 1.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test195()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data195)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data195[i].x), Tp(data195[i].y),
		     Tp(data195[i].z), Tp(data195[i].p));
	const Tp f0 = data195[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data196[] = {
  { 0.56169543033873548, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246269, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 1.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test196()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data196)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data196[i].x), Tp(data196[i].y),
		     Tp(data196[i].z), Tp(data196[i].p));
	const Tp f0 = data196[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data197[] = {
  { 2.3035564346855377, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.4232415329072743, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0597824778188665, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.85452205359914146, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.72060249495087836, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.62551537384070788, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.55411470797192719, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.49831799048363234, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.45338997795945835, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.41635974305701651, 1.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test197()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data197)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data197[i].x), Tp(data197[i].y),
		     Tp(data197[i].z), Tp(data197[i].p));
	const Tp f0 = data197[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data198[] = {
  { 1.1419917039005425, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.43721435515669915, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.28939808488879004, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 1.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test198()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data198)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data198[i].x), Tp(data198[i].y),
		     Tp(data198[i].z), Tp(data198[i].p));
	const Tp f0 = data198[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data199[] = {
  { 0.93915752464696522, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.65235088546172837, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.51547476495313160, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.43180232287005510, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.37424370424179809, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33175335969665071, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.29886568055108975, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27252692999279865, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25088103370981046, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23272751358046814, 1.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test199()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data199)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data199[i].x), Tp(data199[i].y),
		     Tp(data199[i].z), Tp(data199[i].p));
	const Tp f0 = data199[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data200[] = {
  { 0.82532297424995804, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.22741151525481890, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 1.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test200()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data200)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data200[i].x), Tp(data200[i].y),
		     Tp(data200[i].z), Tp(data200[i].p));
	const Tp f0 = data200[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data201[] = {
  { 0.74825358602755421, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31004190937108117, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.27602345440640175, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.22824778080580607, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 1.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test201()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data201)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data201[i].x), Tp(data201[i].y),
		     Tp(data201[i].z), Tp(data201[i].p));
	const Tp f0 = data201[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data202[] = {
  { 0.69106175006440407, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33200250540570836, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.28978118810962383, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.25834168945570546, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21408553360131055, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19777145992322862, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 1.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test202()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data202)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data202[i].x), Tp(data202[i].y),
		     Tp(data202[i].z), Tp(data202[i].p));
	const Tp f0 = data202[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data203[] = {
  { 0.64619816831637378, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22117588743290356, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 1.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test203()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data203)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data203[i].x), Tp(data203[i].y),
		     Tp(data203[i].z), Tp(data203[i].p));
	const Tp f0 = data203[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data204[] = {
  { 0.60966029697906376, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.43585178003832342, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35044435209855912, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.29721596019210228, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26006627614063615, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23232405332785691, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21064553855226686, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19314237133994716, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17865617275751117, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16643164880870379, 1.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test204()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data204)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data204[i].x), Tp(data204[i].y),
		     Tp(data204[i].z), Tp(data204[i].p));
	const Tp f0 = data204[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data205[] = {
  { 0.57908381201537662, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.41508412062446831, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.33430182888427140, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28387114522476464, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.24862809777110176, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20167510684220102, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18502449827060388, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17123442227170890, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15959019453143747, 1.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test205()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data205)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data205[i].x), Tp(data205[i].y),
		     Tp(data205[i].z), Tp(data205[i].p));
	const Tp f0 = data205[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data206[] = {
  { 0.55296274146298519, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.39724951501383310, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32039448944607329, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27234759696322314, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.23873336681128249, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21358169594446560, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19389460229359845, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16478482871102290, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15364022930203414, 1.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test206()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data206)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data206[i].x), Tp(data206[i].y),
		     Tp(data206[i].z), Tp(data206[i].p));
	const Tp f0 = data206[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data207[] = {
  { 0.53028273587019470, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.38169455741536806, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.30823097320026421, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23004841666960316, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20593584740565524, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18704950966394512, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17176974669889256, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15910103247430646, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14839309852132307, 1.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test207()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data207)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data207[i].x), Tp(data207[i].y),
		     Tp(data207[i].z), Tp(data207[i].p));
	const Tp f0 = data207[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data208[] = {
  { 2.1706589694463734, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.3438542313870974, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0019762220786403, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.80869336781236623, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.68247913939368543, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.59279828604933260, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.52541540183471169, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.47272980996559200, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.43028641113267235, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.39528882436548302, 1.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test208()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data208)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data208[i].x), Tp(data208[i].y),
		     Tp(data208[i].z), Tp(data208[i].p));
	const Tp f0 = data208[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data209[] = {
  { 1.0812295669164198, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.48243192207925389, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.41632034563196063, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 1.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test209()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data209)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data209[i].x), Tp(data209[i].y),
		     Tp(data209[i].z), Tp(data209[i].p));
	const Tp f0 = data209[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data210[] = {
  { 0.89018872093237578, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.61982700184952677, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.49052343231212836, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.41136226848214746, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.35684393218828647, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.31655977795033724, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.28535464670455979, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.26034599630094629, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23978059710511687, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.22252379047510520, 1.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test210()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data210)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data210[i].x), Tp(data210[i].y),
		     Tp(data210[i].z), Tp(data210[i].p));
	const Tp f0 = data210[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data211[] = {
  { 0.78282517157855247, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 1.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test211()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data211)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data211[i].x), Tp(data211[i].y),
		     Tp(data211[i].z), Tp(data211[i].p));
	const Tp f0 = data211[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data212[] = {
  { 0.71006966150449546, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611403, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642271, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976946, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 1.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test212()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data212)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data212[i].x), Tp(data212[i].y),
		     Tp(data212[i].z), Tp(data212[i].p));
	const Tp f0 = data212[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data213[] = {
  { 0.65604142963415046, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.37437691626847658, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24699601870248775, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20493348073535311, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 1.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test213()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data213)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data213[i].x), Tp(data213[i].y),
		     Tp(data213[i].z), Tp(data213[i].p));
	const Tp f0 = data213[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data214[] = {
  { 0.61363584810867344, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 1.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test214()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data214)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data214[i].x), Tp(data214[i].y),
		     Tp(data214[i].z), Tp(data214[i].p));
	const Tp f0 = data214[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data215[] = {
  { 0.57908381201537662, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.41508412062446831, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.33430182888427140, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.28387114522476464, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24862809777110176, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.20167510684220102, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18502449827060388, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17123442227170890, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15959019453143747, 1.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test215()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data215)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data215[i].x), Tp(data215[i].y),
		     Tp(data215[i].z), Tp(data215[i].p));
	const Tp f0 = data215[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data216[] = {
  { 0.55015773617347585, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.39540021192192726, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31898395594683676, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.27119756297906350, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23775830787373986, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.21273321233390208, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.19314237133994716, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17729989403903632, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16416997417507503, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15307628754308211, 1.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test216()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data216)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data216[i].x), Tp(data216[i].y),
		     Tp(data216[i].z), Tp(data216[i].p));
	const Tp f0 = data216[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data217[] = {
  { 0.52543810875974828, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.37848959024338225, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.30578138769068519, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.26024863529587461, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22835077510766044, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20445728661137186, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17058958463505433, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15802760630811119, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14740810939919630, 1.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test217()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data217)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data217[i].x), Tp(data217[i].y),
		     Tp(data217[i].z), Tp(data217[i].p));
	const Tp f0 = data217[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data218[] = {
  { 0.50396843767233279, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017677, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285193, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568886, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100892, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931742, 1.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test218()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data218)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data218[i].x), Tp(data218[i].y),
		     Tp(data218[i].z), Tp(data218[i].p));
	const Tp f0 = data218[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data219[] = {
  { 2.0589291172490309, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2768630731912678, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.95308464885741362, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.76986883081994795, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.65014162880697235, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.56501838754091338, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.50102641833300754, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.45096909104005573, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.41062645838168715, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.37734878208318057, 1.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test219()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data219)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data219[i].x), Tp(data219[i].y),
		     Tp(data219[i].z), Tp(data219[i].p));
	const Tp f0 = data219[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data220[] = {
  { 1.0296247564337100, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24532360659601601, 1.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test220()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data220)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data220[i].x), Tp(data220[i].y),
		     Tp(data220[i].z), Tp(data220[i].p));
	const Tp f0 = data220[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data221[] = {
  { 0.84850945081602180, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.59201357071832994, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.46912394674132923, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.39379555061681243, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.34186622865287231, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.30346430277664804, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27369687614783889, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24982627348259923, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23018642093643524, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21369851061605935, 1.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test221()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data221)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data221[i].x), Tp(data221[i].y),
		     Tp(data221[i].z), Tp(data221[i].p));
	const Tp f0 = data221[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data222[] = {
  { 0.74660796947505959, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.30794075921469916, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.22648518245425833, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 1.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test222()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data222)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data222[i].x), Tp(data222[i].y),
		     Tp(data222[i].z), Tp(data222[i].p));
	const Tp f0 = data222[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data223[] = {
  { 0.67750062446352011, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 1.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test223()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data223)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data223[i].x), Tp(data223[i].y),
		     Tp(data223[i].z), Tp(data223[i].p));
	const Tp f0 = data223[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data224[] = {
  { 0.62615150586331814, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.35859920693491243, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.30383610797211447, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.26566096411271745, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.23717997682292769, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19699820373548479, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18215617344720567, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 1.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test224()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data224)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data224[i].x), Tp(data224[i].y),
		     Tp(data224[i].z), Tp(data224[i].p));
	const Tp f0 = data224[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data225[] = {
  { 0.58582975227241507, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.28660951724649925, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 1.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test225()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data225)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data225[i].x), Tp(data225[i].y),
		     Tp(data225[i].z), Tp(data225[i].p));
	const Tp f0 = data225[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data226[] = {
  { 0.55296274146298519, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.39724951501383304, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.32039448944607329, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.27234759696322314, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23873336681128249, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21358169594446560, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19389460229359842, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16478482871102290, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15364022930203414, 1.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test226()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data226)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data226[i].x), Tp(data226[i].y),
		     Tp(data226[i].z), Tp(data226[i].p));
	const Tp f0 = data226[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data227[] = {
  { 0.52543810875974828, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.37848959024338225, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.30578138769068519, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.26024863529587461, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22835077510766044, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20445728661137186, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17058958463505433, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15802760630811119, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14740810939919630, 1.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test227()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data227)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data227[i].x), Tp(data227[i].y),
		     Tp(data227[i].z), Tp(data227[i].p));
	const Tp f0 = data227[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data228[] = {
  { 0.50190926592367568, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.36236732081523426, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.29318162565154315, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24979204521826587, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21936122444907369, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.19654546628095973, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17865617275751117, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16416997417507501, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15214967292571627, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14198260091108919, 1.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test228()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data228)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data228[i].x), Tp(data228[i].y),
		     Tp(data228[i].z), Tp(data228[i].p));
	const Tp f0 = data228[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data229[] = {
  { 0.48146856024935336, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.28215395230194462, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24062135428961687, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21146460339264181, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 1.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test229()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data229)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data229[i].x), Tp(data229[i].y),
		     Tp(data229[i].z), Tp(data229[i].p));
	const Tp f0 = data229[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data230[] = {
  { 1.9632259881925387, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2192980037048136, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.91098920475560263, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.73639343103384503, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.62222874715997789, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.54101812180189024, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.47994002983795436, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.43214312138003691, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.39360856814154288, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.36181214525256422, 1.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test230()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data230)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data230[i].x), Tp(data230[i].y),
		     Tp(data230[i].z), Tp(data230[i].p));
	const Tp f0 = data230[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data231[] = {
  { 0.98504492018035017, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.30442632980811579, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27719259367796745, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 1.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test231()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data231)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data231[i].x), Tp(data231[i].y),
		     Tp(data231[i].z), Tp(data231[i].p));
	const Tp f0 = data231[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data232[] = {
  { 0.81243686465421372, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.56784383996639420, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.45048126759597351, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.37846429199415921, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32877627338106152, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29200640577335130, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.26348726872117195, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24060591252980171, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22177139496237153, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20595310656708540, 1.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test232()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data232)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data232[i].x), Tp(data232[i].y),
		     Tp(data232[i].z), Tp(data232[i].p));
	const Tp f0 = data232[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data233[] = {
  { 0.71522849851832260, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.50501667495530900, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.34003567806892132, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29633652745245048, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.26386742498192278, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23860047673192980, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21827177905010703, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20149825408531302, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 1.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test233()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data233)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data233[i].x), Tp(data233[i].y),
		     Tp(data233[i].z), Tp(data233[i].p));
	const Tp f0 = data233[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data234[] = {
  { 0.64926076968466362, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027559, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 1.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test234()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data234)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data234[i].x), Tp(data234[i].y),
		     Tp(data234[i].z), Tp(data234[i].p));
	const Tp f0 = data234[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data235[] = {
  { 0.60022003632971521, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.34481369816852914, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29241747858151068, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22856307759848521, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20723641412862270, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17577045613521000, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16374710393804559, 1.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test235()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data235)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data235[i].x), Tp(data235[i].y),
		     Tp(data235[i].z), Tp(data235[i].p));
	const Tp f0 = data235[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data236[] = {
  { 0.56169543033873548, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246269, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 1.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test236()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data236)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data236[i].x), Tp(data236[i].y),
		     Tp(data236[i].z), Tp(data236[i].p));
	const Tp f0 = data236[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data237[] = {
  { 0.53028273587019470, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.38169455741536806, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30823097320026421, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23004841666960316, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20593584740565524, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18704950966394512, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17176974669889256, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15910103247430646, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14839309852132307, 1.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test237()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data237)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data237[i].x), Tp(data237[i].y),
		     Tp(data237[i].z), Tp(data237[i].p));
	const Tp f0 = data237[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data238[] = {
  { 0.50396843767233279, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017671, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285193, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568886, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100892, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931739, 1.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test238()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data238)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data238[i].x), Tp(data238[i].y),
		     Tp(data238[i].z), Tp(data238[i].p));
	const Tp f0 = data238[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data239[] = {
  { 0.48146856024935336, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28215395230194468, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24062135428961690, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21146460339264184, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 1.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test239()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data239)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data239[i].x), Tp(data239[i].y),
		     Tp(data239[i].z), Tp(data239[i].p));
	const Tp f0 = data239[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data240[] = {
  { 0.46191741425561045, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.33481923082721610, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27158176497433534, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23182380450040299, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20388549974147677, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18290474993849207, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16643164880870376, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15307628754308211, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14198260091108916, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13259038458639197, 1.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test240()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data240)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data240[i].x), Tp(data240[i].y),
		     Tp(data240[i].z), Tp(data240[i].p));
	const Tp f0 = data240[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data241[] = {
  { 4.2978716322005361, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 2.5734477287298505, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.8806524630730097, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.4964482887725452, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 1.2491827947076342, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 1.0755248644599535, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.94630341021465791, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.84609986064974685, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.76595520702690467, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.70028904855358465, 1.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test241()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data241)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data241[i].x), Tp(data241[i].y),
		     Tp(data241[i].z), Tp(data241[i].p));
	const Tp f0 = data241[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data242[] = {
  { 3.3126983627324424, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 2.0162044036131705, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.4873381477764660, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 1.1911718262594000, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.99920048804954020, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.86362081463721552, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.76227258514187901, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.68338116349131384, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.62007433962005221, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.56805501197237818, 1.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test242()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data242)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data242[i].x), Tp(data242[i].y),
		     Tp(data242[i].z), Tp(data242[i].p));
	const Tp f0 = data242[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data243[] = {
  { 2.8166749167519578, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.7294789797981949, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 1.2825498301618641, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 1.0309745737336355, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.86727301074676200, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.75130029608951021, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.66438581397076080, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.59658200011729912, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.54206934046880317, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.49720144890667844, 1.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test243()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data243)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data243[i].x), Tp(data243[i].y),
		     Tp(data243[i].z), Tp(data243[i].p));
	const Tp f0 = data243[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data244[] = {
  { 2.5002859584226274, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.5441539427053519, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 1.1491867912175240, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.92611816750027998, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.78059504440991934, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.67728752637383127, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.59973079530009821, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.53913729015483391, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.49035834090514263, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.45016356933318674, 1.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test244()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data244)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data244[i].x), Tp(data244[i].y),
		     Tp(data244[i].z), Tp(data244[i].p));
	const Tp f0 = data244[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data245[] = {
  { 2.2746524584352801, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.4107469213791768, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 1.0526606192605987, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.84993946308309498, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.71744598019963979, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.62324623829372461, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.55243690605962292, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.49705410714957943, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.45242676457608633, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.41562134229791425, 1.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test245()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data245)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data245[i].x), Tp(data245[i].y),
		     Tp(data245[i].z), Tp(data245[i].p));
	const Tp f0 = data245[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data246[] = {
  { 2.1027405949293354, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 1.3083766713470597, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.97827740513355421, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.79106278774922356, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.66853076473323358, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.58131181147083866, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.51568494672147092, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.46431141215364813, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.42288330461461937, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.38869320468310825, 1.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test246()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data246)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data246[i].x), Tp(data246[i].y),
		     Tp(data246[i].z), Tp(data246[i].p));
	const Tp f0 = data246[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data247[] = {
  { 1.9658624928034973, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 1.2264041327122388, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.91851134135997281, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.74364193264948653, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.62906077065827226, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.54742502046461050, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.48595010807084882, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.43779324835945704, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.39893513086861171, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.36684826408155075, 1.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test247()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data247)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data247[i].x), Tp(data247[i].y),
		     Tp(data247[i].z), Tp(data247[i].p));
	const Tp f0 = data247[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data248[] = {
  { 1.8533869395258991, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 1.1587298464787144, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.86902926564433447, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.70430122208049029, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.59626528265163836, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.51923347706414547, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.46118714068187927, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.41568974422172894, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.37895866483944485, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.34861414334458163, 1.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test248()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data248)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data248[i].x), Tp(data248[i].y),
		     Tp(data248[i].z), Tp(data248[i].p));
	const Tp f0 = data248[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data249[] = {
  { 1.7587429565378301, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 1.1015594456906996, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.82712578126447844, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.67092792533634515, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.56840710705423447, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.49526024630920346, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.44011053425851082, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.39686230526729743, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.36193173526911160, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.33306326488968285, 1.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test249()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data249)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data249[i].x), Tp(data249[i].y),
		     Tp(data249[i].z), Tp(data249[i].p));
	const Tp f0 = data249[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data250[] = {
  { 1.6776131976127413, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 1.0523861651487221, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.79100793201960873, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.64211888601758704, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.54433069051281546, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.47452170094153118, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.42186331242242570, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.38055128332648536, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.34717190593992298, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.31957598621544397, 1.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test250()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data250)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data250[i].x), Tp(data250[i].y),
		     Tp(data250[i].z), Tp(data250[i].p));
	const Tp f0 = data250[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data251[] = {
  { 4.2978716322005361, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.5734477287298509, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.8806524630730097, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.4964482887725452, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.2491827947076342, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 1.0755248644599535, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.94630341021465791, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.84609986064974685, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.76595520702690467, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.70028904855358465, 1.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test251()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data251)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data251[i].x), Tp(data251[i].y),
		     Tp(data251[i].z), Tp(data251[i].p));
	const Tp f0 = data251[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data252[] = {
  { 1.9549108620038840, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.2899158519672600, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.98915776155858837, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.81147069017505580, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.69224494766745903, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.60592910363958818, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.54017444849099827, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.48821306476340542, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.44599764610881032, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.41094690289468638, 1.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test252()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data252)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data252[i].x), Tp(data252[i].y),
		     Tp(data252[i].z), Tp(data252[i].p));
	const Tp f0 = data252[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data253[] = {
  { 1.5814081614865474, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 1.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test253()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data253)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data253[i].x), Tp(data253[i].y),
		     Tp(data253[i].z), Tp(data253[i].p));
	const Tp f0 = data253[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data254[] = {
  { 1.3766908327457574, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.93242469849049403, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.72586814600021643, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.60170038809959936, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.51733275597095008, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.45565411661069510, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.40829398107716403, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.37061941990368924, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.33983690945412198, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.31415210943518240, 1.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test254()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data254)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data254[i].x), Tp(data254[i].y),
		     Tp(data254[i].z), Tp(data254[i].p));
	const Tp f0 = data254[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data255[] = {
  { 1.2401228181757644, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.41724626194602876, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.34025576623858034, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 1.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test255()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data255)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data255[i].x), Tp(data255[i].y),
		     Tp(data255[i].z), Tp(data255[i].p));
	const Tp f0 = data255[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data256[] = {
  { 1.1398486474364056, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.50932051572295522, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.31723583109620407, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 1.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test256()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data256)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data256[i].x), Tp(data256[i].y),
		     Tp(data256[i].z), Tp(data256[i].p));
	const Tp f0 = data256[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data257[] = {
  { 1.0618319977895130, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.72958644011384377, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.47797677946192796, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.36518380519509197, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.32831816101817302, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.29887508595628887, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.27473478449730920, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.25453047328755507, 1.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test257()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data257)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data257[i].x), Tp(data257[i].y),
		     Tp(data257[i].z), Tp(data257[i].p));
	const Tp f0 = data257[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data258[] = {
  { 0.99871277699951810, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.54145321304962379, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.45227149650398507, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.39116916738484903, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.34619871482405529, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 1.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test258()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data258)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data258[i].x), Tp(data258[i].y),
		     Tp(data258[i].z), Tp(data258[i].p));
	const Tp f0 = data258[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data259[] = {
  { 0.94618205076987916, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.43063641346229348, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.37278471192273888, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.24926404039506461, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 1.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test259()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data259)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data259[i].x), Tp(data259[i].y),
		     Tp(data259[i].z), Tp(data259[i].p));
	const Tp f0 = data259[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data260[] = {
  { 0.90151569394875264, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 1.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test260()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data260)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data260[i].x), Tp(data260[i].y),
		     Tp(data260[i].z), Tp(data260[i].p));
	const Tp f0 = data260[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data261[] = {
  { 0.86289061321428662, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.59826640042081192, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.34317743248401805, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.30430255416260915, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.25013826445237008, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.23034553941811331, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.21374598482754295, 1.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test261()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data261)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data261[i].x), Tp(data261[i].y),
		     Tp(data261[i].z), Tp(data261[i].p));
	const Tp f0 = data261[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data262[] = {
  { 3.3126983627324424, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.0162044036131705, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.4873381477764660, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.1911718262594000, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.99920048804954020, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.86362081463721552, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.76227258514187901, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.68338116349131384, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.62007433962005221, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.56805501197237818, 1.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test262()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data262)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data262[i].x), Tp(data262[i].y),
		     Tp(data262[i].z), Tp(data262[i].p));
	const Tp f0 = data262[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data263[] = {
  { 1.5814081614865474, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.0611477161274090, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.82154573752379845, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.67839287115050750, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.58156322880823785, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.51102476384941120, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.45701895261031078, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.41416312565527341, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.37922113222443055, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.35011957011876843, 1.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test263()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data263)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data263[i].x), Tp(data263[i].y),
		     Tp(data263[i].z), Tp(data263[i].p));
	const Tp f0 = data263[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data264[] = {
  { 1.2899158519672602, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.88054503581663068, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.68839967114991696, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.57224810927895353, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.49302131290085860, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.43493241655767007, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.39022616779574587, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.35459593356276292, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.32543790241474618, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.30107578426061460, 1.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test264()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data264)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data264[i].x), Tp(data264[i].y),
		     Tp(data264[i].z), Tp(data264[i].p));
	const Tp f0 = data264[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data265[] = {
  { 1.1280921867400739, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.77748149179738102, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.61125925410130977, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.51012952781792931, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.44082242805648209, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.38981778502212666, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.35044435209855912, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.31898395594683676, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.29318162565154310, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.27158176497433545, 1.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test265()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data265)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data265[i].x), Tp(data265[i].y),
		     Tp(data265[i].z), Tp(data265[i].p));
	const Tp f0 = data265[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data266[] = {
  { 1.0193031752018780, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.70703339764066364, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.40439662148805755, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.35821748724960523, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.29390035045552437, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.27041263738194987, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 1.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test266()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data266)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data266[i].x), Tp(data266[i].y),
		     Tp(data266[i].z), Tp(data266[i].p));
	const Tp f0 = data266[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data267[] = {
  { 0.93899195242353362, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.65441549744542582, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.43439295244732351, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.33419058378657968, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 1.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test267()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data267)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data267[i].x), Tp(data267[i].y),
		     Tp(data267[i].z), Tp(data267[i].p));
	const Tp f0 = data267[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data268[] = {
  { 0.87625012187462770, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.35475287079463041, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 1.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test268()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data268)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data268[i].x), Tp(data268[i].y),
		     Tp(data268[i].z), Tp(data268[i].p));
	const Tp f0 = data268[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data269[] = {
  { 0.82532297424995804, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.22741151525481895, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 1.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test269()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data269)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data269[i].x), Tp(data269[i].y),
		     Tp(data269[i].z), Tp(data269[i].p));
	const Tp f0 = data269[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data270[] = {
  { 0.78282517157855247, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 1.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test270()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data270)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data270[i].x), Tp(data270[i].y),
		     Tp(data270[i].z), Tp(data270[i].p));
	const Tp f0 = data270[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data271[] = {
  { 0.74660796947505947, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.30794075921469910, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.22648518245425833, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 1.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test271()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data271)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data271[i].x), Tp(data271[i].y),
		     Tp(data271[i].z), Tp(data271[i].p));
	const Tp f0 = data271[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data272[] = {
  { 0.71522849851832260, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.50501667495530900, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.34003567806892132, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.29633652745245048, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.26386742498192278, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.23860047673192980, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.21827177905010708, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.20149825408531302, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 1.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test272()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data272)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data272[i].x), Tp(data272[i].y),
		     Tp(data272[i].z), Tp(data272[i].p));
	const Tp f0 = data272[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data273[] = {
  { 2.8166749167519578, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.7294789797981949, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.2825498301618641, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0309745737336355, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.86727301074676200, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.75130029608951021, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.66438581397076080, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.59658200011729912, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.54206934046880317, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.49720144890667844, 1.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test273()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data273)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data273[i].x), Tp(data273[i].y),
		     Tp(data273[i].z), Tp(data273[i].p));
	const Tp f0 = data273[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data274[] = {
  { 1.3766908327457574, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.93242469849049403, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.72586814600021643, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.60170038809959936, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.51733275597095008, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.45565411661069510, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.40829398107716403, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.37061941990368924, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.33983690945412198, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.31415210943518240, 1.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test274()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data274)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data274[i].x), Tp(data274[i].y),
		     Tp(data274[i].z), Tp(data274[i].p));
	const Tp f0 = data274[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data275[] = {
  { 1.1280921867400739, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.77748149179738102, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.61125925410130977, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.51012952781792931, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.44082242805648209, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.38981778502212666, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.35044435209855912, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.31898395594683676, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.29318162565154310, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.27158176497433545, 1.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test275()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data275)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data275[i].x), Tp(data275[i].y),
		     Tp(data275[i].z), Tp(data275[i].p));
	const Tp f0 = data275[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data276[] = {
  { 0.98915776155858859, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.68839967114991696, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.54433105395181736, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.45609654740799010, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.39533213377632936, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.35044333169358799, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.31568279195720311, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.28783518604533220, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.26494427429221767, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.24574380041928576, 1.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test276()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data276)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data276[i].x), Tp(data276[i].y),
		     Tp(data276[i].z), Tp(data276[i].p));
	const Tp f0 = data276[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data277[] = {
  { 0.89536626255836460, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.62722432684469887, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.49791852710991047, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.41837650815327421, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.36341838720388597, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.32271298108341179, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.29112402611839111, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.26577099833075696, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.24489766569119645, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.22736514280085010, 1.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test277()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data277)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data277[i].x), Tp(data277[i].y),
		     Tp(data277[i].z), Tp(data277[i].p));
	const Tp f0 = data277[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data278[] = {
  { 0.82591883868898930, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.58137900815383636, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.46289159833808335, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.38977119074282274, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.33912786739118500, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.30154558819053262, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.27233326970516308, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.24885542593463819, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.22950278035995059, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.21323034960651352, 1.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test278()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data278)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data278[i].x), Tp(data278[i].y),
		     Tp(data278[i].z), Tp(data278[i].p));
	const Tp f0 = data278[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data279[] = {
  { 0.77153859594237240, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.54515081493174755, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.43506201805778905, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.36695743115432483, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.31969958349415245, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.28457650226367354, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.25724104398424680, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.23524769366779638, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.21710144256169836, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.20183051028848578, 1.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test279()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data279)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data279[i].x), Tp(data279[i].y),
		     Tp(data279[i].z), Tp(data279[i].p));
	const Tp f0 = data279[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data280[] = {
  { 0.72731614480004836, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.51547476495313171, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.41216577909955909, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.34812988078697865, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.30362817388613128, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.27051289127782385, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.24471340945057926, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.22393736300073205, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.20678207850259026, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.19233504909865906, 1.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test280()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data280)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data280[i].x), Tp(data280[i].y),
		     Tp(data280[i].z), Tp(data280[i].p));
	const Tp f0 = data280[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data281[] = {
  { 0.69035607662225196, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.49052343231212836, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.39284474545064513, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.33220110465216679, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.29000418212636553, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.25857189316307366, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.23406245030266770, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.21431050909870999, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.19799012457061493, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18423812735553041, 1.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test281()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data281)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data281[i].x), Tp(data281[i].y),
		     Tp(data281[i].z), Tp(data281[i].p));
	const Tp f0 = data281[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data282[] = {
  { 0.65881669877867555, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.46912394674132929, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.37622277080655531, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.31846715449229568, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.27823736960864387, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.24824442145508771, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.22484010849946637, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.20596673883085326, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.19036349996895291, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.17720916259816366, 1.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test282()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data282)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data282[i].x), Tp(data282[i].y),
		     Tp(data282[i].z), Tp(data282[i].p));
	const Tp f0 = data282[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data283[] = {
  { 0.63145906612509350, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.45048126759597362, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.36170333943276439, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.30644731639234468, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.26792377627360553, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.23918145183247722, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.21673876900247152, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.19863084151656740, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18365308285677115, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.17102051213438710, 1.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test283()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data283)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data283[i].x), Tp(data283[i].y),
		     Tp(data283[i].z), Tp(data283[i].p));
	const Tp f0 = data283[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data284[] = {
  { 2.5002859584226274, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5441539427053519, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1491867912175240, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.92611816750027998, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.78059504440991934, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.67728752637383127, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.59973079530009821, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.53913729015483391, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.49035834090514263, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.45016356933318674, 1.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test284()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data284)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data284[i].x), Tp(data284[i].y),
		     Tp(data284[i].z), Tp(data284[i].p));
	const Tp f0 = data284[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data285[] = {
  { 1.2401228181757644, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.41724626194602865, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.34025576623858028, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 1.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test285()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data285)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data285[i].x), Tp(data285[i].y),
		     Tp(data285[i].z), Tp(data285[i].p));
	const Tp f0 = data285[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data286[] = {
  { 1.0193031752018780, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.70703339764066364, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.40439662148805755, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.35821748724960523, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.29390035045552437, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27041263738194987, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 1.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test286()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data286)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data286[i].x), Tp(data286[i].y),
		     Tp(data286[i].z), Tp(data286[i].p));
	const Tp f0 = data286[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data287[] = {
  { 0.89536626255836460, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.62722432684469887, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.49791852710991047, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.41837650815327421, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.36341838720388597, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.32271298108341179, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.29112402611839105, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.26577099833075696, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.24489766569119645, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22736514280085010, 1.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test287()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data287)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data287[i].x), Tp(data287[i].y),
		     Tp(data287[i].z), Tp(data287[i].p));
	const Tp f0 = data287[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data288[] = {
  { 0.81147069017505569, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.57224810927895342, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.45609654740798999, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.38432416199179953, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.33456772014466868, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29761672383638693, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26887820680694074, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.24576984570466764, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22671381966906323, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21068500925450165, 1.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test288()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data288)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data288[i].x), Tp(data288[i].y),
		     Tp(data288[i].z), Tp(data288[i].p));
	const Tp f0 = data288[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data289[] = {
  { 0.74922683475040364, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.42445824709773294, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.35843536532262715, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.31255150258997216, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27840884573955132, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23039326394783383, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 1.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test289()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data289)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data289[i].x), Tp(data289[i].y),
		     Tp(data289[i].z), Tp(data289[i].p));
	const Tp f0 = data289[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data290[] = {
  { 0.70041148675726506, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.49826857439462924, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.29490651327180767, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23807328426215396, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21799667889562621, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18742062046073624, 1.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test290()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data290)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data290[i].x), Tp(data290[i].y),
		     Tp(data290[i].z), Tp(data290[i].p));
	const Tp f0 = data290[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data291[] = {
  { 0.66066422494478227, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.47145480245855775, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.32064732908289950, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20767475637939456, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19197970874038131, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 1.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test291()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data291)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data291[i].x), Tp(data291[i].y),
		     Tp(data291[i].z), Tp(data291[i].p));
	const Tp f0 = data291[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data292[] = {
  { 0.62740921358182578, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21692456200648205, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19887612892179202, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 1.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test292()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data292)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data292[i].x), Tp(data292[i].y),
		     Tp(data292[i].z), Tp(data292[i].p));
	const Tp f0 = data292[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data293[] = {
  { 0.59900577193982218, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19124047998168786, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17695302442341890, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 1.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test293()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data293)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data293[i].x), Tp(data293[i].y),
		     Tp(data293[i].z), Tp(data293[i].p));
	const Tp f0 = data293[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data294[] = {
  { 0.57434886336852520, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 1.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test294()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data294)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data294[i].x), Tp(data294[i].y),
		     Tp(data294[i].z), Tp(data294[i].p));
	const Tp f0 = data294[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data295[] = {
  { 2.2746524584352801, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.4107469213791768, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0526606192605987, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.84993946308309498, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.71744598019963979, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.62324623829372461, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.55243690605962292, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.49705410714957943, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.45242676457608633, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.41562134229791425, 1.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test295()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data295)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data295[i].x), Tp(data295[i].y),
		     Tp(data295[i].z), Tp(data295[i].p));
	const Tp f0 = data295[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data296[] = {
  { 1.1398486474364056, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.50932051572295534, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.31723583109620407, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 1.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test296()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data296)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data296[i].x), Tp(data296[i].y),
		     Tp(data296[i].z), Tp(data296[i].p));
	const Tp f0 = data296[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data297[] = {
  { 0.93899195242353362, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.65441549744542582, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.43439295244732351, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33419058378657968, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 1.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test297()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data297)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data297[i].x), Tp(data297[i].y),
		     Tp(data297[i].z), Tp(data297[i].p));
	const Tp f0 = data297[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data298[] = {
  { 0.82591883868898930, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.58137900815383636, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.46289159833808335, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.38977119074282274, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.33912786739118500, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.30154558819053262, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27233326970516308, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.24885542593463819, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.22950278035995059, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21323034960651352, 1.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test298()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data298)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data298[i].x), Tp(data298[i].y),
		     Tp(data298[i].z), Tp(data298[i].p));
	const Tp f0 = data298[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data299[] = {
  { 0.74922683475040364, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.42445824709773305, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.35843536532262715, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31255150258997216, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.27840884573955132, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23039326394783383, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 1.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test299()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data299)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data299[i].x), Tp(data299[i].y),
		     Tp(data299[i].z), Tp(data299[i].p));
	const Tp f0 = data299[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data300[] = {
  { 0.69224494766745892, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.49302131290085854, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.39533213377632931, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33456772014466868, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.29223188166847097, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.26066572752810518, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23603345013807686, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21617055422466741, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19975034455016180, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18590846707646830, 1.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test300()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data300)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data300[i].x), Tp(data300[i].y),
		     Tp(data300[i].z), Tp(data300[i].p));
	const Tp f0 = data300[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data301[] = {
  { 0.64750534425809492, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.37211529941965249, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31546726459173990, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27592200955549134, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24638988202477219, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22331431335011959, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18927032698158600, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17626418303399385, 1.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test301()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data301)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data301[i].x), Tp(data301[i].y),
		     Tp(data301[i].z), Tp(data301[i].p));
	const Tp f0 = data301[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data302[] = {
  { 0.61104264021947707, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903687, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898373, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998317, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970166, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264370, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459160, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830260, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388275, 1.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test302()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data302)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data302[i].x), Tp(data302[i].y),
		     Tp(data302[i].z), Tp(data302[i].p));
	const Tp f0 = data302[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data303[] = {
  { 0.58051166300235479, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.41745779321617116, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.33676551537135985, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28625539161389379, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.25089289504482515, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22442219709332997, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20369767690093490, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18693825882529830, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17304901128802957, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16131469056810749, 1.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test303()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data303)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data303[i].x), Tp(data303[i].y),
		     Tp(data303[i].z), Tp(data303[i].p));
	const Tp f0 = data303[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data304[] = {
  { 0.55441718621582226, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101527, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672193, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427749, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369860, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460567, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961037, 1.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test304()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data304)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data304[i].x), Tp(data304[i].y),
		     Tp(data304[i].z), Tp(data304[i].p));
	const Tp f0 = data304[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data305[] = {
  { 0.53175127941998745, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.38398773910410755, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18897040732232548, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 1.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test305()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data305)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data305[i].x), Tp(data305[i].y),
		     Tp(data305[i].z), Tp(data305[i].p));
	const Tp f0 = data305[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data306[] = {
  { 2.1027405949293354, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.3083766713470597, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.97827740513355421, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.79106278774922356, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.66853076473323358, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.58131181147083866, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.51568494672147092, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.46431141215364813, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.42288330461461937, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.38869320468310825, 1.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test306()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data306)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data306[i].x), Tp(data306[i].y),
		     Tp(data306[i].z), Tp(data306[i].p));
	const Tp f0 = data306[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data307[] = {
  { 1.0618319977895128, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.72958644011384377, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.47797677946192796, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.36518380519509197, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.32831816101817302, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.29887508595628887, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.27473478449730920, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.25453047328755507, 1.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test307()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data307)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data307[i].x), Tp(data307[i].y),
		     Tp(data307[i].z), Tp(data307[i].p));
	const Tp f0 = data307[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data308[] = {
  { 0.87625012187462770, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.35475287079463041, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 1.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test308()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data308)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data308[i].x), Tp(data308[i].y),
		     Tp(data308[i].z), Tp(data308[i].p));
	const Tp f0 = data308[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data309[] = {
  { 0.77153859594237240, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.54515081493174755, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.43506201805778905, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.36695743115432483, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.31969958349415245, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.28457650226367354, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25724104398424680, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23524769366779638, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21710144256169836, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.20183051028848578, 1.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test309()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data309)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data309[i].x), Tp(data309[i].y),
		     Tp(data309[i].z), Tp(data309[i].p));
	const Tp f0 = data309[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data310[] = {
  { 0.70041148675726506, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.49826857439462929, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.29490651327180772, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23807328426215404, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21799667889562627, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18742062046073629, 1.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test310()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data310)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data310[i].x), Tp(data310[i].y),
		     Tp(data310[i].z), Tp(data310[i].p));
	const Tp f0 = data310[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data311[] = {
  { 0.64750534425809492, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.37211529941965249, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.31546726459173990, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27592200955549129, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24638988202477219, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.22331431335011959, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18927032698158600, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17626418303399383, 1.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test311()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data311)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data311[i].x), Tp(data311[i].y),
		     Tp(data311[i].z), Tp(data311[i].p));
	const Tp f0 = data311[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data312[] = {
  { 0.60592910363958830, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.43493241655767029, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.35044333169358804, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29761672383638704, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.26066572752810530, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.23302662461706911, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.21140117274804845, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19392296757294852, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17944521689084739, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16721915196355913, 1.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test312()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data312)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data312[i].x), Tp(data312[i].y),
		     Tp(data312[i].z), Tp(data312[i].p));
	const Tp f0 = data312[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data313[] = {
  { 0.57201985105697684, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.28283012732924151, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 1.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test313()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data313)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data313[i].x), Tp(data313[i].y),
		     Tp(data313[i].z), Tp(data313[i].p));
	const Tp f0 = data313[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data314[] = {
  { 0.54360942652648092, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 1.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test314()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data314)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data314[i].x), Tp(data314[i].y),
		     Tp(data314[i].z), Tp(data314[i].p));
	const Tp f0 = data314[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data315[] = {
  { 0.51931443788430542, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 1.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test315()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data315)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data315[i].x), Tp(data315[i].y),
		     Tp(data315[i].z), Tp(data315[i].p));
	const Tp f0 = data315[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data316[] = {
  { 0.49820173719202743, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 1.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test316()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data316)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data316[i].x), Tp(data316[i].y),
		     Tp(data316[i].z), Tp(data316[i].p));
	const Tp f0 = data316[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data317[] = {
  { 1.9658624928034973, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2264041327122388, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.91851134135997281, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.74364193264948653, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.62906077065827226, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.54742502046461050, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.48595010807084882, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.43779324835945704, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.39893513086861171, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.36684826408155075, 1.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test317()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data317)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data317[i].x), Tp(data317[i].y),
		     Tp(data317[i].z), Tp(data317[i].p));
	const Tp f0 = data317[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data318[] = {
  { 0.99871277699951810, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.54145321304962379, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.45227149650398507, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.39116916738484903, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.34619871482405529, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 1.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test318()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data318)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data318[i].x), Tp(data318[i].y),
		     Tp(data318[i].z), Tp(data318[i].p));
	const Tp f0 = data318[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data319[] = {
  { 0.82532297424995804, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22741151525481895, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 1.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test319()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data319)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data319[i].x), Tp(data319[i].y),
		     Tp(data319[i].z), Tp(data319[i].p));
	const Tp f0 = data319[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data320[] = {
  { 0.72731614480004836, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.51547476495313171, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.41216577909955909, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.34812988078697865, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.30362817388613128, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27051289127782385, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.24471340945057926, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.22393736300073205, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20678207850259026, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19233504909865906, 1.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test320()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data320)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data320[i].x), Tp(data320[i].y),
		     Tp(data320[i].z), Tp(data320[i].p));
	const Tp f0 = data320[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data321[] = {
  { 0.66066422494478227, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.47145480245855775, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.32064732908289950, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20767475637939456, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19197970874038126, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 1.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test321()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data321)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data321[i].x), Tp(data321[i].y),
		     Tp(data321[i].z), Tp(data321[i].p));
	const Tp f0 = data321[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data322[] = {
  { 0.61104264021947707, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903687, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898362, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998311, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970166, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264370, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459160, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830260, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388275, 1.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test322()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data322)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data322[i].x), Tp(data322[i].y),
		     Tp(data322[i].z), Tp(data322[i].p));
	const Tp f0 = data322[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data323[] = {
  { 0.57201985105697684, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.28283012732924151, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 1.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test323()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data323)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data323[i].x), Tp(data323[i].y),
		     Tp(data323[i].z), Tp(data323[i].p));
	const Tp f0 = data323[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data324[] = {
  { 0.54017444849099827, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.39022616779574598, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.31568279195720311, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26887820680694080, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23603345013807683, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21140117274804845, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19208571013328102, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17644476239784859, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16346723896224688, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15249181170206269, 1.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test324()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data324)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data324[i].x), Tp(data324[i].y),
		     Tp(data324[i].z), Tp(data324[i].p));
	const Tp f0 = data324[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data325[] = {
  { 0.51347985591731382, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 1.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test325()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data325)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data325[i].x), Tp(data325[i].y),
		     Tp(data325[i].z), Tp(data325[i].p));
	const Tp f0 = data325[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data326[] = {
  { 0.49064226479292744, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480224, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557912, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619548, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682120, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596741, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 1.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test326()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data326)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data326[i].x), Tp(data326[i].y),
		     Tp(data326[i].z), Tp(data326[i].p));
	const Tp f0 = data326[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data327[] = {
  { 0.47078850771996805, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.34247161105719709, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17097270188240146, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15729483835968866, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14592515814192544, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 1.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test327()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data327)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data327[i].x), Tp(data327[i].y),
		     Tp(data327[i].z), Tp(data327[i].p));
	const Tp f0 = data327[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data328[] = {
  { 1.8533869395258991, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1587298464787144, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.86902926564433447, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.70430122208049029, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.59626528265163836, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.51923347706414547, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.46118714068187927, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.41568974422172894, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.37895866483944485, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.34861414334458163, 1.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test328()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data328)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data328[i].x), Tp(data328[i].y),
		     Tp(data328[i].z), Tp(data328[i].p));
	const Tp f0 = data328[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data329[] = {
  { 0.94618205076987916, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.43063641346229348, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.37278471192273888, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.24926404039506461, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 1.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test329()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data329)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data329[i].x), Tp(data329[i].y),
		     Tp(data329[i].z), Tp(data329[i].p));
	const Tp f0 = data329[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data330[] = {
  { 0.78282517157855247, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 1.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test330()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data330)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data330[i].x), Tp(data330[i].y),
		     Tp(data330[i].z), Tp(data330[i].p));
	const Tp f0 = data330[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data331[] = {
  { 0.69035607662225196, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.49052343231212836, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.39284474545064513, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.33220110465216679, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29000418212636553, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.25857189316307366, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23406245030266770, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21431050909870999, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19799012457061493, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18423812735553041, 1.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test331()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data331)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data331[i].x), Tp(data331[i].y),
		     Tp(data331[i].z), Tp(data331[i].p));
	const Tp f0 = data331[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data332[] = {
  { 0.62740921358182578, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.21692456200648205, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19887612892179202, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 1.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test332()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data332)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data332[i].x), Tp(data332[i].y),
		     Tp(data332[i].z), Tp(data332[i].p));
	const Tp f0 = data332[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data333[] = {
  { 0.58051166300235479, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.41745779321617116, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.33676551537135985, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.28625539161389379, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25089289504482515, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22442219709332997, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20369767690093490, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.18693825882529830, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17304901128802957, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16131469056810749, 1.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test333()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data333)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data333[i].x), Tp(data333[i].y),
		     Tp(data333[i].z), Tp(data333[i].p));
	const Tp f0 = data333[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data334[] = {
  { 0.54360942652648092, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 1.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test334()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data334)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data334[i].x), Tp(data334[i].y),
		     Tp(data334[i].z), Tp(data334[i].p));
	const Tp f0 = data334[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data335[] = {
  { 0.51347985591731382, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 1.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test335()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data335)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data335[i].x), Tp(data335[i].y),
		     Tp(data335[i].z), Tp(data335[i].p));
	const Tp f0 = data335[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data336[] = {
  { 0.48821306476340537, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.35459593356276303, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.28783518604533220, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.24576984570466776, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.21617055422466744, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19392296757294850, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17644476239784854, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16226862482523116, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15048971552664522, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14051533635416971, 1.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test336()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data336)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data336[i].x), Tp(data336[i].y),
		     Tp(data336[i].z), Tp(data336[i].p));
	const Tp f0 = data336[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data337[] = {
  { 0.46658916663652034, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15625051876858431, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14497441712587616, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 1.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test337()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data337)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data337[i].x), Tp(data337[i].y),
		     Tp(data337[i].z), Tp(data337[i].p));
	const Tp f0 = data337[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data338[] = {
  { 0.44778454024562891, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 1.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test338()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data338)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data338[i].x), Tp(data338[i].y),
		     Tp(data338[i].z), Tp(data338[i].p));
	const Tp f0 = data338[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data339[] = {
  { 1.7587429565378301, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1015594456906996, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.82712578126447844, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.67092792533634515, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.56840710705423447, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.49526024630920346, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.44011053425851082, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.39686230526729743, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.36193173526911160, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.33306326488968285, 1.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test339()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data339)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data339[i].x), Tp(data339[i].y),
		     Tp(data339[i].z), Tp(data339[i].p));
	const Tp f0 = data339[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data340[] = {
  { 0.90151569394875264, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 1.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test340()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data340)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data340[i].x), Tp(data340[i].y),
		     Tp(data340[i].z), Tp(data340[i].p));
	const Tp f0 = data340[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data341[] = {
  { 0.74660796947505959, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.30794075921469916, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22648518245425833, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 1.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test341()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data341)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data341[i].x), Tp(data341[i].y),
		     Tp(data341[i].z), Tp(data341[i].p));
	const Tp f0 = data341[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data342[] = {
  { 0.65881669877867555, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.46912394674132929, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37622277080655531, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.31846715449229568, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.27823736960864387, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.24824442145508771, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22484010849946637, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20596673883085326, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19036349996895291, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17720916259816366, 1.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test342()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data342)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data342[i].x), Tp(data342[i].y),
		     Tp(data342[i].z), Tp(data342[i].p));
	const Tp f0 = data342[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data343[] = {
  { 0.59900577193982218, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19124047998168797, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17695302442341893, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 1.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test343()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data343)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data343[i].x), Tp(data343[i].y),
		     Tp(data343[i].z), Tp(data343[i].p));
	const Tp f0 = data343[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data344[] = {
  { 0.55441718621582214, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101521, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672193, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427749, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369860, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460564, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961037, 1.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test344()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data344)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data344[i].x), Tp(data344[i].y),
		     Tp(data344[i].z), Tp(data344[i].p));
	const Tp f0 = data344[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data345[] = {
  { 0.51931443788430542, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 1.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test345()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data345)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data345[i].x), Tp(data345[i].y),
		     Tp(data345[i].z), Tp(data345[i].p));
	const Tp f0 = data345[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data346[] = {
  { 0.49064226479292744, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480224, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557918, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619548, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682120, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596741, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 1.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test346()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data346)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data346[i].x), Tp(data346[i].y),
		     Tp(data346[i].z), Tp(data346[i].p));
	const Tp f0 = data346[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data347[] = {
  { 0.46658916663652034, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15625051876858431, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14497441712587616, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 1.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test347()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data347)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data347[i].x), Tp(data347[i].y),
		     Tp(data347[i].z), Tp(data347[i].p));
	const Tp f0 = data347[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data348[] = {
  { 0.44599764610881049, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32543790241474613, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26494427429221773, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22671381966906326, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19975034455016183, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17944521689084741, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16346723896224694, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15048971552664525, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13969338982979984, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13054095718169423, 1.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test348()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data348)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data348[i].x), Tp(data348[i].y),
		     Tp(data348[i].z), Tp(data348[i].p));
	const Tp f0 = data348[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data349[] = {
  { 0.42808593449069277, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 1.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test349()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data349)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data349[i].x), Tp(data349[i].y),
		     Tp(data349[i].z), Tp(data349[i].p));
	const Tp f0 = data349[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data350[] = {
  { 1.6776131976127413, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0523861651487221, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.79100793201960873, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.64211888601758704, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.54433069051281546, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.47452170094153118, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.42186331242242570, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.38055128332648536, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.34717190593992298, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.31957598621544397, 1.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test350()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data350)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data350[i].x), Tp(data350[i].y),
		     Tp(data350[i].z), Tp(data350[i].p));
	const Tp f0 = data350[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data351[] = {
  { 0.86289061321428662, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.59826640042081192, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.34317743248401805, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.30430255416260915, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25013826445237008, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23034553941811331, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.21374598482754295, 1.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test351()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data351)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data351[i].x), Tp(data351[i].y),
		     Tp(data351[i].z), Tp(data351[i].p));
	const Tp f0 = data351[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data352[] = {
  { 0.71522849851832260, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.50501667495530900, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.34003567806892132, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.29633652745245048, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.26386742498192278, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23860047673192980, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21827177905010708, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20149825408531302, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 1.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test352()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data352)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data352[i].x), Tp(data352[i].y),
		     Tp(data352[i].z), Tp(data352[i].p));
	const Tp f0 = data352[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data353[] = {
  { 0.63145906612509350, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.45048126759597362, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.36170333943276439, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.30644731639234468, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26792377627360553, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23918145183247722, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21673876900247152, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19863084151656740, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18365308285677115, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17102051213438710, 1.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test353()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data353)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data353[i].x), Tp(data353[i].y),
		     Tp(data353[i].z), Tp(data353[i].p));
	const Tp f0 = data353[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data354[] = {
  { 0.57434886336852520, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 1.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test354()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data354)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data354[i].x), Tp(data354[i].y),
		     Tp(data354[i].z), Tp(data354[i].p));
	const Tp f0 = data354[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data355[] = {
  { 0.53175127941998745, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.38398773910410744, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18897040732232553, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 1.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test355()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data355)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data355[i].x), Tp(data355[i].y),
		     Tp(data355[i].z), Tp(data355[i].p));
	const Tp f0 = data355[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data356[] = {
  { 0.49820173719202743, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 1.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test356()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data356)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data356[i].x), Tp(data356[i].y),
		     Tp(data356[i].z), Tp(data356[i].p));
	const Tp f0 = data356[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data357[] = {
  { 0.47078850771996805, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.34247161105719709, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17097270188240146, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15729483835968866, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14592515814192544, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 1.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test357()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data357)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data357[i].x), Tp(data357[i].y),
		     Tp(data357[i].z), Tp(data357[i].p));
	const Tp f0 = data357[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data358[] = {
  { 0.44778454024562891, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 1.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test358()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data358)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data358[i].x), Tp(data358[i].y),
		     Tp(data358[i].z), Tp(data358[i].p));
	const Tp f0 = data358[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data359[] = {
  { 0.42808593449069277, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 1.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test359()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data359)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data359[i].x), Tp(data359[i].y),
		     Tp(data359[i].z), Tp(data359[i].p));
	const Tp f0 = data359[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=1.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data360[] = {
  { 0.41094690289468638, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30107578426061465, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24574380041928576, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21068500925450168, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18590846707646830, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16721915196355908, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15249181170206264, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14051533635416971, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13054095718169420, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12207707406867493, 1.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=1.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test360()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data360)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data360[i].x), Tp(data360[i].y),
		     Tp(data360[i].z), Tp(data360[i].p));
	const Tp f0 = data360[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data361[] = {
  { 3.8009937597602086, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 2.2873302571228442, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.6766867517649831, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.3370818171827918, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 1.1180456329443651, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.96394371439393434, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.84910565200448118, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.75994320932668868, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.68855078657464353, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.62999854566270364, 2.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test361()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data361)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data361[i].x), Tp(data361[i].y),
		     Tp(data361[i].z), Tp(data361[i].p));
	const Tp f0 = data361[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data362[] = {
  { 2.9366712692381185, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.7972103521033889, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.3302574312993272, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 1.0679379896673959, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.89749573490256840, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.77688623778582322, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.68658127394975965, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.61618767420478027, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.55963085024841341, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.51310763549542915, 2.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test362()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data362)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data362[i].x), Tp(data362[i].y),
		     Tp(data362[i].z), Tp(data362[i].p));
	const Tp f0 = data362[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data363[] = {
  { 2.5002859584226278, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.5441539427053519, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 1.1491867912175242, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.92611816750027998, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.78059504440991945, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.67728752637383127, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.59973079530009821, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.53913729015483403, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.49035834090514263, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.45016356933318680, 2.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test363()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data363)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data363[i].x), Tp(data363[i].y),
		     Tp(data363[i].z), Tp(data363[i].p));
	const Tp f0 = data363[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data364[] = {
  { 2.2214414690791831, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.3802267767659149, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 1.0309745737336349, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.83304055090469353, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.70357144775988856, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.61146315726744793, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.54218956071646918, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.48798385671321487, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.44428829381583657, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.40823926143551892, 2.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test364()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data364)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data364[i].x), Tp(data364[i].y),
		     Tp(data364[i].z), Tp(data364[i].p));
	const Tp f0 = data364[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data365[] = {
  { 2.0223240853837132, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.2620302587414380, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.94525685307389129, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.76528469292686963, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.64733799690034244, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.56329514636044120, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.50000354754059428, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.45042187914510734, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.41041350961801143, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.37737682387263155, 2.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test365()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data365)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data365[i].x), Tp(data365[i].y),
		     Tp(data365[i].z), Tp(data365[i].p));
	const Tp f0 = data365[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data366[] = {
  { 1.8704609344962482, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 1.1712157381568415, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.87910719303703111, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.71283590302652566, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.60370742009775968, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.52585344510508902, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.46716203643476467, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.42114283795319279, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.38397969175995850, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.35327072043236890, 2.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test366()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data366)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data366[i].x), Tp(data366[i].y),
		     Tp(data366[i].z), Tp(data366[i].p));
	const Tp f0 = data366[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data367[] = {
  { 1.7494459255069015, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 1.0984204846455190, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.82589393219588059, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.67053815267088079, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.56845382600498828, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.49555418083598146, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.44055184461906965, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.39739383469208367, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.36251880611170789, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.33368392213839787, 2.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test367()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data367)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data367[i].x), Tp(data367[i].y),
		     Tp(data367[i].z), Tp(data367[i].p));
	const Tp f0 = data367[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data368[] = {
  { 1.6499366323032025, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 1.0382700842969894, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.78179340212247594, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.63540981359548432, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.53912823334761450, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.47031702519777602, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.41836350380340265, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.37757309719027227, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.34459354439341267, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.31731266011780507, 2.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test368()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data368)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data368[i].x), Tp(data368[i].y),
		     Tp(data368[i].z), Tp(data368[i].p));
	const Tp f0 = data368[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data369[] = {
  { 1.5661537714260798, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.98741765401777437, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.74441545361230743, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.60558237286346228, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.51419308374047967, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.44883400631269621, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.39945803864977009, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.36067143569402699, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.32929762047761185, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.30333429561267361, 2.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test369()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data369)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data369[i].x), Tp(data369[i].y),
		     Tp(data369[i].z), Tp(data369[i].p));
	const Tp f0 = data369[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data370[] = {
  { 1.4942973790551630, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.94365001435344487, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.71217440333325732, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.57981347206667322, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.49262440117297451, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.43023294452768129, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.38307518584806638, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.34601465156302741, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.31602515192876895, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.29119853301023979, 2.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test370()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data370)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data370[i].x), Tp(data370[i].y),
		     Tp(data370[i].z), Tp(data370[i].p));
	const Tp f0 = data370[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data371[] = {
  { 3.8009937597602086, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.2873302571228442, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.6766867517649831, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.3370818171827918, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.1180456329443651, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.96394371439393434, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.84910565200448118, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.75994320932668868, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.68855078657464353, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.62999854566270364, 2.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test371()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data371)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data371[i].x), Tp(data371[i].y),
		     Tp(data371[i].z), Tp(data371[i].p));
	const Tp f0 = data371[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data372[] = {
  { 1.7531355046813082, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.1635081982720308, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.89536626255836449, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.73636967775666784, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.62939232488112529, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.55177429367339303, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.49253810493171563, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.44565535953864471, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.40751481490798852, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.37580983608029767, 2.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test372()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data372)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data372[i].x), Tp(data372[i].y),
		     Tp(data372[i].z), Tp(data372[i].p));
	const Tp f0 = data372[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data373[] = {
  { 1.4222020153797954, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.96012401711294959, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.74606434416007117, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.53057644836823659, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.46698009947142699, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.41819552269804872, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.37941950603660379, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.32135735706415813, 2.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test373()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data373)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data373[i].x), Tp(data373[i].y),
		     Tp(data373[i].z), Tp(data373[i].p));
	const Tp f0 = data373[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data374[] = {
  { 1.2401228181757644, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.41724626194602865, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.34025576623858028, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 2.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test374()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data374)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data374[i].x), Tp(data374[i].y),
		     Tp(data374[i].z), Tp(data374[i].p));
	const Tp f0 = data374[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data375[] = {
  { 1.1183606845303713, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.76706254329504642, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.60170038809959925, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.50147982951463554, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.43296512384230068, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.38263098086624298, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.34382517873635210, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.31284917785471156, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.28746421372502651, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.26622739632444620, 2.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test375()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data375)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data375[i].x), Tp(data375[i].y),
		     Tp(data375[i].z), Tp(data375[i].p));
	const Tp f0 = data375[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data376[] = {
  { 1.0287989423954247, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.70894375613893612, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.55771167880702011, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.35642667060665739, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.32062906080557096, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.29201689183182339, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.24888391852810277, 2.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test376()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data376)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data376[i].x), Tp(data376[i].y),
		     Tp(data376[i].z), Tp(data376[i].p));
	const Tp f0 = data376[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data377[] = {
  { 0.95902057408895203, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.66326984938537459, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.43747841423603617, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.25339986965394767, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.23498900543731913, 2.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test377()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data377)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data377[i].x), Tp(data377[i].y),
		     Tp(data377[i].z), Tp(data377[i].p));
	const Tp f0 = data377[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data378[] = {
  { 0.90250310497734676, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.49450910722023028, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.35905468421976594, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 2.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test378()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data378)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data378[i].x), Tp(data378[i].y),
		     Tp(data378[i].z), Tp(data378[i].p));
	const Tp f0 = data378[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data379[] = {
  { 0.85542246869229122, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.21370251886958533, 2.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test379()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data379)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data379[i].x), Tp(data379[i].y),
		     Tp(data379[i].z), Tp(data379[i].p));
	const Tp f0 = data379[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data380[] = {
  { 0.81535812729905288, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.29123776130118406, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.20524892428816363, 2.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test380()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data380)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data380[i].x), Tp(data380[i].y),
		     Tp(data380[i].z), Tp(data380[i].p));
	const Tp f0 = data380[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data381[] = {
  { 0.78068845414522159, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.54494833083219296, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.43220566332383353, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.36312278662905817, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.31549408045108390, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.28026194988618314, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.21298191526646917, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.19782954572559394, 2.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test381()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data381)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data381[i].x), Tp(data381[i].y),
		     Tp(data381[i].z), Tp(data381[i].p));
	const Tp f0 = data381[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data382[] = {
  { 2.9366712692381185, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.7972103521033889, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.3302574312993272, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0679379896673959, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.89749573490256840, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.77688623778582322, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.68658127394975965, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.61618767420478027, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.55963085024841341, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.51310763549542915, 2.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test382()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data382)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data382[i].x), Tp(data382[i].y),
		     Tp(data382[i].z), Tp(data382[i].p));
	const Tp f0 = data382[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data383[] = {
  { 1.4222020153797954, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.96012401711294959, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.74606434416007128, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.61767396750725501, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.53057644836823659, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.46698009947142705, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.41819552269804872, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.37941950603660379, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.34775897512876358, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.32135735706415813, 2.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test383()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data383)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data383[i].x), Tp(data383[i].y),
		     Tp(data383[i].z), Tp(data383[i].p));
	const Tp f0 = data383[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data384[] = {
  { 1.1635081982720306, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.79925996303032809, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.62722432684469887, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.52280041749898654, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.45135370041749034, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.39884081752373357, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.35834408626365266, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.32601321974974723, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.29951576014169673, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.27734754080633106, 2.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test384()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data384)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data384[i].x), Tp(data384[i].y),
		     Tp(data384[i].z), Tp(data384[i].p));
	const Tp f0 = data384[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data385[] = {
  { 1.0193031752018780, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.70703339764066353, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.40439662148805766, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.35821748724960523, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.29390035045552426, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.27041263738194965, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 2.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test385()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data385)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data385[i].x), Tp(data385[i].y),
		     Tp(data385[i].z), Tp(data385[i].p));
	const Tp f0 = data385[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data386[] = {
  { 0.92210463376602536, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.64380550980765505, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.51012952781792931, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.42809724509617247, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.37151532829503470, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.32966191362422509, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.29721596019210228, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.27119756297906356, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.24979204521826584, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.23182380450040302, 2.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test386()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data386)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data386[i].x), Tp(data386[i].y),
		     Tp(data386[i].z), Tp(data386[i].p));
	const Tp f0 = data386[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data387[] = {
  { 0.85021282001266962, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.59647810419029124, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.47402508643691182, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.39864160755780487, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 2.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test387()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data387)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data387[i].x), Tp(data387[i].y),
		     Tp(data387[i].z), Tp(data387[i].p));
	const Tp f0 = data387[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data388[] = {
  { 0.79396491050461349, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544403, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041412, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715422, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966175, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899069, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816771, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956781, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401630, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952442, 2.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test388()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data388)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data388[i].x), Tp(data388[i].y),
		     Tp(data388[i].z), Tp(data388[i].p));
	const Tp f0 = data388[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data389[] = {
  { 0.74825358602755421, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.31004190937108117, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.27602345440640175, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.22824778080580607, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 2.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test389()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data389)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data389[i].x), Tp(data389[i].y),
		     Tp(data389[i].z), Tp(data389[i].p));
	const Tp f0 = data389[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data390[] = {
  { 0.71006966150449546, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611403, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642271, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976946, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 2.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test390()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data390)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data390[i].x), Tp(data390[i].y),
		     Tp(data390[i].z), Tp(data390[i].p));
	const Tp f0 = data390[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data391[] = {
  { 0.67750062446352011, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 2.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test391()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data391)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data391[i].x), Tp(data391[i].y),
		     Tp(data391[i].z), Tp(data391[i].p));
	const Tp f0 = data391[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data392[] = {
  { 0.64926076968466351, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027556, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 2.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test392()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data392)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data392[i].x), Tp(data392[i].y),
		     Tp(data392[i].z), Tp(data392[i].p));
	const Tp f0 = data392[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data393[] = {
  { 2.5002859584226278, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5441539427053519, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1491867912175242, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.92611816750027998, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.78059504440991945, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.67728752637383127, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.59973079530009821, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.53913729015483403, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.49035834090514263, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.45016356933318680, 2.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test393()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data393)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data393[i].x), Tp(data393[i].y),
		     Tp(data393[i].z), Tp(data393[i].p));
	const Tp f0 = data393[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data394[] = {
  { 1.2401228181757644, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.84518244261721631, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.66043636487545310, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.54893055973196081, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.47293692579575036, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.41724626194602865, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.37439859819694432, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.34025576623858028, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.31231779994936493, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28897623043027054, 2.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test394()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data394)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data394[i].x), Tp(data394[i].y),
		     Tp(data394[i].z), Tp(data394[i].p));
	const Tp f0 = data394[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data395[] = {
  { 1.0193031752018780, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.70703339764066353, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.55802917749871084, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.46698823242950288, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.40439662148805755, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.35821748724960517, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.32249457867571718, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.29390035045552426, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27041263738194965, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25072380247129428, 2.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test395()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data395)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data395[i].x), Tp(data395[i].y),
		     Tp(data395[i].z), Tp(data395[i].p));
	const Tp f0 = data395[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data396[] = {
  { 0.89536626255836460, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.62722432684469887, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.49791852710991058, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.41837650815327421, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.36341838720388597, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.32271298108341179, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.29112402611839111, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.26577099833075696, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.24489766569119648, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22736514280085010, 2.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test396()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data396)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data396[i].x), Tp(data396[i].y),
		     Tp(data396[i].z), Tp(data396[i].p));
	const Tp f0 = data396[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data397[] = {
  { 0.81147069017505569, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.57224810927895342, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.45609654740798999, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.38432416199179953, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.33456772014466868, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29761672383638693, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26887820680694074, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.24576984570466764, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22671381966906323, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21068500925450165, 2.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test397()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data397)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data397[i].x), Tp(data397[i].y),
		     Tp(data397[i].z), Tp(data397[i].p));
	const Tp f0 = data397[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data398[] = {
  { 0.74922683475040364, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.42445824709773294, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.35843536532262715, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.31255150258997216, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27840884573955132, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23039326394783383, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 2.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test398()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data398)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data398[i].x), Tp(data398[i].y),
		     Tp(data398[i].z), Tp(data398[i].p));
	const Tp f0 = data398[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data399[] = {
  { 0.70041148675726506, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.49826857439462924, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.29490651327180767, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23807328426215396, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21799667889562621, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18742062046073624, 2.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test399()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data399)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data399[i].x), Tp(data399[i].y),
		     Tp(data399[i].z), Tp(data399[i].p));
	const Tp f0 = data399[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data400[] = {
  { 0.66066422494478227, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.47145480245855775, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.32064732908289950, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20767475637939456, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19197970874038131, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 2.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test400()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data400)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data400[i].x), Tp(data400[i].y),
		     Tp(data400[i].z), Tp(data400[i].p));
	const Tp f0 = data400[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data401[] = {
  { 0.62740921358182578, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21692456200648205, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19887612892179199, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 2.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test401()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data401)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data401[i].x), Tp(data401[i].y),
		     Tp(data401[i].z), Tp(data401[i].p));
	const Tp f0 = data401[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data402[] = {
  { 0.59900577193982218, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19124047998168786, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17695302442341890, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 2.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test402()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data402)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data402[i].x), Tp(data402[i].y),
		     Tp(data402[i].z), Tp(data402[i].p));
	const Tp f0 = data402[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data403[] = {
  { 0.57434886336852520, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 2.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test403()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data403)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data403[i].x), Tp(data403[i].y),
		     Tp(data403[i].z), Tp(data403[i].p));
	const Tp f0 = data403[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data404[] = {
  { 2.2214414690791831, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.3802267767659149, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0309745737336349, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.83304055090469353, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.70357144775988856, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.61146315726744793, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.54218956071646918, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.48798385671321487, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.44428829381583657, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.40823926143551892, 2.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test404()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data404)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data404[i].x), Tp(data404[i].y),
		     Tp(data404[i].z), Tp(data404[i].p));
	const Tp f0 = data404[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data405[] = {
  { 1.1183606845303713, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.76706254329504642, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.60170038809959925, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.50147982951463554, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.43296512384230068, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.38263098086624298, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.34382517873635210, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.31284917785471156, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.28746421372502651, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.26622739632444620, 2.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test405()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data405)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data405[i].x), Tp(data405[i].y),
		     Tp(data405[i].z), Tp(data405[i].p));
	const Tp f0 = data405[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data406[] = {
  { 0.92210463376602536, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.64380550980765505, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.51012952781792931, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.42809724509617236, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.37151532829503470, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.32966191362422509, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.29721596019210228, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27119756297906356, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.24979204521826584, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23182380450040302, 2.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test406()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data406)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data406[i].x), Tp(data406[i].y),
		     Tp(data406[i].z), Tp(data406[i].p));
	const Tp f0 = data406[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data407[] = {
  { 0.81147069017505569, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.57224810927895342, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.45609654740798999, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.38432416199179953, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.33456772014466868, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.29761672383638693, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.26887820680694074, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.24576984570466764, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.22671381966906323, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21068500925450165, 2.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test407()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data407)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data407[i].x), Tp(data407[i].y),
		     Tp(data407[i].z), Tp(data407[i].p));
	const Tp f0 = data407[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data408[] = {
  { 0.73636967775666762, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.52280041749898631, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.41837650815327410, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.35355339059327373, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.30846026625449763, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.27488121754848049, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.24870653210676333, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.22761962087512763, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21020189719878085, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19552991524211263, 2.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test408()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data408)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data408[i].x), Tp(data408[i].y),
		     Tp(data408[i].z), Tp(data408[i].p));
	const Tp f0 = data408[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data409[] = {
  { 0.68053628937360033, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.48557509944832966, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.38977119074282268, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33009937700548331, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.28848454403954715, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.25743278691438753, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23318729602594312, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21362648473259205, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19744909828337603, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18380687608379534, 2.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test409()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data409)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data409[i].x), Tp(data409[i].y),
		     Tp(data409[i].z), Tp(data409[i].p));
	const Tp f0 = data409[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data410[] = {
  { 0.63667820767968997, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.45605412304303605, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.36695743115432478, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31131968298304535, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27244173583397985, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24338603781834769, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22066891492755408, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20232025929616423, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18713024484317300, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17430935681084583, 2.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test410()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data410)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data410[i].x), Tp(data410[i].y),
		     Tp(data410[i].z), Tp(data410[i].p));
	const Tp f0 = data410[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data411[] = {
  { 0.60092072346235836, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.43180232287005510, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.34812988078697865, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.29577123669941352, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.25912646698528391, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23170439652324634, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21024125233844609, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19288923355417037, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17851251804571255, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16636924381727244, 2.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test411()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data411)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data411[i].x), Tp(data411[i].y),
		     Tp(data411[i].z), Tp(data411[i].p));
	const Tp f0 = data411[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data412[] = {
  { 0.57097108596555701, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.41136226848214741, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.33220110465216673, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28258106989482712, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.24780725960056424, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22175728741852704, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20134956551950131, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18483786021034576, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17114792855430458, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15957763113942439, 2.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test412()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data412)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data412[i].x), Tp(data412[i].y),
		     Tp(data412[i].z), Tp(data412[i].p));
	const Tp f0 = data412[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data413[] = {
  { 0.54536685068321555, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.39379555061681243, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.31846715449229557, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27118200606113163, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.23800758472499209, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21313305493648360, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19363109316852320, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17784163491549257, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16474276906428434, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15366616394914162, 2.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test413()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data413)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data413[i].x), Tp(data413[i].y),
		     Tp(data413[i].z), Tp(data413[i].p));
	const Tp f0 = data413[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data414[] = {
  { 0.52312181621417730, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.37846429199415910, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.30644731639234468, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26118550757927134, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.22940023615486640, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20554851955254339, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18683591987251377, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17167672279762300, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15909423614965643, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14844937809139419, 2.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test414()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data414)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data414[i].x), Tp(data414[i].y),
		     Tp(data414[i].z), Tp(data414[i].p));
	const Tp f0 = data414[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data415[] = {
  { 2.0223240853837132, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2620302587414380, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.94525685307389129, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.76528469292686963, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.64733799690034244, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.56329514636044120, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.50000354754059428, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.45042187914510734, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.41041350961801143, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.37737682387263155, 2.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test415()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data415)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data415[i].x), Tp(data415[i].y),
		     Tp(data415[i].z), Tp(data415[i].p));
	const Tp f0 = data415[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data416[] = {
  { 1.0287989423954247, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.70894375613893623, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.55771167880702011, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.35642667060665745, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.32062906080557096, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.29201689183182339, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24888391852810277, 2.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test416()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data416)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data416[i].x), Tp(data416[i].y),
		     Tp(data416[i].z), Tp(data416[i].p));
	const Tp f0 = data416[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data417[] = {
  { 0.85021282001266962, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.59647810419029124, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.47402508643691182, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.39864160755780487, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 2.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test417()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data417)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data417[i].x), Tp(data417[i].y),
		     Tp(data417[i].z), Tp(data417[i].p));
	const Tp f0 = data417[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data418[] = {
  { 0.74922683475040364, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.42445824709773294, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.35843536532262715, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.31255150258997216, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27840884573955132, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23039326394783383, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 2.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test418()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data418)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data418[i].x), Tp(data418[i].y),
		     Tp(data418[i].z), Tp(data418[i].p));
	const Tp f0 = data418[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data419[] = {
  { 0.68053628937360033, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.48557509944832966, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.38977119074282268, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33009937700548331, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28848454403954715, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25743278691438753, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23318729602594312, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21362648473259205, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19744909828337603, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18380687608379534, 2.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test419()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data419)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data419[i].x), Tp(data419[i].y),
		     Tp(data419[i].z), Tp(data419[i].p));
	const Tp f0 = data419[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data420[] = {
  { 0.62939232488112540, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.45135370041749034, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.36341838720388592, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.30846026625449768, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27003393558467964, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24130216884246336, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21882966503289619, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20067273908200423, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18563730493485167, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17294384503963564, 2.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test420()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data420)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data420[i].x), Tp(data420[i].y),
		     Tp(data420[i].z), Tp(data420[i].p));
	const Tp f0 = data420[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data421[] = {
  { 0.58917052221542332, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.42417885390038884, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.34237116724926042, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29110791982181122, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.25519306961823912, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22829567980143303, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20722944518300238, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17606375079550210, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16412801715358546, 2.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test421()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data421)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data421[i].x), Tp(data421[i].y),
		     Tp(data421[i].z), Tp(data421[i].p));
	const Tp f0 = data421[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data422[] = {
  { 0.55634601388836458, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16805739868879657, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15674746740407988, 2.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test422()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data422)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data422[i].x), Tp(data422[i].y),
		     Tp(data422[i].z), Tp(data422[i].p));
	const Tp f0 = data422[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data423[] = {
  { 0.52883058269086791, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 2.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test423()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data423)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data423[i].x), Tp(data423[i].y),
		     Tp(data423[i].z), Tp(data423[i].p));
	const Tp f0 = data423[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data424[] = {
  { 0.50529089781331371, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.36676078981792692, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.29754578436895357, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.25394274973962699, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15524361857280369, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 2.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test424()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data424)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data424[i].x), Tp(data424[i].y),
		     Tp(data424[i].z), Tp(data424[i].p));
	const Tp f0 = data424[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data425[] = {
  { 0.48482703260271992, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14005584409361149, 2.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test425()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data425)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data425[i].x), Tp(data425[i].y),
		     Tp(data425[i].z), Tp(data425[i].p));
	const Tp f0 = data425[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data426[] = {
  { 1.8704609344962482, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1712157381568415, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.87910719303703111, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.71283590302652566, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.60370742009775968, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.52585344510508902, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.46716203643476467, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.42114283795319279, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.38397969175995850, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.35327072043236890, 2.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test426()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data426)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data426[i].x), Tp(data426[i].y),
		     Tp(data426[i].z), Tp(data426[i].p));
	const Tp f0 = data426[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data427[] = {
  { 0.95902057408895203, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.66326984938537459, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.43747841423603617, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.25339986965394767, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23498900543731913, 2.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test427()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data427)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data427[i].x), Tp(data427[i].y),
		     Tp(data427[i].z), Tp(data427[i].p));
	const Tp f0 = data427[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data428[] = {
  { 0.79396491050461349, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544403, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041412, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715422, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966175, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899069, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816771, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956781, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401630, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952442, 2.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test428()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data428)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data428[i].x), Tp(data428[i].y),
		     Tp(data428[i].z), Tp(data428[i].p));
	const Tp f0 = data428[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data429[] = {
  { 0.70041148675726506, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.49826857439462924, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29490651327180767, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23807328426215396, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21799667889562621, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18742062046073624, 2.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test429()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data429)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data429[i].x), Tp(data429[i].y),
		     Tp(data429[i].z), Tp(data429[i].p));
	const Tp f0 = data429[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data430[] = {
  { 0.63667820767968997, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.45605412304303605, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36695743115432478, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.31131968298304535, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.27244173583397985, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.24338603781834769, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22066891492755408, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20232025929616423, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18713024484317300, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17430935681084583, 2.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test430()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data430)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data430[i].x), Tp(data430[i].y),
		     Tp(data430[i].z), Tp(data430[i].p));
	const Tp f0 = data430[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data431[] = {
  { 0.58917052221542332, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.42417885390038884, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.34237116724926037, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29110791982181122, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25519306961823912, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22829567980143303, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20722944518300232, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17606375079550210, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16412801715358546, 2.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test431()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data431)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data431[i].x), Tp(data431[i].y),
		     Tp(data431[i].z), Tp(data431[i].p));
	const Tp f0 = data431[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data432[] = {
  { 0.55177429367339292, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.39884081752373352, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.32271298108341179, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27488121754848066, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24130216884246339, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21611278181903348, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19635716122332902, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18035802420177466, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16708235029898111, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15585426408892872, 2.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test432()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data432)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data432[i].x), Tp(data432[i].y),
		     Tp(data432[i].z), Tp(data432[i].p));
	const Tp f0 = data432[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data433[] = {
  { 0.52123270285008805, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18727903597199325, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14891982596679978, 2.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test433()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data433)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data433[i].x), Tp(data433[i].y),
		     Tp(data433[i].z), Tp(data433[i].p));
	const Tp f0 = data433[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data434[] = {
  { 0.49561461055199763, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853897, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464495, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468991, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261051, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668173, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 2.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test434()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data434)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data434[i].x), Tp(data434[i].y),
		     Tp(data434[i].z), Tp(data434[i].p));
	const Tp f0 = data434[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data435[] = {
  { 0.47368603656088509, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24006912379411066, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 2.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test435()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data435)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data435[i].x), Tp(data435[i].y),
		     Tp(data435[i].z), Tp(data435[i].p));
	const Tp f0 = data435[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data436[] = {
  { 0.45461355226272843, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 2.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test436()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data436)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data436[i].x), Tp(data436[i].y),
		     Tp(data436[i].z), Tp(data436[i].p));
	const Tp f0 = data436[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data437[] = {
  { 1.7494459255069015, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0984204846455190, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.82589393219588059, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.67053815267088079, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.56845382600498828, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.49555418083598146, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.44055184461906965, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.39739383469208367, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.36251880611170789, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.33368392213839787, 2.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test437()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data437)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data437[i].x), Tp(data437[i].y),
		     Tp(data437[i].z), Tp(data437[i].p));
	const Tp f0 = data437[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data438[] = {
  { 0.90250310497734676, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.49450910722023028, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35905468421976594, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 2.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test438()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data438)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data438[i].x), Tp(data438[i].y),
		     Tp(data438[i].z), Tp(data438[i].p));
	const Tp f0 = data438[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data439[] = {
  { 0.74825358602755421, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.31004190937108111, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27602345440640169, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22824778080580604, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 2.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test439()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data439)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data439[i].x), Tp(data439[i].y),
		     Tp(data439[i].z), Tp(data439[i].p));
	const Tp f0 = data439[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data440[] = {
  { 0.66066422494478227, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.47145480245855775, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.32064732908289950, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20767475637939456, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19197970874038126, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 2.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test440()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data440)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data440[i].x), Tp(data440[i].y),
		     Tp(data440[i].z), Tp(data440[i].p));
	const Tp f0 = data440[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data441[] = {
  { 0.60092072346235836, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.43180232287005510, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34812988078697865, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29577123669941352, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25912646698528391, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.23170439652324634, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.21024125233844609, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19288923355417037, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17851251804571255, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16636924381727244, 2.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test441()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data441)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data441[i].x), Tp(data441[i].y),
		     Tp(data441[i].z), Tp(data441[i].p));
	const Tp f0 = data441[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data442[] = {
  { 0.55634601388836458, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16805739868879657, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15674746740407988, 2.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test442()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data442)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data442[i].x), Tp(data442[i].y),
		     Tp(data442[i].z), Tp(data442[i].p));
	const Tp f0 = data442[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data443[] = {
  { 0.52123270285008805, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18727903597199327, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14891982596679981, 2.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test443()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data443)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data443[i].x), Tp(data443[i].y),
		     Tp(data443[i].z), Tp(data443[i].p));
	const Tp f0 = data443[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data444[] = {
  { 0.49253810493171546, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35834408626365266, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.29112402611839111, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24870653210676338, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21882966503289622, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19635716122332902, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17869249731228154, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16435888718022026, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15244494483680715, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14235329837746191, 2.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test444()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data444)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data444[i].x), Tp(data444[i].y),
		     Tp(data444[i].z), Tp(data444[i].p));
	const Tp f0 = data444[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data445[] = {
  { 0.46845679275670005, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 2.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test445()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data445)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data445[i].x), Tp(data445[i].y),
		     Tp(data445[i].z), Tp(data445[i].p));
	const Tp f0 = data445[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data446[] = {
  { 0.44783441985639022, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 2.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test446()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data446)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data446[i].x), Tp(data446[i].y),
		     Tp(data446[i].z), Tp(data446[i].p));
	const Tp f0 = data446[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data447[] = {
  { 0.42989092919613203, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.31497844547758397, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19434555902721884, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17475989052454721, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15932635698806283, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 2.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test447()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data447)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data447[i].x), Tp(data447[i].y),
		     Tp(data447[i].z), Tp(data447[i].p));
	const Tp f0 = data447[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data448[] = {
  { 1.6499366323032025, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0382700842969894, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.78179340212247594, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.63540981359548432, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.53912823334761450, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.47031702519777602, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.41836350380340265, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.37757309719027227, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.34459354439341267, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.31731266011780507, 2.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test448()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data448)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data448[i].x), Tp(data448[i].y),
		     Tp(data448[i].z), Tp(data448[i].p));
	const Tp f0 = data448[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data449[] = {
  { 0.85542246869229122, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.21370251886958533, 2.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test449()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data449)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data449[i].x), Tp(data449[i].y),
		     Tp(data449[i].z), Tp(data449[i].p));
	const Tp f0 = data449[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data450[] = {
  { 0.71006966150449546, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611403, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642271, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976946, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 2.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test450()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data450)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data450[i].x), Tp(data450[i].y),
		     Tp(data450[i].z), Tp(data450[i].p));
	const Tp f0 = data450[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data451[] = {
  { 0.62740921358182578, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21692456200648208, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19887612892179199, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 2.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test451()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data451)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data451[i].x), Tp(data451[i].y),
		     Tp(data451[i].z), Tp(data451[i].p));
	const Tp f0 = data451[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data452[] = {
  { 0.57097108596555701, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.41136226848214741, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.33220110465216673, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.28258106989482712, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24780725960056424, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22175728741852704, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20134956551950131, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18483786021034576, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17114792855430458, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15957763113942439, 2.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test452()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data452)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data452[i].x), Tp(data452[i].y),
		     Tp(data452[i].z), Tp(data452[i].p));
	const Tp f0 = data452[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data453[] = {
  { 0.52883058269086791, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 2.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test453()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data453)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data453[i].x), Tp(data453[i].y),
		     Tp(data453[i].z), Tp(data453[i].p));
	const Tp f0 = data453[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data454[] = {
  { 0.49561461055199763, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853897, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464495, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468991, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261051, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668173, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 2.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test454()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data454)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data454[i].x), Tp(data454[i].y),
		     Tp(data454[i].z), Tp(data454[i].p));
	const Tp f0 = data454[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data455[] = {
  { 0.46845679275670005, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 2.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test455()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data455)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data455[i].x), Tp(data455[i].y),
		     Tp(data455[i].z), Tp(data455[i].p));
	const Tp f0 = data455[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data456[] = {
  { 0.44565535953864488, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.32601321974974723, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26577099833075696, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22761962087512766, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20067273908200425, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18035802420177471, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16435888718022032, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15135523250739152, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14053100249339395, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13135050397608272, 2.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test456()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data456)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data456[i].x), Tp(data456[i].y),
		     Tp(data456[i].z), Tp(data456[i].p));
	const Tp f0 = data456[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data457[] = {
  { 0.42612170945034850, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.31245388549811498, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14582603024683105, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 2.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test457()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data457)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data457[i].x), Tp(data457[i].y),
		     Tp(data457[i].z), Tp(data457[i].p));
	const Tp f0 = data457[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data458[] = {
  { 0.40911989618188382, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646452, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051629, 2.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test458()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data458)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data458[i].x), Tp(data458[i].y),
		     Tp(data458[i].z), Tp(data458[i].p));
	const Tp f0 = data458[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data459[] = {
  { 1.5661537714260798, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.98741765401777437, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.74441545361230743, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.60558237286346228, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.51419308374047967, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.44883400631269621, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.39945803864977009, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.36067143569402699, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.32929762047761185, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.30333429561267361, 2.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test459()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data459)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data459[i].x), Tp(data459[i].y),
		     Tp(data459[i].z), Tp(data459[i].p));
	const Tp f0 = data459[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data460[] = {
  { 0.81535812729905288, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.29123776130118406, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20524892428816363, 2.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test460()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data460)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data460[i].x), Tp(data460[i].y),
		     Tp(data460[i].z), Tp(data460[i].p));
	const Tp f0 = data460[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data461[] = {
  { 0.67750062446352011, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 2.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test461()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data461)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data461[i].x), Tp(data461[i].y),
		     Tp(data461[i].z), Tp(data461[i].p));
	const Tp f0 = data461[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data462[] = {
  { 0.59900577193982218, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19124047998168786, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17695302442341890, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 2.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test462()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data462)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data462[i].x), Tp(data462[i].y),
		     Tp(data462[i].z), Tp(data462[i].p));
	const Tp f0 = data462[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data463[] = {
  { 0.54536685068321555, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.39379555061681243, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.31846715449229557, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.27118200606113163, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.23800758472499209, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.21313305493648360, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.19363109316852323, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17784163491549257, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16474276906428434, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15366616394914162, 2.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test463()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data463)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data463[i].x), Tp(data463[i].y),
		     Tp(data463[i].z), Tp(data463[i].p));
	const Tp f0 = data463[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data464[] = {
  { 0.50529089781331371, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.36676078981792692, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.29754578436895351, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.25394274973962694, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15524361857280369, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 2.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test464()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data464)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data464[i].x), Tp(data464[i].y),
		     Tp(data464[i].z), Tp(data464[i].p));
	const Tp f0 = data464[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data465[] = {
  { 0.47368603656088509, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24006912379411066, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 2.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test465()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data465)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data465[i].x), Tp(data465[i].y),
		     Tp(data465[i].z), Tp(data465[i].p));
	const Tp f0 = data465[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data466[] = {
  { 0.44783441985639022, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 2.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test466()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data466)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data466[i].x), Tp(data466[i].y),
		     Tp(data466[i].z), Tp(data466[i].p));
	const Tp f0 = data466[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data467[] = {
  { 0.42612170945034850, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.31245388549811498, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14582603024683105, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 2.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test467()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data467)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data467[i].x), Tp(data467[i].y),
		     Tp(data467[i].z), Tp(data467[i].p));
	const Tp f0 = data467[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data468[] = {
  { 0.40751481490798841, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.29951576014169679, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.24489766569119636, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21020189719878088, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18563730493485167, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16708235029898105, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15244494483680712, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14053100249339395, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13060131179612539, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12217000545877148, 2.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test468()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data468)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data468[i].x), Tp(data468[i].y),
		     Tp(data468[i].z), Tp(data468[i].p));
	const Tp f0 = data468[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data469[] = {
  { 0.39131506781838787, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.20271656184114498, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17916302942021570, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16135668036713785, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14729969321580355, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13585100391959681, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12630379536276651, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 2.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test469()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data469)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data469[i].x), Tp(data469[i].y),
		     Tp(data469[i].z), Tp(data469[i].p));
	const Tp f0 = data469[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data470[] = {
  { 1.4942973790551630, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.94365001435344487, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.71217440333325732, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.57981347206667322, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.49262440117297451, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.43023294452768129, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38307518584806638, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34601465156302741, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31602515192876895, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.29119853301023979, 2.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test470()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data470)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data470[i].x), Tp(data470[i].y),
		     Tp(data470[i].z), Tp(data470[i].p));
	const Tp f0 = data470[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data471[] = {
  { 0.78068845414522159, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.54494833083219296, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43220566332383353, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36312278662905817, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31549408045108390, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28026194988618314, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21298191526646917, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19782954572559394, 2.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test471()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data471)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data471[i].x), Tp(data471[i].y),
		     Tp(data471[i].z), Tp(data471[i].p));
	const Tp f0 = data471[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data472[] = {
  { 0.64926076968466351, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027556, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 2.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test472()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data472)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data472[i].x), Tp(data472[i].y),
		     Tp(data472[i].z), Tp(data472[i].p));
	const Tp f0 = data472[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data473[] = {
  { 0.57434886336852520, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 2.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test473()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data473)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data473[i].x), Tp(data473[i].y),
		     Tp(data473[i].z), Tp(data473[i].p));
	const Tp f0 = data473[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data474[] = {
  { 0.52312181621417742, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.37846429199415910, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.30644731639234468, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26118550757927134, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22940023615486640, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20554851955254339, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18683591987251377, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17167672279762300, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15909423614965643, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14844937809139419, 2.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test474()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data474)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data474[i].x), Tp(data474[i].y),
		     Tp(data474[i].z), Tp(data474[i].p));
	const Tp f0 = data474[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data475[] = {
  { 0.48482703260271992, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14005584409361149, 2.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test475()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data475)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data475[i].x), Tp(data475[i].y),
		     Tp(data475[i].z), Tp(data475[i].p));
	const Tp f0 = data475[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data476[] = {
  { 0.45461355226272843, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 2.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test476()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data476)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data476[i].x), Tp(data476[i].y),
		     Tp(data476[i].z), Tp(data476[i].p));
	const Tp f0 = data476[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data477[] = {
  { 0.42989092919613203, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31497844547758397, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19434555902721884, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17475989052454724, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15932635698806283, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 2.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test477()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data477)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data477[i].x), Tp(data477[i].y),
		     Tp(data477[i].z), Tp(data477[i].p));
	const Tp f0 = data477[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data478[] = {
  { 0.40911989618188382, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646452, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051629, 2.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test478()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data478)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data478[i].x), Tp(data478[i].y),
		     Tp(data478[i].z), Tp(data478[i].p));
	const Tp f0 = data478[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data479[] = {
  { 0.39131506781838787, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20271656184114498, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17916302942021570, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16135668036713785, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14729969321580355, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13585100391959681, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12630379536276651, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 2.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test479()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data479)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data479[i].x), Tp(data479[i].y),
		     Tp(data479[i].z), Tp(data479[i].p));
	const Tp f0 = data479[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data480[] = {
  { 0.37580983608029783, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.27734754080633112, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22736514280085002, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19552991524211258, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17294384503963564, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15585426408892872, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14235329837746191, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13135050397608269, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12217000545877146, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11436707673490792, 2.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test480()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data480)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data480[i].x), Tp(data480[i].y),
		     Tp(data480[i].z), Tp(data480[i].p));
	const Tp f0 = data480[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data481[] = {
  { 3.4486955468275755, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 2.0828351548210402, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.5302303306837042, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.2222853262837821, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 1.0233592856949612, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.88322736655512224, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.77868739473107906, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.69744501354206045, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.63234093582850048, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.57890711567971709, 2.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test481()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data481)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data481[i].x), Tp(data481[i].y),
		     Tp(data481[i].z), Tp(data481[i].p));
	const Tp f0 = data481[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data482[] = {
  { 2.6690452968644154, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.6399601516866462, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.2168825302615167, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.97867722604046825, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.82363382945246122, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.71376503106635869, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.63140333592040898, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.56713505671041076, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.51545252951255904, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.47290441537711830, 2.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test482()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data482)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data482[i].x), Tp(data482[i].y),
		     Tp(data482[i].z), Tp(data482[i].p));
	const Tp f0 = data482[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data483[] = {
  { 2.2746524584352801, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.4107469213791768, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 1.0526606192605987, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.84993946308309498, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.71744598019963979, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.62324623829372461, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.55243690605962292, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.49705410714957943, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.45242676457608633, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.41562134229791425, 2.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test483()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data483)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data483[i].x), Tp(data483[i].y),
		     Tp(data483[i].z), Tp(data483[i].p));
	const Tp f0 = data483[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data484[] = {
  { 2.0223240853837128, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.2620302587414380, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.94525685307389129, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.76528469292686951, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.64733799690034244, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.56329514636044120, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.50000354754059428, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.45042187914510734, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.41041350961801137, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.37737682387263155, 2.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test484()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data484)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data484[i].x), Tp(data484[i].y),
		     Tp(data484[i].z), Tp(data484[i].p));
	const Tp f0 = data484[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data485[] = {
  { 1.8419739637493595, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.1546750004305728, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.86727301074676189, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.70357144775988856, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.59607529594776598, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.51935486677500731, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.46149861719475932, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.41612132636432358, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.37946750532982354, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.34917282417064494, 2.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test485()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data485)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data485[i].x), Tp(data485[i].y),
		     Tp(data485[i].z), Tp(data485[i].p));
	const Tp f0 = data485[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data486[] = {
  { 1.7043236003585076, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 1.0721136179409319, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.80702834884152463, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.65574554034166033, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.55625315555895660, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.48515600929445024, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.43148323179012710, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.38934811405271569, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.35528537165682028, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.32711167870369112, 2.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test486()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data486)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data486[i].x), Tp(data486[i].y),
		     Tp(data486[i].z), Tp(data486[i].p));
	const Tp f0 = data486[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data487[] = {
  { 1.5945685435385657, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 1.0058834554386262, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.75852330711630256, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.61713961555604724, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.52404456072773664, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.45745191625471432, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.40713640362133918, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.36760719569645850, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.33562984983181904, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.30916523010360170, 2.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test487()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data487)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data487[i].x), Tp(data487[i].y),
		     Tp(data487[i].z), Tp(data487[i].p));
	const Tp f0 = data487[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data488[] = {
  { 1.5042726072947898, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.95112253927232826, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.71829528725355785, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.58505178588131612, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.49722921558246908, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.43435581561273917, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.38681653176455949, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.34944504467543969, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.31919639053452625, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.29414992917905991, 2.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test488()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data488)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data488[i].x), Tp(data488[i].y),
		     Tp(data488[i].z), Tp(data488[i].p));
	const Tp f0 = data488[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data489[] = {
  { 1.4282140314406910, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.90480084152367868, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.68417801528911082, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.55778729967423868, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.47441179365269026, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.41468023686761379, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.36948923018706037, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.33394489335839761, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.30516151808247988, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.28131815919983078, 2.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test489()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data489)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data489[i].x), Tp(data489[i].y),
		     Tp(data489[i].z), Tp(data489[i].p));
	const Tp f0 = data489[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data490[] = {
  { 1.3629576598727582, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.86491339529509692, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.65473326650829555, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.53421842599735769, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.45466225176639130, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.39763264972151718, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.35446341401990045, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.32049370748236927, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.29297417862271818, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.27016931577362679, 2.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test490()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data490)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data490[i].x), Tp(data490[i].y),
		     Tp(data490[i].z), Tp(data490[i].p));
	const Tp f0 = data490[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data491[] = {
  { 3.4486955468275755, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 2.0828351548210402, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.5302303306837042, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.2222853262837821, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 1.0233592856949612, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.88322736655512224, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.77868739473107906, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.69744501354206045, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.63234093582850048, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.57890711567971709, 2.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test491()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data491)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data491[i].x), Tp(data491[i].y),
		     Tp(data491[i].z), Tp(data491[i].p));
	const Tp f0 = data491[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data492[] = {
  { 1.6061049195809842, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.0704586692241420, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.82591883868898919, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.68053628937360044, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.58252335304008718, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.51129488838991533, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.45686179269977184, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.41373068672159574, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.37860679494221028, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.34938334718039704, 2.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test492()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data492)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data492[i].x), Tp(data492[i].y),
		     Tp(data492[i].z), Tp(data492[i].p));
	const Tp f0 = data492[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data493[] = {
  { 1.3056198205930982, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.88534802192886553, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.68984446400997934, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.49231373047778387, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.38892581349755673, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.35318003278354582, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.32396243335749914, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 2.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test493()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data493)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data493[i].x), Tp(data493[i].y),
		     Tp(data493[i].z), Tp(data493[i].p));
	const Tp f0 = data493[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data494[] = {
  { 1.1398486474364056, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.50932051572295522, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.31723583109620407, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 2.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test494()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data494)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data494[i].x), Tp(data494[i].y),
		     Tp(data494[i].z), Tp(data494[i].p));
	const Tp f0 = data494[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data495[] = {
  { 1.0287989423954245, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.70894375613893612, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.55771167880701999, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.35642667060665734, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.32062906080557085, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.29201689183182328, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.24888391852810274, 2.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test495()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data495)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data495[i].x), Tp(data495[i].y),
		     Tp(data495[i].z), Tp(data495[i].p));
	const Tp f0 = data495[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data496[] = {
  { 0.94701179435835359, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.65569673681079788, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.51733275597094996, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.43296512384230063, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.37502224024468017, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.33229683789018527, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.29925520618337775, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.27281052919218191, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.25108898619570791, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.23287985082087528, 2.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test496()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data496)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data496[i].x), Tp(data496[i].y),
		     Tp(data496[i].z), Tp(data496[i].p));
	const Tp f0 = data496[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data497[] = {
  { 0.88322637190106779, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.40691664717747028, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.31304670459383982, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.25743679052360119, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.22003776396270477, 2.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test497()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data497)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data497[i].x), Tp(data497[i].y),
		     Tp(data497[i].z), Tp(data497[i].p));
	const Tp f0 = data497[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data498[] = {
  { 0.83152026568913140, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.45921578556213022, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.33470600764004349, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 2.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test498()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data498)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data498[i].x), Tp(data498[i].y),
		     Tp(data498[i].z), Tp(data498[i].p));
	const Tp f0 = data498[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data499[] = {
  { 0.78841770016803325, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.55092905081432419, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.43718780399449225, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.36743325468131172, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.31931301755908931, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.28370170658624400, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.25607743108839104, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.23391006877275153, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.21565961679522072, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.20032866163672841, 2.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test499()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data499)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data499[i].x), Tp(data499[i].y),
		     Tp(data499[i].z), Tp(data499[i].p));
	const Tp f0 = data499[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data500[] = {
  { 0.75171669684617670, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.24573998678755610, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 2.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test500()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data500)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data500[i].x), Tp(data500[i].y),
		     Tp(data500[i].z), Tp(data500[i].p));
	const Tp f0 = data500[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data501[] = {
  { 0.71994094443495504, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.50506385303798651, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.33832764042495689, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.29445551387110397, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.23667971146773958, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.21638788243953924, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 2.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test501()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data501)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data501[i].x), Tp(data501[i].y),
		     Tp(data501[i].z), Tp(data501[i].p));
	const Tp f0 = data501[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data502[] = {
  { 2.6690452968644154, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.6399601516866462, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.2168825302615167, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.97867722604046825, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.82363382945246122, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.71376503106635869, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.63140333592040898, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.56713505671041076, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.51545252951255904, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.47290441537711830, 2.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test502()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data502)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data502[i].x), Tp(data502[i].y),
		     Tp(data502[i].z), Tp(data502[i].p));
	const Tp f0 = data502[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data503[] = {
  { 1.3056198205930982, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.88534802192886553, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.68984446400997934, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.57225449587902955, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.49231373047778387, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.43384289426194078, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.38892581349755673, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.35318003278354582, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.32396243335749914, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.29957487754046086, 2.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test503()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data503)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data503[i].x), Tp(data503[i].y),
		     Tp(data503[i].z), Tp(data503[i].p));
	const Tp f0 = data503[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data504[] = {
  { 1.0704586692241420, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.73874417422781258, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.58137900815383625, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.48557509944832955, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.41987824764540205, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.37150394318135854, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.33414241739489770, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.30427602297117118, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27977081290193417, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25924893192492893, 2.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test504()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data504)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data504[i].x), Tp(data504[i].y),
		     Tp(data504[i].z), Tp(data504[i].p));
	const Tp f0 = data504[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data505[] = {
  { 0.93899195242353384, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.65441549744542593, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.43439295244732351, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.33419058378657973, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 2.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test505()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data505)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data505[i].x), Tp(data505[i].y),
		     Tp(data505[i].z), Tp(data505[i].p));
	const Tp f0 = data505[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data506[] = {
  { 0.85021282001266962, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.59647810419029135, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.47402508643691188, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.39864160755780492, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 2.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test506()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data506)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data506[i].x), Tp(data506[i].y),
		     Tp(data506[i].z), Tp(data506[i].p));
	const Tp f0 = data506[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data507[] = {
  { 0.78445730739827779, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.55304211597011477, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.44082242805648197, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.37151532829503464, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.32347894201494254, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.28780849895341543, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.26006627614063610, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23775830787373983, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21936122444907366, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20388549974147677, 2.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test507()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data507)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data507[i].x), Tp(data507[i].y),
		     Tp(data507[i].z), Tp(data507[i].p));
	const Tp f0 = data507[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data508[] = {
  { 0.73295433505383023, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.41443161796397032, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.30504032772116141, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.27169889878937054, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.24573471120867049, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.19305357639153187, 2.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test508()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data508)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data508[i].x), Tp(data508[i].y),
		     Tp(data508[i].z), Tp(data508[i].p));
	const Tp f0 = data508[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data509[] = {
  { 0.69106175006440429, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.33200250540570841, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28978118810962389, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25834168945570551, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21408553360131061, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19777145992322867, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 2.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test509()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data509)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data509[i].x), Tp(data509[i].y),
		     Tp(data509[i].z), Tp(data509[i].p));
	const Tp f0 = data509[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data510[] = {
  { 0.65604142963415046, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.37437691626847658, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.24699601870248775, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.20493348073535311, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 2.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test510()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data510)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data510[i].x), Tp(data510[i].y),
		     Tp(data510[i].z), Tp(data510[i].p));
	const Tp f0 = data510[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data511[] = {
  { 0.62615150586331814, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.35859920693491243, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.30383610797211447, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.26566096411271745, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.23717997682292769, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19699820373548482, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.18215617344720569, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 2.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test511()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data511)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data511[i].x), Tp(data511[i].y),
		     Tp(data511[i].z), Tp(data511[i].p));
	const Tp f0 = data511[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data512[] = {
  { 0.60022003632971521, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.34481369816852919, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.29241747858151074, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22856307759848532, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20723641412862279, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17577045613521003, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16374710393804567, 2.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test512()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data512)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data512[i].x), Tp(data512[i].y),
		     Tp(data512[i].z), Tp(data512[i].p));
	const Tp f0 = data512[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data513[] = {
  { 2.2746524584352801, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.4107469213791768, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0526606192605987, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.84993946308309498, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.71744598019963979, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.62324623829372461, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.55243690605962292, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.49705410714957943, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.45242676457608633, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.41562134229791425, 2.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test513()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data513)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data513[i].x), Tp(data513[i].y),
		     Tp(data513[i].z), Tp(data513[i].p));
	const Tp f0 = data513[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data514[] = {
  { 1.1398486474364056, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.78040909289600413, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.61154086207362235, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.50932051572295534, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.43950072051063654, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.38824320674831603, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.34874765449982387, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.31723583109620407, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.29142208272275283, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.26983404816332202, 2.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test514()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data514)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data514[i].x), Tp(data514[i].y),
		     Tp(data514[i].z), Tp(data514[i].p));
	const Tp f0 = data514[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data515[] = {
  { 0.93899195242353384, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.65441549744542593, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.51799997289580957, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.43439295244732362, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.37677786814173148, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33419058378657973, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.30119474570559962, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27474811414813799, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25299920014196808, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23474919222406260, 2.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test515()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data515)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data515[i].x), Tp(data515[i].y),
		     Tp(data515[i].z), Tp(data515[i].p));
	const Tp f0 = data515[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data516[] = {
  { 0.82591883868898930, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.58137900815383636, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.46289159833808335, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.38977119074282274, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.33912786739118500, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.30154558819053262, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27233326970516308, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.24885542593463819, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.22950278035995059, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21323034960651352, 2.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test516()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data516)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data516[i].x), Tp(data516[i].y),
		     Tp(data516[i].z), Tp(data516[i].p));
	const Tp f0 = data516[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data517[] = {
  { 0.74922683475040364, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.42445824709773305, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.35843536532262715, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31255150258997205, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.27840884573955127, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23039326394783377, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 2.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test517()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data517)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data517[i].x), Tp(data517[i].y),
		     Tp(data517[i].z), Tp(data517[i].p));
	const Tp f0 = data517[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data518[] = {
  { 0.69224494766745892, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.49302131290085854, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.39533213377632948, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33456772014466868, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.29223188166847097, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.26066572752810524, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23603345013807692, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21617055422466747, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19975034455016186, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18590846707646833, 2.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test518()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data518)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data518[i].x), Tp(data518[i].y),
		     Tp(data518[i].z), Tp(data518[i].p));
	const Tp f0 = data518[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data519[] = {
  { 0.64750534425809492, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.37211529941965249, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31546726459173990, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27592200955549134, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24638988202477219, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22331431335011959, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18927032698158600, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17626418303399385, 2.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test519()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data519)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data519[i].x), Tp(data519[i].y),
		     Tp(data519[i].z), Tp(data519[i].p));
	const Tp f0 = data519[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data520[] = {
  { 0.61104264021947707, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903687, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898373, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998317, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970158, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264370, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459160, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830260, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388275, 2.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test520()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data520)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data520[i].x), Tp(data520[i].y),
		     Tp(data520[i].z), Tp(data520[i].p));
	const Tp f0 = data520[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data521[] = {
  { 0.58051166300235479, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.41745779321617110, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.33676551537135985, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28625539161389374, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.25089289504482509, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22442219709332997, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20369767690093490, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18693825882529827, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17304901128802955, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16131469056810749, 2.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test521()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data521)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data521[i].x), Tp(data521[i].y),
		     Tp(data521[i].z), Tp(data521[i].p));
	const Tp f0 = data521[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data522[] = {
  { 0.55441718621582214, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101521, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672187, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427746, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369857, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460564, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961032, 2.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test522()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data522)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data522[i].x), Tp(data522[i].y),
		     Tp(data522[i].z), Tp(data522[i].p));
	const Tp f0 = data522[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data523[] = {
  { 0.53175127941998745, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.38398773910410755, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18897040732232548, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 2.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test523()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data523)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data523[i].x), Tp(data523[i].y),
		     Tp(data523[i].z), Tp(data523[i].p));
	const Tp f0 = data523[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data524[] = {
  { 2.0223240853837128, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2620302587414380, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.94525685307389129, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.76528469292686951, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.64733799690034244, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.56329514636044120, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.50000354754059428, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.45042187914510734, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.41041350961801137, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.37737682387263155, 2.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test524()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data524)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data524[i].x), Tp(data524[i].y),
		     Tp(data524[i].z), Tp(data524[i].p));
	const Tp f0 = data524[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data525[] = {
  { 1.0287989423954245, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.70894375613893612, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.55771167880701999, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.46577960132586499, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.40278805237973769, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.35642667060665734, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.32062906080557085, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.29201689183182328, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26854233605838862, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24888391852810274, 2.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test525()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data525)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data525[i].x), Tp(data525[i].y),
		     Tp(data525[i].z), Tp(data525[i].p));
	const Tp f0 = data525[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data526[] = {
  { 0.85021282001266962, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.59647810419029135, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.47402508643691188, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.39864160755780492, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.34652107475177768, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.30789358072290213, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27790049831534036, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.25381615237166466, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23397818955703931, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21730826161734126, 2.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test526()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data526)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data526[i].x), Tp(data526[i].y),
		     Tp(data526[i].z), Tp(data526[i].p));
	const Tp f0 = data526[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data527[] = {
  { 0.74922683475040364, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.53095593143295827, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.42445824709773294, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.35843536532262710, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.31255150258997205, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27840884573955127, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25181069593688449, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23039326394783377, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21271000168938550, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19781978786150781, 2.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test527()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data527)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data527[i].x), Tp(data527[i].y),
		     Tp(data527[i].z), Tp(data527[i].p));
	const Tp f0 = data527[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data528[] = {
  { 0.68053628937360033, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.48557509944832966, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.38977119074282268, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33009937700548331, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28848454403954715, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25743278691438753, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23318729602594312, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21362648473259205, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19744909828337603, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18380687608379534, 2.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test528()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data528)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data528[i].x), Tp(data528[i].y),
		     Tp(data528[i].z), Tp(data528[i].p));
	const Tp f0 = data528[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data529[] = {
  { 0.62939232488112540, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.45135370041749023, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.36341838720388592, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.30846026625449768, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27003393558467964, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24130216884246336, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21882966503289619, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20067273908200423, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18563730493485164, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17294384503963564, 2.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test529()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data529)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data529[i].x), Tp(data529[i].y),
		     Tp(data529[i].z), Tp(data529[i].p));
	const Tp f0 = data529[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data530[] = {
  { 0.58917052221542332, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.42417885390038879, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.34237116724926037, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29110791982181117, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.25519306961823912, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22829567980143298, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20722944518300229, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17606375079550210, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16412801715358541, 2.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test530()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data530)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data530[i].x), Tp(data530[i].y),
		     Tp(data530[i].z), Tp(data530[i].p));
	const Tp f0 = data530[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data531[] = {
  { 0.55634601388836458, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16805739868879660, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15674746740407991, 2.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test531()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data531)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data531[i].x), Tp(data531[i].y),
		     Tp(data531[i].z), Tp(data531[i].p));
	const Tp f0 = data531[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data532[] = {
  { 0.52883058269086791, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 2.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test532()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data532)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data532[i].x), Tp(data532[i].y),
		     Tp(data532[i].z), Tp(data532[i].p));
	const Tp f0 = data532[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data533[] = {
  { 0.50529089781331371, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.36676078981792692, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.29754578436895357, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.25394274973962699, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15524361857280369, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 2.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test533()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data533)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data533[i].x), Tp(data533[i].y),
		     Tp(data533[i].z), Tp(data533[i].p));
	const Tp f0 = data533[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data534[] = {
  { 0.48482703260271992, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14005584409361149, 2.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test534()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data534)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data534[i].x), Tp(data534[i].y),
		     Tp(data534[i].z), Tp(data534[i].p));
	const Tp f0 = data534[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data535[] = {
  { 1.8419739637493595, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1546750004305728, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.86727301074676189, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.70357144775988856, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.59607529594776598, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.51935486677500731, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.46149861719475932, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.41612132636432358, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.37946750532982354, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.34917282417064494, 2.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test535()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data535)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data535[i].x), Tp(data535[i].y),
		     Tp(data535[i].z), Tp(data535[i].p));
	const Tp f0 = data535[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data536[] = {
  { 0.94701179435835359, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.65569673681079788, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.51733275597094996, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.43296512384230063, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.37502224024468017, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33229683789018527, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.29925520618337775, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27281052919218191, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.25108898619570791, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23287985082087528, 2.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test536()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data536)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data536[i].x), Tp(data536[i].y),
		     Tp(data536[i].z), Tp(data536[i].p));
	const Tp f0 = data536[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data537[] = {
  { 0.78445730739827779, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.55304211597011477, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.44082242805648197, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.37151532829503464, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32347894201494254, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.28780849895341543, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.26006627614063610, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.23775830787373983, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.21936122444907366, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20388549974147677, 2.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test537()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data537)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data537[i].x), Tp(data537[i].y),
		     Tp(data537[i].z), Tp(data537[i].p));
	const Tp f0 = data537[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data538[] = {
  { 0.69224494766745892, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.49302131290085854, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.39533213377632948, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.33456772014466868, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29223188166847092, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.26066572752810524, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23603345013807692, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21617055422466747, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19975034455016186, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18590846707646833, 2.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test538()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data538)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data538[i].x), Tp(data538[i].y),
		     Tp(data538[i].z), Tp(data538[i].p));
	const Tp f0 = data538[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data539[] = {
  { 0.62939232488112540, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.45135370041749023, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36341838720388592, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.30846026625449768, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.27003393558467964, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.24130216884246336, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.21882966503289619, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20067273908200423, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18563730493485164, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17294384503963564, 2.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test539()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data539)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data539[i].x), Tp(data539[i].y),
		     Tp(data539[i].z), Tp(data539[i].p));
	const Tp f0 = data539[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data540[] = {
  { 0.58252335304008696, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.41987824764540205, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.33912786739118489, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.28848454403954715, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25298221281347033, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22638102978922789, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20553867201914100, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.18867379829694025, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17469023684433324, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16287134249264495, 2.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test540()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data540)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data540[i].x), Tp(data540[i].y),
		     Tp(data540[i].z), Tp(data540[i].p));
	const Tp f0 = data540[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data541[] = {
  { 0.54561908971826234, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.39484999397335074, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.31969958349415245, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27244173583397996, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.23924499161241772, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21433033980271562, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19478250447434117, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17894643378355898, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16580237209547130, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15468288100621908, 2.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test541()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data541)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data541[i].x), Tp(data541[i].y),
		     Tp(data541[i].z), Tp(data541[i].p));
	const Tp f0 = data541[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data542[] = {
  { 0.51547215934308965, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.37424370424179798, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30362817388613128, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.25912646698528380, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.22781416778739566, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20428232606120886, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18579864501502716, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17081015574379921, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15835903081081967, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14781779918367013, 2.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test542()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data542)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data542[i].x), Tp(data542[i].y),
		     Tp(data542[i].z), Tp(data542[i].p));
	const Tp f0 = data542[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data543[] = {
  { 0.49018012937430860, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.35684393218828631, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.29000418212636542, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.24780725960056421, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.21807596979319691, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19570731523648977, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17812071847896974, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16384806041360628, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15198309579273964, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14193170544719641, 2.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test543()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data543)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data543[i].x), Tp(data543[i].y),
		     Tp(data543[i].z), Tp(data543[i].p));
	const Tp f0 = data543[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data544[] = {
  { 0.46852703419365949, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.34186622865287225, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.27823736960864393, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.23800758472499209, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.20962942990006528, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18825852514797531, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17144284739028876, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15778631831232603, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14642656514910740, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13679787979397154, 2.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test544()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data544)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data544[i].x), Tp(data544[i].y),
		     Tp(data544[i].z), Tp(data544[i].p));
	const Tp f0 = data544[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data545[] = {
  { 0.44969142119934952, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.32877627338106152, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.26792377627360542, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.22940023615486632, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20219855406062479, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18169680295022042, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16555376173133748, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15243555167854184, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14151773614835392, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13225920647869971, 2.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test545()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data545)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data545[i].x), Tp(data545[i].y),
		     Tp(data545[i].z), Tp(data545[i].p));
	const Tp f0 = data545[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data546[] = {
  { 1.7043236003585076, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0721136179409319, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.80702834884152463, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.65574554034166033, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.55625315555895649, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.48515600929445024, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.43148323179012704, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.38934811405271569, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.35528537165682028, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.32711167870369112, 2.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test546()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data546)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data546[i].x), Tp(data546[i].y),
		     Tp(data546[i].z), Tp(data546[i].p));
	const Tp f0 = data546[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data547[] = {
  { 0.88322637190106779, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.40691664717747028, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31304670459383982, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25743679052360119, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22003776396270477, 2.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test547()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data547)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data547[i].x), Tp(data547[i].y),
		     Tp(data547[i].z), Tp(data547[i].p));
	const Tp f0 = data547[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data548[] = {
  { 0.73295433505383023, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.41443161796397043, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.30504032772116141, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27169889878937054, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24573471120867060, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19305357639153189, 2.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test548()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data548)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data548[i].x), Tp(data548[i].y),
		     Tp(data548[i].z), Tp(data548[i].p));
	const Tp f0 = data548[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data549[] = {
  { 0.64750534425809492, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37211529941965249, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.31546726459173990, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.27592200955549134, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.24638988202477219, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22331431335011959, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18927032698158600, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17626418303399385, 2.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test549()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data549)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data549[i].x), Tp(data549[i].y),
		     Tp(data549[i].z), Tp(data549[i].p));
	const Tp f0 = data549[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data550[] = {
  { 0.58917052221542332, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.42417885390038879, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34237116724926037, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29110791982181117, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25519306961823912, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22829567980143298, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20722944518300229, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17606375079550210, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16412801715358541, 2.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test550()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data550)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data550[i].x), Tp(data550[i].y),
		     Tp(data550[i].z), Tp(data550[i].p));
	const Tp f0 = data550[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data551[] = {
  { 0.54561908971826234, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.39484999397335074, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31969958349415245, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27244173583397996, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23924499161241772, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21433033980271562, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19478250447434117, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17894643378355898, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16580237209547130, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15468288100621908, 2.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test551()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data551)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data551[i].x), Tp(data551[i].y),
		     Tp(data551[i].z), Tp(data551[i].p));
	const Tp f0 = data551[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data552[] = {
  { 0.51129488838991544, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37150394318135865, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30154558819053268, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.25743278691438759, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22638102978922792, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20303725112222398, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18469631424905425, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16982018255079651, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15745997252936839, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14699392066849923, 2.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test552()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data552)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data552[i].x), Tp(data552[i].y),
		     Tp(data552[i].z), Tp(data552[i].p));
	const Tp f0 = data552[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data553[] = {
  { 0.48323391967720530, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.28651424322664976, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24496338004432697, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16217834559733857, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15046566853868037, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14054033019188908, 2.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test553()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data553)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data553[i].x), Tp(data553[i].y),
		     Tp(data553[i].z), Tp(data553[i].p));
	const Tp f0 = data553[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data554[] = {
  { 0.45967650472366151, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18555961194525217, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 2.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test554()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data554)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data554[i].x), Tp(data554[i].y),
		     Tp(data554[i].z), Tp(data554[i].p));
	const Tp f0 = data554[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data555[] = {
  { 0.43949703921614330, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32200691636610917, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26274026800952882, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22516306783226767, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17856025043066376, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16276980988993642, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14993007047678014, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 2.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test555()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data555)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data555[i].x), Tp(data555[i].y),
		     Tp(data555[i].z), Tp(data555[i].p));
	const Tp f0 = data555[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data556[] = {
  { 0.42193459245985337, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21708494054221633, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19161797648737755, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14489224956209637, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12588968030716380, 2.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test556()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data556)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data556[i].x), Tp(data556[i].y),
		     Tp(data556[i].z), Tp(data556[i].p));
	const Tp f0 = data556[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data557[] = {
  { 1.5945685435385657, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0058834554386262, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.75852330711630256, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.61713961555604724, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.52404456072773664, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.45745191625471432, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.40713640362133918, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.36760719569645856, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.33562984983181904, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.30916523010360170, 2.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test557()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data557)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data557[i].x), Tp(data557[i].y),
		     Tp(data557[i].z), Tp(data557[i].p));
	const Tp f0 = data557[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data558[] = {
  { 0.83152026568913140, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.45921578556213022, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.33470600764004349, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 2.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test558()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data558)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data558[i].x), Tp(data558[i].y),
		     Tp(data558[i].z), Tp(data558[i].p));
	const Tp f0 = data558[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data559[] = {
  { 0.69106175006440429, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.33200250540570841, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.28978118810962389, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.25834168945570551, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21408553360131061, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.19777145992322867, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 2.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test559()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data559)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data559[i].x), Tp(data559[i].y),
		     Tp(data559[i].z), Tp(data559[i].p));
	const Tp f0 = data559[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data560[] = {
  { 0.61104264021947707, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903687, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898373, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998317, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970158, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264370, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459160, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830260, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388275, 2.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test560()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data560)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data560[i].x), Tp(data560[i].y),
		     Tp(data560[i].z), Tp(data560[i].p));
	const Tp f0 = data560[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data561[] = {
  { 0.55634601388836458, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16805739868879660, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15674746740407991, 2.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test561()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data561)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data561[i].x), Tp(data561[i].y),
		     Tp(data561[i].z), Tp(data561[i].p));
	const Tp f0 = data561[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data562[] = {
  { 0.51547215934308965, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.37424370424179798, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.30362817388613128, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.25912646698528380, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.22781416778739566, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20428232606120886, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18579864501502716, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17081015574379921, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15835903081081967, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14781779918367013, 2.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test562()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data562)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data562[i].x), Tp(data562[i].y),
		     Tp(data562[i].z), Tp(data562[i].p));
	const Tp f0 = data562[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data563[] = {
  { 0.48323391967720530, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.28651424322664976, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24496338004432697, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16217834559733854, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15046566853868037, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14054033019188902, 2.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test563()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data563)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data563[i].x), Tp(data563[i].y),
		     Tp(data563[i].z), Tp(data563[i].p));
	const Tp f0 = data563[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data564[] = {
  { 0.45686179269977184, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.33414241739489764, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27233326970516303, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23318729602594307, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20553867201914111, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18469631424905425, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16828303486200485, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15494405085253882, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14384180166952548, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13442645614164758, 2.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test564()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data564)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data564[i].x), Tp(data564[i].y),
		     Tp(data564[i].z), Tp(data564[i].p));
	const Tp f0 = data564[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data565[] = {
  { 0.43471039393925859, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.31881859381125427, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26029452251677165, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.19689745748590906, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16145178117610376, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14874331417509715, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 2.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test565()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data565)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data565[i].x), Tp(data565[i].y),
		     Tp(data565[i].z), Tp(data565[i].p));
	const Tp f0 = data565[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data566[] = {
  { 0.41572657954600889, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641905, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740301, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491486, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477397, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716277, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786175, 2.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test566()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data566)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data566[i].x), Tp(data566[i].y),
		     Tp(data566[i].z), Tp(data566[i].p));
	const Tp f0 = data566[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data567[] = {
  { 0.39919801690450968, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.29405919660985375, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.20682746443446570, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18278161466609863, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15024802304792703, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13855786767077974, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12880927217128102, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12052772989704706, 2.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test567()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data567)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data567[i].x), Tp(data567[i].y),
		     Tp(data567[i].z), Tp(data567[i].p));
	const Tp f0 = data567[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data568[] = {
  { 1.5042726072947898, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.95112253927232826, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.71829528725355785, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.58505178588131612, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.49722921558246908, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.43435581561273917, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38681653176455949, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34944504467543969, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31919639053452625, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.29414992917905991, 2.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test568()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data568)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data568[i].x), Tp(data568[i].y),
		     Tp(data568[i].z), Tp(data568[i].p));
	const Tp f0 = data568[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data569[] = {
  { 0.78841770016803325, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.55092905081432419, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43718780399449225, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36743325468131172, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31931301755908931, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28370170658624394, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25607743108839104, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23391006877275147, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21565961679522072, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20032866163672841, 2.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test569()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data569)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data569[i].x), Tp(data569[i].y),
		     Tp(data569[i].z), Tp(data569[i].p));
	const Tp f0 = data569[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data570[] = {
  { 0.65604142963415046, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.37437691626847658, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24699601870248775, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20493348073535311, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 2.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test570()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data570)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data570[i].x), Tp(data570[i].y),
		     Tp(data570[i].z), Tp(data570[i].p));
	const Tp f0 = data570[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data571[] = {
  { 0.58051166300235479, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41745779321617110, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33676551537135985, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28625539161389374, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.25089289504482509, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22442219709332997, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20369767690093490, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18693825882529827, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17304901128802955, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16131469056810749, 2.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test571()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data571)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data571[i].x), Tp(data571[i].y),
		     Tp(data571[i].z), Tp(data571[i].p));
	const Tp f0 = data571[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data572[] = {
  { 0.52883058269086791, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 2.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test572()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data572)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data572[i].x), Tp(data572[i].y),
		     Tp(data572[i].z), Tp(data572[i].p));
	const Tp f0 = data572[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data573[] = {
  { 0.49018012937430860, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35684393218828631, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.29000418212636542, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24780725960056421, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21807596979319691, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19570731523648977, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17812071847896974, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16384806041360628, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15198309579273964, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14193170544719641, 2.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test573()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data573)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data573[i].x), Tp(data573[i].y),
		     Tp(data573[i].z), Tp(data573[i].p));
	const Tp f0 = data573[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data574[] = {
  { 0.45967650472366139, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18555961194525214, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 2.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test574()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data574)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data574[i].x), Tp(data574[i].y),
		     Tp(data574[i].z), Tp(data574[i].p));
	const Tp f0 = data574[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data575[] = {
  { 0.43471039393925859, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31881859381125427, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.26029452251677165, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19689745748590906, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16145178117610376, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14874331417509715, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 2.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test575()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data575)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data575[i].x), Tp(data575[i].y),
		     Tp(data575[i].z), Tp(data575[i].p));
	const Tp f0 = data575[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data576[] = {
  { 0.41373068672159558, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30427602297117118, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24885542593463816, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21362648473259205, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18867379829694031, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16982018255079648, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15494405085253882, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14283392536415829, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13273955248651215, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12416765878620190, 2.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test576()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data576)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data576[i].x), Tp(data576[i].y),
		     Tp(data576[i].z), Tp(data576[i].p));
	const Tp f0 = data576[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data577[] = {
  { 0.39574408342862827, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20535667623877887, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18152755381677393, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16350504415852035, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11979089459308076, 2.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test577()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data577)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data577[i].x), Tp(data577[i].y),
		     Tp(data577[i].z), Tp(data577[i].p));
	const Tp f0 = data577[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data578[] = {
  { 0.38007843235600525, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 2.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test578()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data578)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data578[i].x), Tp(data578[i].y),
		     Tp(data578[i].z), Tp(data578[i].p));
	const Tp f0 = data578[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data579[] = {
  { 1.4282140314406910, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.90480084152367868, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.68417801528911082, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.55778729967423868, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.47441179365269026, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.41468023686761379, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.36948923018706037, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.33394489335839761, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.30516151808247988, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.28131815919983078, 2.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test579()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data579)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data579[i].x), Tp(data579[i].y),
		     Tp(data579[i].z), Tp(data579[i].p));
	const Tp f0 = data579[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data580[] = {
  { 0.75171669684617670, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.24573998678755610, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 2.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test580()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data580)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data580[i].x), Tp(data580[i].y),
		     Tp(data580[i].z), Tp(data580[i].p));
	const Tp f0 = data580[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data581[] = {
  { 0.62615150586331814, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.35859920693491243, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.30383610797211447, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.26566096411271745, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.23717997682292769, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19699820373548482, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18215617344720569, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 2.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test581()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data581)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data581[i].x), Tp(data581[i].y),
		     Tp(data581[i].z), Tp(data581[i].p));
	const Tp f0 = data581[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data582[] = {
  { 0.55441718621582214, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101521, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672187, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427746, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369857, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460564, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961032, 2.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test582()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data582)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data582[i].x), Tp(data582[i].y),
		     Tp(data582[i].z), Tp(data582[i].p));
	const Tp f0 = data582[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data583[] = {
  { 0.50529089781331371, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.36676078981792692, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.29754578436895357, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.25394274973962699, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15524361857280369, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 2.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test583()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data583)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data583[i].x), Tp(data583[i].y),
		     Tp(data583[i].z), Tp(data583[i].p));
	const Tp f0 = data583[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data584[] = {
  { 0.46852703419365949, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.34186622865287225, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.27823736960864393, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.23800758472499209, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20962942990006528, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18825852514797531, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17144284739028876, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15778631831232603, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14642656514910740, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13679787979397154, 2.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test584()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data584)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data584[i].x), Tp(data584[i].y),
		     Tp(data584[i].z), Tp(data584[i].p));
	const Tp f0 = data584[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data585[] = {
  { 0.43949703921614330, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.32200691636610917, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.26274026800952882, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.22516306783226767, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17856025043066376, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16276980988993642, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14993007047678014, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 2.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test585()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data585)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data585[i].x), Tp(data585[i].y),
		     Tp(data585[i].z), Tp(data585[i].p));
	const Tp f0 = data585[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data586[] = {
  { 0.41572657954600889, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641905, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740301, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491491, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477397, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716277, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786175, 2.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test586()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data586)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data586[i].x), Tp(data586[i].y),
		     Tp(data586[i].z), Tp(data586[i].p));
	const Tp f0 = data586[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data587[] = {
  { 0.39574408342862827, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.20535667623877890, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18152755381677393, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16350504415852035, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11979089459308076, 2.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test587()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data587)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data587[i].x), Tp(data587[i].y),
		     Tp(data587[i].z), Tp(data587[i].p));
	const Tp f0 = data587[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data588[] = {
  { 0.37860679494221022, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.27977081290193428, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22950278035995050, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19744909828337609, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17469023684433332, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15745997252936839, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14384180166952554, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13273955248651217, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12347339225572537, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11559576508589170, 2.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test588()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data588)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data588[i].x), Tp(data588[i].y),
		     Tp(data588[i].z), Tp(data588[i].p));
	const Tp f0 = data588[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data589[] = {
  { 0.36367653002590999, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.26929396731289790, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 2.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test589()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data589)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data589[i].x), Tp(data589[i].y),
		     Tp(data589[i].z), Tp(data589[i].p));
	const Tp f0 = data589[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data590[] = {
  { 1.3629576598727582, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.86491339529509692, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.65473326650829555, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.53421842599735769, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.45466225176639130, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.39763264972151718, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.35446341401990045, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.32049370748236927, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.29297417862271818, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.27016931577362679, 2.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test590()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data590)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data590[i].x), Tp(data590[i].y),
		     Tp(data590[i].z), Tp(data590[i].p));
	const Tp f0 = data590[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data591[] = {
  { 0.71994094443495504, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.50506385303798640, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.33832764042495689, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.29445551387110391, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.23667971146773953, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21638788243953924, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 2.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test591()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data591)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data591[i].x), Tp(data591[i].y),
		     Tp(data591[i].z), Tp(data591[i].p));
	const Tp f0 = data591[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data592[] = {
  { 0.60022003632971521, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.34481369816852919, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.29241747858151074, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22856307759848532, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20723641412862279, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17577045613521003, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16374710393804567, 2.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test592()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data592)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data592[i].x), Tp(data592[i].y),
		     Tp(data592[i].z), Tp(data592[i].p));
	const Tp f0 = data592[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data593[] = {
  { 0.53175127941998745, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.38398773910410744, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18897040732232553, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 2.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test593()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data593)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data593[i].x), Tp(data593[i].y),
		     Tp(data593[i].z), Tp(data593[i].p));
	const Tp f0 = data593[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data594[] = {
  { 0.48482703260271992, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14005584409361146, 2.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test594()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data594)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data594[i].x), Tp(data594[i].y),
		     Tp(data594[i].z), Tp(data594[i].p));
	const Tp f0 = data594[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data595[] = {
  { 0.44969142119934952, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.32877627338106152, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26792377627360542, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22940023615486632, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20219855406062479, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18169680295022042, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16555376173133748, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15243555167854184, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14151773614835392, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13225920647869971, 2.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test595()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data595)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data595[i].x), Tp(data595[i].y),
		     Tp(data595[i].z), Tp(data595[i].p));
	const Tp f0 = data595[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data596[] = {
  { 0.42193459245985337, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21708494054221628, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19161797648737755, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14489224956209637, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12588968030716380, 2.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test596()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data596)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data596[i].x), Tp(data596[i].y),
		     Tp(data596[i].z), Tp(data596[i].p));
	const Tp f0 = data596[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data597[] = {
  { 0.39919801690450968, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.29405919660985375, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20682746443446570, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18278161466609863, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15024802304792703, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13855786767077974, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12880927217128102, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12052772989704706, 2.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test597()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data597)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data597[i].x), Tp(data597[i].y),
		     Tp(data597[i].z), Tp(data597[i].p));
	const Tp f0 = data597[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data598[] = {
  { 0.38007843235600525, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 2.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test598()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data598)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data598[i].x), Tp(data598[i].y),
		     Tp(data598[i].z), Tp(data598[i].p));
	const Tp f0 = data598[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data599[] = {
  { 0.36367653002590999, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26929396731289784, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 2.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test599()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data599)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data599[i].x), Tp(data599[i].y),
		     Tp(data599[i].z), Tp(data599[i].p));
	const Tp f0 = data599[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=2.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data600[] = {
  { 0.34938334718039693, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25924893192492893, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.21323034960651346, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18380687608379528, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16287134249264495, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14699392066849923, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13442645614164755, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12416765878620194, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11559576508589167, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10830098836378027, 2.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=2.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test600()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data600)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data600[i].x), Tp(data600[i].y),
		     Tp(data600[i].z), Tp(data600[i].p));
	const Tp f0 = data600[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data601[] = {
  { 3.1814617579585991, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.9267719159486534, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.4180586144770113, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.1341426707228186, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.95052080503716641, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.82104298622829042, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.72437054641292686, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.64918789322931358, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.58890123107273062, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.53939292908171732, 3.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test601()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data601)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data601[i].x), Tp(data601[i].y),
		     Tp(data601[i].z), Tp(data601[i].p));
	const Tp f0 = data601[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data602[] = {
  { 2.4654549549143647, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.5195270878991471, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.1297052749508756, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.90985117000699844, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.76656181862424699, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.66491105484705415, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.58863895242975239, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.52907436634303584, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.48114021573281435, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.44165281253966543, 3.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test602()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data602)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data602[i].x), Tp(data602[i].y),
		     Tp(data602[i].z), Tp(data602[i].p));
	const Tp f0 = data602[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data603[] = {
  { 2.1027405949293354, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.3083766713470597, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.97827740513355421, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.79106278774922356, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.66853076473323358, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.58131181147083866, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.51568494672147092, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.46431141215364813, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.42288330461461937, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.38869320468310825, 3.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test603()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data603)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data603[i].x), Tp(data603[i].y),
		     Tp(data603[i].z), Tp(data603[i].p));
	const Tp f0 = data603[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data604[] = {
  { 1.8704609344962482, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.1712157381568415, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.87910719303703111, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.71283590302652566, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.60370742009775968, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.52585344510508902, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.46716203643476467, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.42114283795319279, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.38397969175995850, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.35327072043236890, 3.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test604()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data604)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data604[i].x), Tp(data604[i].y),
		     Tp(data604[i].z), Tp(data604[i].p));
	const Tp f0 = data604[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data605[] = {
  { 1.7043236003585081, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.0721136179409319, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.80702834884152463, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.65574554034166033, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.55625315555895660, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.48515600929445024, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.43148323179012710, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.38934811405271569, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.35528537165682028, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.32711167870369112, 3.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test605()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data605)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data605[i].x), Tp(data605[i].y),
		     Tp(data605[i].z), Tp(data605[i].p));
	const Tp f0 = data605[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data606[] = {
  { 1.5774501443544893, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.99584496701668179, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.75130029608951043, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.61146315726744793, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.51935486677500720, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.45344984105855446, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.40364236761451172, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.36450455615898197, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.33283838484809586, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.30662731351955452, 3.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test606()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data606)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data606[i].x), Tp(data606[i].y),
		     Tp(data606[i].z), Tp(data606[i].p));
	const Tp f0 = data606[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data607[] = {
  { 1.4762414219640994, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.93462675528111083, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.70640161379077493, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.57569147113807817, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.48948785468143419, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.42774402149884017, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.38104015929570650, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.34431283909888089, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.31457669787882953, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.28994810445015412, 3.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test607()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data607)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data607[i].x), Tp(data607[i].y),
		     Tp(data607[i].z), Tp(data607[i].p));
	const Tp f0 = data607[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data608[] = {
  { 1.3929441296287395, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.88398457805307318, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.66914333118853631, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.54594086204144898, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.46460550968196507, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.40629888645996021, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.36216265922393076, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.32743221820975338, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.29929679855963198, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.27598202463143412, 3.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test608()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data608)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data608[i].x), Tp(data608[i].y),
		     Tp(data608[i].z), Tp(data608[i].p));
	const Tp f0 = data608[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data609[] = {
  { 1.3227570824359498, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.84112838412201096, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.63752909715586958, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.52064865027744411, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.44342072162483798, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.38801871838912422, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.34605516653010249, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.31301637554331807, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.28623835999824737, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.26403868659882429, 3.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test609()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data609)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data609[i].x), Tp(data609[i].y),
		     Tp(data609[i].z), Tp(data609[i].p));
	const Tp f0 = data609[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data610[] = {
  { 1.2625205818912753, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.80421108910111860, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.61023275990848969, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.49877435732263042, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.42507502529871505, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.37217173108359985, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.33207938945607324, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.30049897897205485, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.27489221136027708, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.25365545886709745, 3.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test610()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data610)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data610[i].x), Tp(data610[i].y),
		     Tp(data610[i].z), Tp(data610[i].p));
	const Tp f0 = data610[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data611[] = {
  { 3.1814617579585991, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.9267719159486534, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.4180586144770113, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.1341426707228186, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.95052080503716641, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.82104298622829042, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.72437054641292697, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.64918789322931370, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.58890123107273062, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.53939292908171732, 3.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test611()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data611)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data611[i].x), Tp(data611[i].y),
		     Tp(data611[i].z), Tp(data611[i].p));
	const Tp f0 = data611[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data612[] = {
  { 1.4923701377013003, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.99792637695299702, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.77153859594237217, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.63667820767968974, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.54561908971826223, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.47936133973515282, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.42867356130362194, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.38847366574624670, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.35571073090686678, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.32843230710046056, 3.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test612()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data612)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data612[i].x), Tp(data612[i].y),
		     Tp(data612[i].z), Tp(data612[i].p));
	const Tp f0 = data612[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data613[] = {
  { 1.2151025736697127, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.40757165683116159, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.36568221542956669, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.33231367632708936, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 3.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test613()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data613)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data613[i].x), Tp(data613[i].y),
		     Tp(data613[i].z), Tp(data613[i].p));
	const Tp f0 = data613[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data614[] = {
  { 1.0618319977895125, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.72958644011384377, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.47797677946192796, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.36518380519509192, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.32831816101817296, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.29887508595628881, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.27473478449730920, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.25453047328755496, 3.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test614()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data614)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data614[i].x), Tp(data614[i].y),
		     Tp(data614[i].z), Tp(data614[i].p));
	const Tp f0 = data614[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data615[] = {
  { 0.95902057408895203, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.66326984938537459, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.43747841423603617, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.25339986965394767, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.23498900543731913, 3.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test615()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data615)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data615[i].x), Tp(data615[i].y),
		     Tp(data615[i].z), Tp(data615[i].p));
	const Tp f0 = data615[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data616[] = {
  { 0.88322637190106779, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.40691664717747017, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.31304670459383976, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.25743679052360113, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.22003776396270472, 3.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test616()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data616)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data616[i].x), Tp(data616[i].y),
		     Tp(data616[i].z), Tp(data616[i].p));
	const Tp f0 = data616[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data617[] = {
  { 0.82406880306471975, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.57484676208064467, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.45565411661069516, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.38263098086624314, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.33229683789018521, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.29507237965418759, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.26621357447657029, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.24306737484318022, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.22401970229754878, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.20802560405354784, 3.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test617()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data617)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data617[i].x), Tp(data617[i].y),
		     Tp(data617[i].z), Tp(data617[i].p));
	const Tp f0 = data617[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data618[] = {
  { 0.77608343195161344, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.23115912572057210, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.21316758019503021, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.19804990582983045, 3.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test618()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data618)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data618[i].x), Tp(data618[i].y),
		     Tp(data618[i].z), Tp(data618[i].p));
	const Tp f0 = data618[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data619[] = {
  { 0.73606083017861457, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.41070634284965757, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.30089848244726003, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.26763661712549197, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.22104742408748271, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.20394381261466940, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18956390308246610, 3.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test619()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data619)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data619[i].x), Tp(data619[i].y),
		     Tp(data619[i].z), Tp(data619[i].p));
	const Tp f0 = data619[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data620[] = {
  { 0.70196643578457152, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.25677566527305340, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.21230066656860408, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 3.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test620()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data620)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data620[i].x), Tp(data620[i].y),
		     Tp(data620[i].z), Tp(data620[i].p));
	const Tp f0 = data620[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data621[] = {
  { 0.67243540762391041, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.47358314076150682, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.37767691694270905, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.31857200599266755, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.27764347267224726, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.24726015371628143, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.22362928147368372, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.20462324582094824, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.17574955367014047, 3.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test621()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data621)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data621[i].x), Tp(data621[i].y),
		     Tp(data621[i].z), Tp(data621[i].p));
	const Tp f0 = data621[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data622[] = {
  { 2.4654549549143647, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5195270878991471, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1297052749508756, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.90985117000699844, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.76656181862424699, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.66491105484705415, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.58863895242975239, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.52907436634303584, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.48114021573281435, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.44165281253966543, 3.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test622()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data622)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data622[i].x), Tp(data622[i].y),
		     Tp(data622[i].z), Tp(data622[i].p));
	const Tp f0 = data622[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data623[] = {
  { 1.2151025736697127, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.82681551228230354, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.64562471954930667, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.53640962661127523, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.46204014182157732, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.40757165683116159, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.36568221542956669, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.33231367632708936, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.30501607312793622, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28221396871688265, 3.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test623()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data623)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data623[i].x), Tp(data623[i].y),
		     Tp(data623[i].z), Tp(data623[i].p));
	const Tp f0 = data623[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data624[] = {
  { 0.99792637695299669, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.69116536356909253, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.54515081493174744, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.45605412304303622, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.39484999397335074, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.34972008043069203, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.31482299817374693, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.28689821387845488, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.26396563861456251, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.24474554836889340, 3.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test624()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data624)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data624[i].x), Tp(data624[i].y),
		     Tp(data624[i].z), Tp(data624[i].p));
	const Tp f0 = data624[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data625[] = {
  { 0.87625012187462770, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.35475287079463047, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 3.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test625()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data625)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data625[i].x), Tp(data625[i].y),
		     Tp(data625[i].z), Tp(data625[i].p));
	const Tp f0 = data625[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data626[] = {
  { 0.79396491050461349, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544426, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041423, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715428, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966175, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899069, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816771, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956781, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401630, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952442, 3.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test626()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data626)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data626[i].x), Tp(data626[i].y),
		     Tp(data626[i].z), Tp(data626[i].p));
	const Tp f0 = data626[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data627[] = {
  { 0.73295433505383012, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.41443161796397032, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.30504032772116135, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27169889878937048, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.24573471120867049, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19305357639153187, 3.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test627()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data627)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data627[i].x), Tp(data627[i].y),
		     Tp(data627[i].z), Tp(data627[i].p));
	const Tp f0 = data627[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data628[] = {
  { 0.68512754570930545, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.48673371171594010, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.38981778502212644, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.32966191362422509, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.28780849895341548, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.25663314414202998, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23232405332785688, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21273321233390202, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.19654546628095970, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18290474993849209, 3.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test628()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data628)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data628[i].x), Tp(data628[i].y),
		     Tp(data628[i].z), Tp(data628[i].p));
	const Tp f0 = data628[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data629[] = {
  { 0.64619816831637378, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22117588743290351, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 3.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test629()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data629)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data629[i].x), Tp(data629[i].y),
		     Tp(data629[i].z), Tp(data629[i].p));
	const Tp f0 = data629[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data630[] = {
  { 0.61363584810867344, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 3.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test630()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data630)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data630[i].x), Tp(data630[i].y),
		     Tp(data630[i].z), Tp(data630[i].p));
	const Tp f0 = data630[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data631[] = {
  { 0.58582975227241507, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.28660951724649919, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 3.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test631()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data631)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data631[i].x), Tp(data631[i].y),
		     Tp(data631[i].z), Tp(data631[i].p));
	const Tp f0 = data631[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data632[] = {
  { 0.56169543033873548, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246275, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 3.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test632()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data632)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data632[i].x), Tp(data632[i].y),
		     Tp(data632[i].z), Tp(data632[i].p));
	const Tp f0 = data632[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data633[] = {
  { 2.1027405949293354, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.3083766713470597, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.97827740513355421, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.79106278774922356, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.66853076473323358, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.58131181147083866, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.51568494672147092, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.46431141215364813, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.42288330461461937, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.38869320468310825, 3.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test633()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data633)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data633[i].x), Tp(data633[i].y),
		     Tp(data633[i].z), Tp(data633[i].p));
	const Tp f0 = data633[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data634[] = {
  { 1.0618319977895125, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.72958644011384377, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.57298419701539549, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.47797677946192796, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.41297243056848276, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.36518380519509192, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.32831816101817296, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.29887508595628887, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.27473478449730920, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.25453047328755501, 3.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test634()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data634)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data634[i].x), Tp(data634[i].y),
		     Tp(data634[i].z), Tp(data634[i].p));
	const Tp f0 = data634[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data635[] = {
  { 0.87625012187462770, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.61294272686796347, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.48628331750700965, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.40847152096001171, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.35475287079463041, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.31498751799812219, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.28414021673808515, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.25938957984727234, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23901661319326312, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.22190719465030401, 3.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test635()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data635)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data635[i].x), Tp(data635[i].y),
		     Tp(data635[i].z), Tp(data635[i].p));
	const Tp f0 = data635[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data636[] = {
  { 0.77153859594237229, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.54515081493174755, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.43506201805778905, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.36695743115432478, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.31969958349415245, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.28457650226367354, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25724104398424680, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23524769366779638, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21710144256169836, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.20183051028848578, 3.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test636()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data636)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data636[i].x), Tp(data636[i].y),
		     Tp(data636[i].z), Tp(data636[i].p));
	const Tp f0 = data636[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data637[] = {
  { 0.70041148675726506, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.49826857439462929, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.29490651327180772, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23807328426215404, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21799667889562627, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18742062046073629, 3.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test637()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data637)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data637[i].x), Tp(data637[i].y),
		     Tp(data637[i].z), Tp(data637[i].p));
	const Tp f0 = data637[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data638[] = {
  { 0.64750534425809503, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.37211529941965255, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.31546726459173990, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27592200955549134, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24638988202477222, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.22331431335011961, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18927032698158605, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17626418303399385, 3.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test638()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data638)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data638[i].x), Tp(data638[i].y),
		     Tp(data638[i].z), Tp(data638[i].p));
	const Tp f0 = data638[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data639[] = {
  { 0.60592910363958830, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.43493241655767029, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.35044333169358804, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29761672383638704, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.26066572752810530, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.23302662461706911, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.21140117274804845, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19392296757294852, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17944521689084739, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16721915196355913, 3.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test639()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data639)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data639[i].x), Tp(data639[i].y),
		     Tp(data639[i].z), Tp(data639[i].p));
	const Tp f0 = data639[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data640[] = {
  { 0.57201985105697684, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.28283012732924151, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 3.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test640()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data640)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data640[i].x), Tp(data640[i].y),
		     Tp(data640[i].z), Tp(data640[i].p));
	const Tp f0 = data640[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data641[] = {
  { 0.54360942652648092, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 3.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test641()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data641)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data641[i].x), Tp(data641[i].y),
		     Tp(data641[i].z), Tp(data641[i].p));
	const Tp f0 = data641[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data642[] = {
  { 0.51931443788430542, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 3.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test642()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data642)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data642[i].x), Tp(data642[i].y),
		     Tp(data642[i].z), Tp(data642[i].p));
	const Tp f0 = data642[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data643[] = {
  { 0.49820173719202743, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 3.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test643()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data643)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data643[i].x), Tp(data643[i].y),
		     Tp(data643[i].z), Tp(data643[i].p));
	const Tp f0 = data643[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data644[] = {
  { 1.8704609344962482, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1712157381568415, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.87910719303703111, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.71283590302652566, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.60370742009775968, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.52585344510508902, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.46716203643476467, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.42114283795319279, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.38397969175995850, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.35327072043236890, 3.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test644()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data644)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data644[i].x), Tp(data644[i].y),
		     Tp(data644[i].z), Tp(data644[i].p));
	const Tp f0 = data644[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data645[] = {
  { 0.95902057408895203, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.66326984938537459, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.52296454763568612, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.43747841423603617, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.37880029686565736, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33555181924388905, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.30211771938879811, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27536704200074236, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.25339986965394767, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23498900543731913, 3.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test645()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data645)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data645[i].x), Tp(data645[i].y),
		     Tp(data645[i].z), Tp(data645[i].p));
	const Tp f0 = data645[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data646[] = {
  { 0.79396491050461349, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.55911221740544426, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.44536627667041423, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.37517237295715428, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32654966484966175, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29046028102899069, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.26240265680816771, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.23984809974956781, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22125262503401630, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20561365138952442, 3.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test646()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data646)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data646[i].x), Tp(data646[i].y),
		     Tp(data646[i].z), Tp(data646[i].p));
	const Tp f0 = data646[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data647[] = {
  { 0.70041148675726506, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.49826857439462924, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.39927388934665903, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.33774761508758611, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29490651327180767, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.26297849556575464, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23807328426215396, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21799667889562621, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20140431268344108, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18742062046073624, 3.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test647()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data647)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data647[i].x), Tp(data647[i].y),
		     Tp(data647[i].z), Tp(data647[i].p));
	const Tp f0 = data647[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data648[] = {
  { 0.63667820767968997, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.45605412304303616, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36695743115432478, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.31131968298304541, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.27244173583397990, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.24338603781834769, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22066891492755408, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20232025929616423, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18713024484317303, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17430935681084586, 3.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test648()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data648)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data648[i].x), Tp(data648[i].y),
		     Tp(data648[i].z), Tp(data648[i].p));
	const Tp f0 = data648[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data649[] = {
  { 0.58917052221542332, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.42417885390038879, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.34237116724926031, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29110791982181122, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25519306961823907, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22829567980143298, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20722944518300229, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17606375079550204, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16412801715358538, 3.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test649()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data649)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data649[i].x), Tp(data649[i].y),
		     Tp(data649[i].z), Tp(data649[i].p));
	const Tp f0 = data649[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data650[] = {
  { 0.55177429367339292, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.39884081752373352, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.32271298108341179, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27488121754848066, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24130216884246339, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21611278181903348, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19635716122332902, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18035802420177466, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16708235029898111, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15585426408892872, 3.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test650()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data650)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data650[i].x), Tp(data650[i].y),
		     Tp(data650[i].z), Tp(data650[i].p));
	const Tp f0 = data650[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data651[] = {
  { 0.52123270285008805, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18727903597199325, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14891982596679978, 3.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test651()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data651)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data651[i].x), Tp(data651[i].y),
		     Tp(data651[i].z), Tp(data651[i].p));
	const Tp f0 = data651[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data652[] = {
  { 0.49561461055199763, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853906, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464498, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468994, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261054, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668178, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 3.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test652()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data652)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data652[i].x), Tp(data652[i].y),
		     Tp(data652[i].z), Tp(data652[i].p));
	const Tp f0 = data652[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data653[] = {
  { 0.47368603656088509, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24006912379411069, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 3.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test653()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data653)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data653[i].x), Tp(data653[i].y),
		     Tp(data653[i].z), Tp(data653[i].p));
	const Tp f0 = data653[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data654[] = {
  { 0.45461355226272843, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 3.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test654()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data654)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data654[i].x), Tp(data654[i].y),
		     Tp(data654[i].z), Tp(data654[i].p));
	const Tp f0 = data654[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data655[] = {
  { 1.7043236003585081, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0721136179409319, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.80702834884152463, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.65574554034166033, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.55625315555895649, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.48515600929445024, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.43148323179012704, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.38934811405271569, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.35528537165682028, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.32711167870369112, 3.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test655()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data655)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data655[i].x), Tp(data655[i].y),
		     Tp(data655[i].z), Tp(data655[i].p));
	const Tp f0 = data655[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data656[] = {
  { 0.88322637190106779, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.61380248931225079, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.48539652323557009, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.40691664717747017, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35292026198805920, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31304670459383976, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28217270298309183, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25743679052360113, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23710003348932118, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22003776396270472, 3.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test656()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data656)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data656[i].x), Tp(data656[i].y),
		     Tp(data656[i].z), Tp(data656[i].p));
	const Tp f0 = data656[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data657[] = {
  { 0.73295433505383012, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.51870588849980037, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.41443161796397032, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.34987151689961349, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.30504032772116135, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27169889878937048, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24573471120867049, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22483345199124563, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20757983189468313, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19305357639153187, 3.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test657()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data657)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data657[i].x), Tp(data657[i].y),
		     Tp(data657[i].z), Tp(data657[i].p));
	const Tp f0 = data657[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data658[] = {
  { 0.64750534425809514, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.46295298933820178, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37211529941965255, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.31546726459173996, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.27592200955549134, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.24638988202477222, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22331431335011961, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20468557271887888, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18927032698158605, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17626418303399388, 3.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test658()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data658)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data658[i].x), Tp(data658[i].y),
		     Tp(data658[i].z), Tp(data658[i].p));
	const Tp f0 = data658[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data659[] = {
  { 0.58917052221542332, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.42417885390038879, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34237116724926037, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29110791982181122, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25519306961823912, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22829567980143298, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20722944518300229, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19018897309297364, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17606375079550210, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16412801715358541, 3.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test659()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data659)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data659[i].x), Tp(data659[i].y),
		     Tp(data659[i].z), Tp(data659[i].p));
	const Tp f0 = data659[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data660[] = {
  { 0.54561908971826234, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.39484999397335074, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31969958349415228, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27244173583397990, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23924499161241758, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21433033980271560, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19478250447434117, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17894643378355896, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16580237209547130, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15468288100621905, 3.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test660()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data660)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data660[i].x), Tp(data660[i].y),
		     Tp(data660[i].z), Tp(data660[i].p));
	const Tp f0 = data660[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data661[] = {
  { 0.51129488838991544, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37150394318135865, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30154558819053268, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.25743278691438759, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22638102978922792, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20303725112222398, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18469631424905425, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16982018255079651, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15745997252936839, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14699392066849923, 3.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test661()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data661)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data661[i].x), Tp(data661[i].y),
		     Tp(data661[i].z), Tp(data661[i].p));
	const Tp f0 = data661[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data662[] = {
  { 0.48323391967720530, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.28651424322664981, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24496338004432705, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16217834559733857, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15046566853868040, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14054033019188908, 3.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test662()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data662)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data662[i].x), Tp(data662[i].y),
		     Tp(data662[i].z), Tp(data662[i].p));
	const Tp f0 = data662[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data663[] = {
  { 0.45967650472366151, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18555961194525217, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 3.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test663()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data663)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data663[i].x), Tp(data663[i].y),
		     Tp(data663[i].z), Tp(data663[i].p));
	const Tp f0 = data663[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data664[] = {
  { 0.43949703921614336, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32200691636610923, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26274026800952888, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22516306783226769, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17856025043066379, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16276980988993642, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14993007047678017, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 3.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test664()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data664)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data664[i].x), Tp(data664[i].y),
		     Tp(data664[i].z), Tp(data664[i].p));
	const Tp f0 = data664[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data665[] = {
  { 0.42193459245985332, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21708494054221622, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19161797648737752, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14489224956209634, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12588968030716377, 3.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test665()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data665)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data665[i].x), Tp(data665[i].y),
		     Tp(data665[i].z), Tp(data665[i].p));
	const Tp f0 = data665[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data666[] = {
  { 1.5774501443544893, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.99584496701668179, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.75130029608951043, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.61146315726744793, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.51935486677500720, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.45344984105855446, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.40364236761451172, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.36450455615898197, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.33283838484809586, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.30662731351955452, 3.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test666()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data666)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data666[i].x), Tp(data666[i].y),
		     Tp(data666[i].z), Tp(data666[i].p));
	const Tp f0 = data666[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data667[] = {
  { 0.82406880306471975, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.57484676208064467, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.45565411661069516, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.38263098086624303, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.33229683789018521, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.29507237965418759, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.26621357447657024, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.24306737484318022, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.22401970229754878, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20802560405354784, 3.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test667()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data667)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data667[i].x), Tp(data667[i].y),
		     Tp(data667[i].z), Tp(data667[i].p));
	const Tp f0 = data667[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data668[] = {
  { 0.68512754570930545, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.48673371171594010, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.38981778502212644, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.32966191362422509, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.28780849895341548, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.25663314414202998, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23232405332785688, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21273321233390202, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.19654546628095970, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18290474993849209, 3.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test668()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data668)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data668[i].x), Tp(data668[i].y),
		     Tp(data668[i].z), Tp(data668[i].p));
	const Tp f0 = data668[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data669[] = {
  { 0.60592910363958830, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.43493241655767029, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.35044333169358804, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.29761672383638704, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26066572752810530, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23302662461706911, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21140117274804845, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19392296757294852, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17944521689084739, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16721915196355913, 3.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test669()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data669)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data669[i].x), Tp(data669[i].y),
		     Tp(data669[i].z), Tp(data669[i].p));
	const Tp f0 = data669[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data670[] = {
  { 0.55177429367339292, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.39884081752373357, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.32271298108341184, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.27488121754848066, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24130216884246339, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.21611278181903348, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.19635716122332905, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18035802420177466, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16708235029898111, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15585426408892872, 3.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test670()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data670)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data670[i].x), Tp(data670[i].y),
		     Tp(data670[i].z), Tp(data670[i].p));
	const Tp f0 = data670[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data671[] = {
  { 0.51129488838991544, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.37150394318135865, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.30154558819053268, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.25743278691438759, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.22638102978922794, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20303725112222398, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18469631424905425, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16982018255079653, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15745997252936839, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14699392066849923, 3.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test671()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data671)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data671[i].x), Tp(data671[i].y),
		     Tp(data671[i].z), Tp(data671[i].p));
	const Tp f0 = data671[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data672[] = {
  { 0.47936133973515305, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.34972008043069203, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.28457650226367348, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24338603781834778, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21433033980271562, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19245008972987526, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17523466914596680, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16125448077398066, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14962638285972324, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13977101630709493, 3.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test672()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data672)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data672[i].x), Tp(data672[i].y),
		     Tp(data672[i].z), Tp(data672[i].p));
	const Tp f0 = data672[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data673[] = {
  { 0.45323419268671356, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.33175335969665076, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27051289127782380, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23170439652324645, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20428232606120883, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18360375992800163, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16731496396884549, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15407407058509442, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14305126572735663, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13370166746428541, 3.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test673()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data673)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data673[i].x), Tp(data673[i].y),
		     Tp(data673[i].z), Tp(data673[i].p));
	const Tp f0 = data673[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data674[] = {
  { 0.43128556654674499, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.31655977795033724, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.25857189316307355, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22175728741852707, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.19570731523648979, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.17604078349891775, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16053412172144979, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14791843300216456, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13740835597815623, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12848780299987314, 3.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test674()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data674)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data674[i].x), Tp(data674[i].y),
		     Tp(data674[i].z), Tp(data674[i].p));
	const Tp f0 = data674[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data675[] = {
  { 0.41247333238452288, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.30346430277664810, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.24824442145508774, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21313305493648368, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18825852514797534, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16946097115410677, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15462716963260220, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14255021489450148, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13248257848281811, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12393271845547064, 3.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test675()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data675)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data675[i].x), Tp(data675[i].y),
		     Tp(data675[i].z), Tp(data675[i].p));
	const Tp f0 = data675[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data676[] = {
  { 0.39609249754952380, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.29200640577335135, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.23918145183247722, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.20554851955254339, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18169680295022048, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16365689406956915, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14941072051245458, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13780492604270261, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12812471388106511, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11989980736081955, 3.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test676()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data676)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data676[i].x), Tp(data676[i].y),
		     Tp(data676[i].z), Tp(data676[i].p));
	const Tp f0 = data676[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data677[] = {
  { 1.4762414219640994, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.93462675528111083, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.70640161379077493, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.57569147113807817, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.48948785468143419, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.42774402149884017, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38104015929570656, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34431283909888089, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31457669787882953, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.28994810445015412, 3.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test677()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data677)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data677[i].x), Tp(data677[i].y),
		     Tp(data677[i].z), Tp(data677[i].p));
	const Tp f0 = data677[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data678[] = {
  { 0.77608343195161344, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23115912572057201, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21316758019503021, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19804990582983045, 3.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test678()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data678)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data678[i].x), Tp(data678[i].y),
		     Tp(data678[i].z), Tp(data678[i].p));
	const Tp f0 = data678[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data679[] = {
  { 0.64619816831637378, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22117588743290351, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 3.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test679()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data679)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data679[i].x), Tp(data679[i].y),
		     Tp(data679[i].z), Tp(data679[i].p));
	const Tp f0 = data679[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data680[] = {
  { 0.57201985105697684, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28283012732924157, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 3.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test680()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data680)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data680[i].x), Tp(data680[i].y),
		     Tp(data680[i].z), Tp(data680[i].p));
	const Tp f0 = data680[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data681[] = {
  { 0.52123270285008805, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18727903597199327, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14891982596679981, 3.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test681()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data681)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data681[i].x), Tp(data681[i].y),
		     Tp(data681[i].z), Tp(data681[i].p));
	const Tp f0 = data681[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data682[] = {
  { 0.48323391967720530, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.28651424322664981, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24496338004432705, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16217834559733857, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15046566853868040, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14054033019188902, 3.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test682()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data682)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data682[i].x), Tp(data682[i].y),
		     Tp(data682[i].z), Tp(data682[i].p));
	const Tp f0 = data682[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data683[] = {
  { 0.45323419268671356, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33175335969665076, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27051289127782380, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23170439652324645, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20428232606120883, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18360375992800163, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16731496396884549, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15407407058509440, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14305126572735663, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13370166746428541, 3.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test683()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data683)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data683[i].x), Tp(data683[i].y),
		     Tp(data683[i].z), Tp(data683[i].p));
	const Tp f0 = data683[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data684[] = {
  { 0.42867356130362183, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31482299817374693, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.25724104398424680, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22066891492755408, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19478250447434123, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17523466914596675, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15981849507971338, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14727429240199458, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13682223971660140, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12794979869413767, 3.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test684()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data684)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data684[i].x), Tp(data684[i].y),
		     Tp(data684[i].z), Tp(data684[i].p));
	const Tp f0 = data684[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data685[] = {
  { 0.40802969980361037, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30049702418283186, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24596488916490492, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21126552674107046, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18666950997871171, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16807441510136867, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15339517205504868, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 3.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test685()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data685)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data685[i].x), Tp(data685[i].y),
		     Tp(data685[i].z), Tp(data685[i].p));
	const Tp f0 = data685[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data686[] = {
  { 0.39032744003392794, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23620685885217635, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20310782211209585, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17961767715767193, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12679879933178567, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 3.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test686()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data686)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data686[i].x), Tp(data686[i].y),
		     Tp(data686[i].z), Tp(data686[i].p));
	const Tp f0 = data686[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data687[] = {
  { 0.37490672257801766, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.27732835487957480, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22763930938409951, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19592979226788723, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15633936012100086, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14284849030042365, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13184660978927920, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11485148518398806, 3.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test687()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data687)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data687[i].x), Tp(data687[i].y),
		     Tp(data687[i].z), Tp(data687[i].p));
	const Tp f0 = data687[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data688[] = {
  { 1.3929441296287395, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.88398457805307318, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.66914333118853631, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.54594086204144898, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.46460550968196507, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.40629888645996021, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.36216265922393076, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.32743221820975338, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.29929679855963198, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.27598202463143412, 3.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test688()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data688)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data688[i].x), Tp(data688[i].y),
		     Tp(data688[i].z), Tp(data688[i].p));
	const Tp f0 = data688[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data689[] = {
  { 0.73606083017861457, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.41070634284965757, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.30089848244726003, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.26763661712549197, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.22104742408748271, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.20394381261466940, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18956390308246610, 3.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test689()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data689)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data689[i].x), Tp(data689[i].y),
		     Tp(data689[i].z), Tp(data689[i].p));
	const Tp f0 = data689[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data690[] = {
  { 0.61363584810867344, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 3.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test690()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data690)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data690[i].x), Tp(data690[i].y),
		     Tp(data690[i].z), Tp(data690[i].p));
	const Tp f0 = data690[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data691[] = {
  { 0.54360942652648092, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 3.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test691()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data691)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data691[i].x), Tp(data691[i].y),
		     Tp(data691[i].z), Tp(data691[i].p));
	const Tp f0 = data691[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data692[] = {
  { 0.49561461055199763, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853906, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464498, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468994, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261054, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668178, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 3.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test692()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data692)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data692[i].x), Tp(data692[i].y),
		     Tp(data692[i].z), Tp(data692[i].p));
	const Tp f0 = data692[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data693[] = {
  { 0.45967650472366151, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18555961194525217, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 3.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test693()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data693)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data693[i].x), Tp(data693[i].y),
		     Tp(data693[i].z), Tp(data693[i].p));
	const Tp f0 = data693[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data694[] = {
  { 0.43128556654674499, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.31655977795033724, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.25857189316307355, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.22175728741852707, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19570731523648979, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17604078349891775, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16053412172144979, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14791843300216456, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13740835597815623, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12848780299987314, 3.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test694()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data694)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data694[i].x), Tp(data694[i].y),
		     Tp(data694[i].z), Tp(data694[i].p));
	const Tp f0 = data694[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data695[] = {
  { 0.40802969980361037, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.30049702418283186, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24596488916490492, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.21126552674107046, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18666950997871171, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16807441510136867, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15339517205504868, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 3.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test695()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data695)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data695[i].x), Tp(data695[i].y),
		     Tp(data695[i].z), Tp(data695[i].p));
	const Tp f0 = data695[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data696[] = {
  { 0.38847366574624653, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.28689821387845493, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23524769366779633, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.20232025929616423, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17894643378355898, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16125448077398069, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14727429240199458, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13587911055911933, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12637018703120828, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11828755184020920, 3.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test696()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data696)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data696[i].x), Tp(data696[i].y),
		     Tp(data696[i].z), Tp(data696[i].p));
	const Tp f0 = data696[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data697[] = {
  { 0.37169761313905042, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.27516581242813920, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22596892122058529, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19455607506131359, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12191100711677891, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11416113809265731, 3.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test697()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data697)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data697[i].x), Tp(data697[i].y),
		     Tp(data697[i].z), Tp(data697[i].p));
	const Tp f0 = data697[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data698[] = {
  { 0.35707864409656193, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947169, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262627, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373213, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455752, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855294, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 3.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test698()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data698)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data698[i].x), Tp(data698[i].y),
		     Tp(data698[i].z), Tp(data698[i].p));
	const Tp f0 = data698[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data699[] = {
  { 1.3227570824359496, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.84112838412201096, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.63752909715586958, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.52064865027744411, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.44342072162483798, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.38801871838912422, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.34605516653010243, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.31301637554331807, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.28623835999824737, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.26403868659882423, 3.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test699()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data699)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data699[i].x), Tp(data699[i].y),
		     Tp(data699[i].z), Tp(data699[i].p));
	const Tp f0 = data699[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data700[] = {
  { 0.70196643578457152, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.25677566527305334, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21230066656860405, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 3.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test700()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data700)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data700[i].x), Tp(data700[i].y),
		     Tp(data700[i].z), Tp(data700[i].p));
	const Tp f0 = data700[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data701[] = {
  { 0.58582975227241507, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.28660951724649919, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 3.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test701()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data701)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data701[i].x), Tp(data701[i].y),
		     Tp(data701[i].z), Tp(data701[i].p));
	const Tp f0 = data701[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data702[] = {
  { 0.51931443788430542, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 3.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test702()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data702)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data702[i].x), Tp(data702[i].y),
		     Tp(data702[i].z), Tp(data702[i].p));
	const Tp f0 = data702[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data703[] = {
  { 0.47368603656088509, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24006912379411069, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 3.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test703()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data703)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data703[i].x), Tp(data703[i].y),
		     Tp(data703[i].z), Tp(data703[i].p));
	const Tp f0 = data703[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data704[] = {
  { 0.43949703921614336, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.32200691636610923, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26274026800952888, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22516306783226769, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17856025043066379, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16276980988993642, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14993007047678017, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 3.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test704()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data704)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data704[i].x), Tp(data704[i].y),
		     Tp(data704[i].z), Tp(data704[i].p));
	const Tp f0 = data704[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data705[] = {
  { 0.41247333238452277, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30346430277664810, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.24824442145508774, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21313305493648368, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18825852514797534, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16946097115410677, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15462716963260220, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14255021489450148, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13248257848281811, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12393271845547064, 3.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test705()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data705)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data705[i].x), Tp(data705[i].y),
		     Tp(data705[i].z), Tp(data705[i].p));
	const Tp f0 = data705[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data706[] = {
  { 0.39032744003392794, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.23620685885217635, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20310782211209585, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17961767715767193, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12679879933178567, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 3.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test706()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data706)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data706[i].x), Tp(data706[i].y),
		     Tp(data706[i].z), Tp(data706[i].p));
	const Tp f0 = data706[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data707[] = {
  { 0.37169761313905042, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.27516581242813920, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.22596892122058529, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19455607506131359, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12191100711677891, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11416113809265731, 3.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test707()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data707)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data707[i].x), Tp(data707[i].y),
		     Tp(data707[i].z), Tp(data707[i].p));
	const Tp f0 = data707[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data708[] = {
  { 0.35571073090686678, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26396563861456251, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.21710144256169830, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18713024484317306, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16580237209547136, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14962638285972321, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13682223971660146, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12637018703120831, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11763689830001368, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11020491664921012, 3.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test708()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data708)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data708[i].x), Tp(data708[i].y),
		     Tp(data708[i].z), Tp(data708[i].p));
	const Tp f0 = data708[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data709[] = {
  { 0.34177531815965190, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 3.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test709()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data709)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data709[i].x), Tp(data709[i].y),
		     Tp(data709[i].z), Tp(data709[i].p));
	const Tp f0 = data709[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data710[] = {
  { 1.2625205818912753, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.80421108910111860, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.61023275990848969, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.49877435732263042, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.42507502529871505, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.37217173108359985, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.33207938945607324, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.30049897897205485, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.27489221136027708, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.25365545886709745, 3.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test710()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data710)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data710[i].x), Tp(data710[i].y),
		     Tp(data710[i].z), Tp(data710[i].p));
	const Tp f0 = data710[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data711[] = {
  { 0.67243540762391041, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.47358314076150682, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.37767691694270905, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.31857200599266755, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.27764347267224726, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.24726015371628143, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22362928147368372, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.20462324582094824, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.17574955367014047, 3.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test711()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data711)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data711[i].x), Tp(data711[i].y),
		     Tp(data711[i].z), Tp(data711[i].p));
	const Tp f0 = data711[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data712[] = {
  { 0.56169543033873548, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246275, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 3.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test712()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data712)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data712[i].x), Tp(data712[i].y),
		     Tp(data712[i].z), Tp(data712[i].p));
	const Tp f0 = data712[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data713[] = {
  { 0.49820173719202743, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 3.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test713()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data713)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data713[i].x), Tp(data713[i].y),
		     Tp(data713[i].z), Tp(data713[i].p));
	const Tp f0 = data713[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data714[] = {
  { 0.45461355226272848, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 3.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test714()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data714)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data714[i].x), Tp(data714[i].y),
		     Tp(data714[i].z), Tp(data714[i].p));
	const Tp f0 = data714[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data715[] = {
  { 0.42193459245985332, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.21708494054221622, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19161797648737752, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14489224956209634, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12588968030716377, 3.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test715()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data715)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data715[i].x), Tp(data715[i].y),
		     Tp(data715[i].z), Tp(data715[i].p));
	const Tp f0 = data715[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data716[] = {
  { 0.39609249754952380, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.29200640577335135, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.23918145183247722, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.20554851955254339, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18169680295022048, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16365689406956915, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14941072051245458, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13780492604270261, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12812471388106511, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11989980736081955, 3.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test716()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data716)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data716[i].x), Tp(data716[i].y),
		     Tp(data716[i].z), Tp(data716[i].p));
	const Tp f0 = data716[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data717[] = {
  { 0.37490672257801766, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.27732835487957480, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.22763930938409951, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.19592979226788723, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.15633936012100086, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14284849030042365, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13184660978927920, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11485148518398806, 3.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test717()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data717)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data717[i].x), Tp(data717[i].y),
		     Tp(data717[i].z), Tp(data717[i].p));
	const Tp f0 = data717[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data718[] = {
  { 0.35707864409656193, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947169, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262627, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373213, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455752, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855294, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 3.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test718()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data718)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data718[i].x), Tp(data718[i].y),
		     Tp(data718[i].z), Tp(data718[i].p));
	const Tp f0 = data718[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data719[] = {
  { 0.34177531815965190, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 3.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test719()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data719)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data719[i].x), Tp(data719[i].y),
		     Tp(data719[i].z), Tp(data719[i].p));
	const Tp f0 = data719[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data720[] = {
  { 0.32843230710046045, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.24474554836889348, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20183051028848570, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17430935681084589, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15468288100621905, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13977101630709496, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12794979869413764, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11828755184020916, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11020491664921006, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10331957260334028, 3.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test720()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data720)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data720[i].x), Tp(data720[i].y),
		     Tp(data720[i].z), Tp(data720[i].p));
	const Tp f0 = data720[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data721[] = {
  { 2.9694371495862444, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.8023516014996519, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.3283711490916290, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.0635241918017548, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.89207345813689432, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.77108317736781407, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.68068727087691305, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.61034475802113142, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.55390996774625134, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.50754327524378695, 3.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test721()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data721)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data721[i].x), Tp(data721[i].y),
		     Tp(data721[i].z), Tp(data721[i].p));
	const Tp f0 = data721[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data722[] = {
  { 2.3035564346855377, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.4232415329072743, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.0597824778188665, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.85452205359914146, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.72060249495087836, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.62551537384070788, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.55411470797192719, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.49831799048363234, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.45338997795945835, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.41635974305701651, 3.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test722()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data722)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data722[i].x), Tp(data722[i].y),
		     Tp(data722[i].z), Tp(data722[i].p));
	const Tp f0 = data722[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data723[] = {
  { 1.9658624928034973, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.2264041327122388, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.91851134135997281, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.74364193264948653, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.62906077065827226, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.54742502046461050, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.48595010807084882, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.43779324835945704, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.39893513086861171, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.36684826408155075, 3.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test723()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data723)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data723[i].x), Tp(data723[i].y),
		     Tp(data723[i].z), Tp(data723[i].p));
	const Tp f0 = data723[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data724[] = {
  { 1.7494459255069015, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.0984204846455190, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.82589393219588036, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.67053815267088079, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.56845382600498828, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.49555418083598146, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.44055184461906954, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.39739383469208367, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.36251880611170784, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.33368392213839781, 3.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test724()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data724)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data724[i].x), Tp(data724[i].y),
		     Tp(data724[i].z), Tp(data724[i].p));
	const Tp f0 = data724[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data725[] = {
  { 1.5945685435385657, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 1.0058834554386262, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.75852330711630256, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.61713961555604724, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.52404456072773664, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.45745191625471437, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.40713640362133918, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.36760719569645856, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.33562984983181904, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.30916523010360170, 3.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test725()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data725)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data725[i].x), Tp(data725[i].y),
		     Tp(data725[i].z), Tp(data725[i].p));
	const Tp f0 = data725[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data726[] = {
  { 1.4762414219640994, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.93462675528111083, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.70640161379077493, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.57569147113807817, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.48948785468143419, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.42774402149884017, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.38104015929570656, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.34431283909888089, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.31457669787882953, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.28994810445015412, 3.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test726()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data726)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data726[i].x), Tp(data726[i].y),
		     Tp(data726[i].z), Tp(data726[i].p));
	const Tp f0 = data726[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data727[] = {
  { 1.3818155148978264, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.87740444713624755, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.66438581397076057, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.54218956071646918, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.46149861719475943, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.40364236761451172, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.35983969464915294, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.32536674470345223, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.29743639346488782, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.27428896215456866, 3.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test727()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data727)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data727[i].x), Tp(data727[i].y),
		     Tp(data727[i].z), Tp(data727[i].p));
	const Tp f0 = data727[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data728[] = {
  { 1.3040763567820968, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.83004880593973707, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.62950378812379226, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.51431265633309353, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.43816812315985132, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.38352413888786485, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.34212250135987987, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.30951782104299036, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.28308576470346958, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.26116856880011352, 3.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test728()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data728)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data728[i].x), Tp(data728[i].y),
		     Tp(data728[i].z), Tp(data728[i].p));
	const Tp f0 = data728[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data729[] = {
  { 1.2385549085969758, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.78995987832038939, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.59989401503220152, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.49060298973382915, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.41829529228584011, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.36636660361944123, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.32699729527497673, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.29597583875094413, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.27081477697700107, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.24994212735723548, 3.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test729()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data729)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data729[i].x), Tp(data729[i].y),
		     Tp(data729[i].z), Tp(data729[i].p));
	const Tp f0 = data729[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data730[] = {
  { 1.1823091734174969, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.75541576451496006, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.57431936495071312, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.47008947126163109, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.40107863174854741, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.35148635651660265, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.31386785472054907, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.28421169779883143, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.26014766147690610, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.24017729914130131, 3.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test730()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data730)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data730[i].x), Tp(data730[i].y),
		     Tp(data730[i].z), Tp(data730[i].p));
	const Tp f0 = data730[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data731[] = {
  { 2.9694371495862444, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.8023516014996519, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.3283711490916290, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0635241918017548, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.89207345813689432, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.77108317736781407, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.68068727087691305, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.61034475802113142, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.55390996774625134, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.50754327524378695, 3.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test731()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data731)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data731[i].x), Tp(data731[i].y),
		     Tp(data731[i].z), Tp(data731[i].p));
	const Tp f0 = data731[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data732[] = {
  { 1.4007769575243452, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.93915752464696489, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.72731614480004825, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.60092072346235836, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.51547215934308965, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.45323419268671372, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.40558098790040226, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.36775987208625094, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.33691559507695468, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.31121973703230116, 3.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test732()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data732)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data732[i].x), Tp(data732[i].y),
		     Tp(data732[i].z), Tp(data732[i].p));
	const Tp f0 = data732[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data733[] = {
  { 1.1419917039005423, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.43721435515669904, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.28939808488878999, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 3.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test733()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data733)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data733[i].x), Tp(data733[i].y),
		     Tp(data733[i].z), Tp(data733[i].p));
	const Tp f0 = data733[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data734[] = {
  { 0.99871277699951810, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.54145321304962379, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.45227149650398518, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.39116916738484908, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.34619871482405534, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 3.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test734()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data734)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data734[i].x), Tp(data734[i].y),
		     Tp(data734[i].z), Tp(data734[i].p));
	const Tp f0 = data734[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data735[] = {
  { 0.90250310497734676, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.49450910722023034, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.35905468421976600, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 3.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test735()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data735)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data735[i].x), Tp(data735[i].y),
		     Tp(data735[i].z), Tp(data735[i].p));
	const Tp f0 = data735[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data736[] = {
  { 0.83152026568913140, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.45921578556213027, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.33470600764004355, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 3.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test736()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data736)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data736[i].x), Tp(data736[i].y),
		     Tp(data736[i].z), Tp(data736[i].p));
	const Tp f0 = data736[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data737[] = {
  { 0.77608343195161344, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.23115912572057198, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.21316758019503013, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.19804990582983045, 3.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test737()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data737)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data737[i].x), Tp(data737[i].y),
		     Tp(data737[i].z), Tp(data737[i].p));
	const Tp f0 = data737[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data738[] = {
  { 0.73109293163336164, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.51312012455982980, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.40829398107716375, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.34382517873635210, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.29925520618337781, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.26621357447657035, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.24054506091464556, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21992117520979021, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.20292276620803792, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18862961391254041, 3.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test738()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data738)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data738[i].x), Tp(data738[i].y),
		     Tp(data738[i].z), Tp(data738[i].p));
	const Tp f0 = data738[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data739[] = {
  { 0.69355180313411036, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.21037210353882049, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 3.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test739()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data739)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data739[i].x), Tp(data739[i].y),
		     Tp(data739[i].z), Tp(data739[i].p));
	const Tp f0 = data739[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data740[] = {
  { 0.66155920777571686, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.46652318314465946, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.37233745780747174, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.31424297259281736, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.24408916990767501, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.20210711136517923, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.18666070285211245, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.17365832663910136, 3.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test740()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data740)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data740[i].x), Tp(data740[i].y),
		     Tp(data740[i].z), Tp(data740[i].p));
	const Tp f0 = data740[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data741[] = {
  { 0.63383944056141561, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 3.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test741()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data741)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data741[i].x), Tp(data741[i].y),
		     Tp(data741[i].z), Tp(data741[i].p));
	const Tp f0 = data741[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data742[] = {
  { 2.3035564346855377, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.4232415329072743, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0597824778188665, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.85452205359914146, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.72060249495087836, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.62551537384070788, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.55411470797192719, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.49831799048363234, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.45338997795945835, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.41635974305701651, 3.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test742()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data742)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data742[i].x), Tp(data742[i].y),
		     Tp(data742[i].z), Tp(data742[i].p));
	const Tp f0 = data742[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data743[] = {
  { 1.1419917039005425, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.77923181010779019, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.60953667198692629, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.50707628826659012, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.43721435515669915, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.38599208968146603, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.34656332404703094, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.31513020164448058, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.28939808488879004, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.26789038242194851, 3.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test743()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data743)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data743[i].x), Tp(data743[i].y),
		     Tp(data743[i].z), Tp(data743[i].p));
	const Tp f0 = data743[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data744[] = {
  { 0.93915752464696522, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.65235088546172837, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.51547476495313160, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.43180232287005510, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.37424370424179809, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33175335969665071, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.29886568055108975, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27252692999279865, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25088103370981046, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23272751358046814, 3.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test744()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data744)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data744[i].x), Tp(data744[i].y),
		     Tp(data744[i].z), Tp(data744[i].p));
	const Tp f0 = data744[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data745[] = {
  { 0.82532297424995804, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.22741151525481890, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 3.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test745()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data745)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data745[i].x), Tp(data745[i].y),
		     Tp(data745[i].z), Tp(data745[i].p));
	const Tp f0 = data745[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data746[] = {
  { 0.74825358602755421, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31004190937108117, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.27602345440640175, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.22824778080580607, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 3.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test746()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data746)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data746[i].x), Tp(data746[i].y),
		     Tp(data746[i].z), Tp(data746[i].p));
	const Tp f0 = data746[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data747[] = {
  { 0.69106175006440396, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33200250540570836, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.28978118810962383, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.25834168945570546, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21408553360131055, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19777145992322862, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 3.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test747()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data747)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data747[i].x), Tp(data747[i].y),
		     Tp(data747[i].z), Tp(data747[i].p));
	const Tp f0 = data747[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data748[] = {
  { 0.64619816831637378, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22117588743290356, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 3.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test748()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data748)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data748[i].x), Tp(data748[i].y),
		     Tp(data748[i].z), Tp(data748[i].p));
	const Tp f0 = data748[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data749[] = {
  { 0.60966029697906376, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.43585178003832342, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35044435209855912, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.29721596019210228, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26006627614063615, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23232405332785691, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21064553855226686, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19314237133994716, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17865617275751117, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16643164880870379, 3.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test749()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data749)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data749[i].x), Tp(data749[i].y),
		     Tp(data749[i].z), Tp(data749[i].p));
	const Tp f0 = data749[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data750[] = {
  { 0.57908381201537662, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.41508412062446814, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.33430182888427129, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28387114522476453, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.24862809777110170, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20167510684220091, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18502449827060385, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17123442227170885, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15959019453143738, 3.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test750()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data750)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data750[i].x), Tp(data750[i].y),
		     Tp(data750[i].z), Tp(data750[i].p));
	const Tp f0 = data750[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data751[] = {
  { 0.55296274146298519, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.39724951501383310, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32039448944607329, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27234759696322314, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.23873336681128249, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21358169594446560, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19389460229359845, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16478482871102290, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15364022930203414, 3.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test751()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data751)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data751[i].x), Tp(data751[i].y),
		     Tp(data751[i].z), Tp(data751[i].p));
	const Tp f0 = data751[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data752[] = {
  { 0.53028273587019470, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.38169455741536806, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.30823097320026421, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23004841666960316, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20593584740565524, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18704950966394512, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17176974669889256, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15910103247430646, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14839309852132307, 3.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test752()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data752)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data752[i].x), Tp(data752[i].y),
		     Tp(data752[i].z), Tp(data752[i].p));
	const Tp f0 = data752[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data753[] = {
  { 1.9658624928034973, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2264041327122388, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.91851134135997281, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.74364193264948653, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.62906077065827226, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.54742502046461050, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.48595010807084882, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.43779324835945704, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.39893513086861171, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.36684826408155075, 3.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test753()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data753)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data753[i].x), Tp(data753[i].y),
		     Tp(data753[i].z), Tp(data753[i].p));
	const Tp f0 = data753[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data754[] = {
  { 0.99871277699951810, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.68819168137895670, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.54145321304962379, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.45227149650398518, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.39116916738484908, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.34619871482405540, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.31147420949596138, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.28371845052365346, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26094517798694333, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24187276677351185, 3.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test754()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data754)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data754[i].x), Tp(data754[i].y),
		     Tp(data754[i].z), Tp(data754[i].p));
	const Tp f0 = data754[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data755[] = {
  { 0.82532297424995804, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.57904133298268434, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.46024688486012033, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.38712876767191323, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.33657691835678638, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29911140720498391, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27001912357314961, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24665651520751863, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22741151525481890, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21123848261921779, 3.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test755()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data755)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data755[i].x), Tp(data755[i].y),
		     Tp(data755[i].z), Tp(data755[i].p));
	const Tp f0 = data755[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data756[] = {
  { 0.72731614480004836, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.51547476495313171, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.41216577909955909, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.34812988078697865, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.30362817388613128, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27051289127782385, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.24471340945057926, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.22393736300073205, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20678207850259026, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19233504909865906, 3.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test756()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data756)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data756[i].x), Tp(data756[i].y),
		     Tp(data756[i].z), Tp(data756[i].p));
	const Tp f0 = data756[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data757[] = {
  { 0.66066422494478227, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.47145480245855770, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.32064732908289945, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20767475637939450, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19197970874038126, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 3.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test757()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data757)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data757[i].x), Tp(data757[i].y),
		     Tp(data757[i].z), Tp(data757[i].p));
	const Tp f0 = data757[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data758[] = {
  { 0.61104264021947707, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903698, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898373, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998317, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970171, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264372, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459163, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830263, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388280, 3.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test758()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data758)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data758[i].x), Tp(data758[i].y),
		     Tp(data758[i].z), Tp(data758[i].p));
	const Tp f0 = data758[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data759[] = {
  { 0.57201985105697684, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.28283012732924151, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 3.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test759()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data759)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data759[i].x), Tp(data759[i].y),
		     Tp(data759[i].z), Tp(data759[i].p));
	const Tp f0 = data759[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data760[] = {
  { 0.54017444849099827, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.39022616779574593, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.31568279195720300, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26887820680694080, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23603345013807681, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21140117274804843, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19208571013328102, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17644476239784859, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16346723896224688, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15249181170206269, 3.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test760()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data760)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data760[i].x), Tp(data760[i].y),
		     Tp(data760[i].z), Tp(data760[i].p));
	const Tp f0 = data760[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data761[] = {
  { 0.51347985591731382, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 3.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test761()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data761)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data761[i].x), Tp(data761[i].y),
		     Tp(data761[i].z), Tp(data761[i].p));
	const Tp f0 = data761[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data762[] = {
  { 0.49064226479292744, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480224, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557912, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619548, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682120, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596741, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 3.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test762()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data762)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data762[i].x), Tp(data762[i].y),
		     Tp(data762[i].z), Tp(data762[i].p));
	const Tp f0 = data762[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data763[] = {
  { 0.47078850771996805, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.34247161105719709, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17097270188240146, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15729483835968866, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14592515814192544, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 3.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test763()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data763)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data763[i].x), Tp(data763[i].y),
		     Tp(data763[i].z), Tp(data763[i].p));
	const Tp f0 = data763[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data764[] = {
  { 1.7494459255069015, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0984204846455190, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.82589393219588036, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.67053815267088079, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.56845382600498828, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.49555418083598146, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.44055184461906954, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.39739383469208367, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.36251880611170784, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.33368392213839781, 3.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test764()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data764)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data764[i].x), Tp(data764[i].y),
		     Tp(data764[i].z), Tp(data764[i].p));
	const Tp f0 = data764[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data765[] = {
  { 0.90250310497734676, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.62602056442914111, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.49450910722023034, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.41423400668258153, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35905468421976600, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31833794975880791, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28683033981461781, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.26159978740528228, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.24086555018224529, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22347653672793238, 3.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test765()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data765)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data765[i].x), Tp(data765[i].y),
		     Tp(data765[i].z), Tp(data765[i].p));
	const Tp f0 = data765[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data766[] = {
  { 0.74825358602755421, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.52852597747230279, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.42180532452988645, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.35581870961103756, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.31004190937108111, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27602345440640169, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24954873194434146, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22824778080580604, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.21067221958399418, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19588078584061699, 3.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test766()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data766)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data766[i].x), Tp(data766[i].y),
		     Tp(data766[i].z), Tp(data766[i].p));
	const Tp f0 = data766[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data767[] = {
  { 0.66066422494478227, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.47145480245855770, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37852235490292230, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.32064732908289945, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.28028613683960107, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.25016841656619260, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22665041578672965, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20767475637939450, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19197970874038126, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17874283653849687, 3.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test767()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data767)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data767[i].x), Tp(data767[i].y),
		     Tp(data767[i].z), Tp(data767[i].p));
	const Tp f0 = data767[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data768[] = {
  { 0.60092072346235836, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.43180232287005510, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34812988078697865, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29577123669941352, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25912646698528391, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.23170439652324634, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.21024125233844609, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19288923355417037, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17851251804571255, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16636924381727244, 3.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test768()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data768)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data768[i].x), Tp(data768[i].y),
		     Tp(data768[i].z), Tp(data768[i].p));
	const Tp f0 = data768[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data769[] = {
  { 0.55634601388836458, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16805739868879657, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15674746740407988, 3.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test769()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data769)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data769[i].x), Tp(data769[i].y),
		     Tp(data769[i].z), Tp(data769[i].p));
	const Tp f0 = data769[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data770[] = {
  { 0.52123270285008805, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18727903597199327, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14891982596679981, 3.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test770()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data770)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data770[i].x), Tp(data770[i].y),
		     Tp(data770[i].z), Tp(data770[i].p));
	const Tp f0 = data770[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data771[] = {
  { 0.49253810493171546, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35834408626365266, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.29112402611839111, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24870653210676338, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21882966503289622, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19635716122332908, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17869249731228154, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16435888718022029, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15244494483680715, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14235329837746191, 3.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test771()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data771)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data771[i].x), Tp(data771[i].y),
		     Tp(data771[i].z), Tp(data771[i].p));
	const Tp f0 = data771[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data772[] = {
  { 0.46845679275670005, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 3.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test772()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data772)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data772[i].x), Tp(data772[i].y),
		     Tp(data772[i].z), Tp(data772[i].p));
	const Tp f0 = data772[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data773[] = {
  { 0.44783441985639022, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 3.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test773()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data773)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data773[i].x), Tp(data773[i].y),
		     Tp(data773[i].z), Tp(data773[i].p));
	const Tp f0 = data773[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data774[] = {
  { 0.42989092919613181, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.31497844547758391, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19434555902721881, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17475989052454718, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15932635698806280, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 3.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test774()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data774)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data774[i].x), Tp(data774[i].y),
		     Tp(data774[i].z), Tp(data774[i].p));
	const Tp f0 = data774[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data775[] = {
  { 1.5945685435385657, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0058834554386262, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.75852330711630256, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.61713961555604724, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.52404456072773664, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.45745191625471437, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.40713640362133918, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.36760719569645856, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.33562984983181904, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.30916523010360170, 3.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test775()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data775)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data775[i].x), Tp(data775[i].y),
		     Tp(data775[i].z), Tp(data775[i].p));
	const Tp f0 = data775[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data776[] = {
  { 0.83152026568913140, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.57960298473323235, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.45921578556213027, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.38549886329080801, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.33470600764004355, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.29715372789951411, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.26804805787209740, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.24470879858599837, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.22550575642084411, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20938377380700537, 3.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test776()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data776)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data776[i].x), Tp(data776[i].y),
		     Tp(data776[i].z), Tp(data776[i].p));
	const Tp f0 = data776[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data777[] = {
  { 0.69106175006440396, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.49057095595638406, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.39271137990559113, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.33200250540570836, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.28978118810962383, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.25834168945570546, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23383296160821201, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21408553360131055, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.19777145992322862, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18402654626445417, 3.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test777()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data777)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data777[i].x), Tp(data777[i].y),
		     Tp(data777[i].z), Tp(data777[i].p));
	const Tp f0 = data777[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data778[] = {
  { 0.61104264021947718, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.43826149820903698, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.35296320663898373, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.29966015435998317, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26239113738919767, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23452312941970171, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21272432718264372, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19510992974459163, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18052215337830263, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16820523012388280, 3.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test778()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data778)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data778[i].x), Tp(data778[i].y),
		     Tp(data778[i].z), Tp(data778[i].p));
	const Tp f0 = data778[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data779[] = {
  { 0.55634601388836458, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.40183010177168854, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.32498122848696370, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.27672366320740666, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24285978826321852, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.21746505162969024, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.19755371413001097, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18143210517118777, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16805739868879657, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15674746740407988, 3.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test779()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data779)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data779[i].x), Tp(data779[i].y),
		     Tp(data779[i].z), Tp(data779[i].p));
	const Tp f0 = data779[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data780[] = {
  { 0.51547215934308965, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.37424370424179798, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.30362817388613128, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.25912646698528380, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.22781416778739566, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20428232606120886, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18579864501502716, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17081015574379921, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15835903081081967, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14781779918367013, 3.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test780()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data780)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data780[i].x), Tp(data780[i].y),
		     Tp(data780[i].z), Tp(data780[i].p));
	const Tp f0 = data780[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data781[] = {
  { 0.48323391967720530, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.28651424322664981, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24496338004432705, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16217834559733857, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15046566853868040, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14054033019188905, 3.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test781()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data781)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data781[i].x), Tp(data781[i].y),
		     Tp(data781[i].z), Tp(data781[i].p));
	const Tp f0 = data781[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data782[] = {
  { 0.45686179269977184, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.33414241739489764, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27233326970516303, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23318729602594307, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20553867201914111, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18469631424905425, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16828303486200485, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15494405085253882, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14384180166952548, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13442645614164758, 3.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test782()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data782)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data782[i].x), Tp(data782[i].y),
		     Tp(data782[i].z), Tp(data782[i].p));
	const Tp f0 = data782[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data783[] = {
  { 0.43471039393925859, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.31881859381125421, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26029452251677160, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.19689745748590903, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16145178117610373, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14874331417509712, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 3.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test783()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data783)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data783[i].x), Tp(data783[i].y),
		     Tp(data783[i].z), Tp(data783[i].p));
	const Tp f0 = data783[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data784[] = {
  { 0.41572657954600895, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641914, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740307, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491491, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477400, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716280, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786178, 3.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test784()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data784)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data784[i].x), Tp(data784[i].y),
		     Tp(data784[i].z), Tp(data784[i].p));
	const Tp f0 = data784[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data785[] = {
  { 0.39919801690450957, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.29405919660985369, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.20682746443446567, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18278161466609860, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15024802304792700, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13855786767077968, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12880927217128099, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12052772989704705, 3.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test785()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data785)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data785[i].x), Tp(data785[i].y),
		     Tp(data785[i].z), Tp(data785[i].p));
	const Tp f0 = data785[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data786[] = {
  { 1.4762414219640994, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.93462675528111083, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.70640161379077493, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.57569147113807817, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.48948785468143419, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.42774402149884017, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38104015929570656, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34431283909888089, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31457669787882953, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.28994810445015412, 3.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test786()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data786)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data786[i].x), Tp(data786[i].y),
		     Tp(data786[i].z), Tp(data786[i].p));
	const Tp f0 = data786[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data787[] = {
  { 0.77608343195161344, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.54302231815066571, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43125198730417791, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36264537733963392, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31528570873093892, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28021882909562468, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25300508036871605, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23115912572057198, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21316758019503013, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19804990582983042, 3.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test787()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data787)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data787[i].x), Tp(data787[i].y),
		     Tp(data787[i].z), Tp(data787[i].p));
	const Tp f0 = data787[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data788[] = {
  { 0.64619816831637378, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46051499952979208, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.36954258285439345, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31296180013406916, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27353454249849968, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24412921280985586, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22117588743290351, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20266068040007590, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18734939380885798, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17443798347841791, 3.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test788()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data788)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data788[i].x), Tp(data788[i].y),
		     Tp(data788[i].z), Tp(data788[i].p));
	const Tp f0 = data788[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data789[] = {
  { 0.57201985105697684, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41190341067821290, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33254966480535647, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28283012732924157, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24799656081595958, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22190726768073543, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20147201353236258, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18494013800652001, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17123490985254997, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15965269044573577, 3.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test789()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data789)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data789[i].x), Tp(data789[i].y),
		     Tp(data789[i].z), Tp(data789[i].p));
	const Tp f0 = data789[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data790[] = {
  { 0.52123270285008805, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.37798487831953376, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.30645581870604888, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26141711165512876, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22974680470387174, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20595752308085513, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18727903597199327, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17213759971562231, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15956298419009518, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14891982596679981, 3.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test790()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data790)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data790[i].x), Tp(data790[i].y),
		     Tp(data790[i].z), Tp(data790[i].p));
	const Tp f0 = data790[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data791[] = {
  { 0.48323391967720530, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35226586839422747, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.28651424322664981, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24496338004432705, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21566596032585367, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19361107586778561, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17626300757548063, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16217834559733857, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15046566853868040, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14054033019188905, 3.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test791()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data791)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data791[i].x), Tp(data791[i].y),
		     Tp(data791[i].z), Tp(data791[i].p));
	const Tp f0 = data791[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data792[] = {
  { 0.45323419268671361, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33175335969665082, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27051289127782385, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23170439652324645, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20428232606120883, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18360375992800165, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16731496396884554, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15407407058509445, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14305126572735666, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13370166746428544, 3.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test792()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data792)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data792[i].x), Tp(data792[i].y),
		     Tp(data792[i].z), Tp(data792[i].p));
	const Tp f0 = data792[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data793[] = {
  { 0.42867356130362183, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31482299817374693, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.25724104398424680, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22066891492755408, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19478250447434123, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17523466914596675, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15981849507971338, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14727429240199458, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13682223971660140, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12794979869413767, 3.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test793()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data793)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data793[i].x), Tp(data793[i].y),
		     Tp(data793[i].z), Tp(data793[i].p));
	const Tp f0 = data793[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data794[] = {
  { 0.40802969980361031, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30049702418283175, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24596488916490480, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21126552674107046, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18666950997871168, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16807441510136864, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15339517205504866, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 3.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test794()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data794)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data794[i].x), Tp(data794[i].y),
		     Tp(data794[i].z), Tp(data794[i].p));
	const Tp f0 = data794[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data795[] = {
  { 0.39032744003392794, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23620685885217638, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20310782211209585, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17961767715767196, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12679879933178573, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 3.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test795()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data795)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data795[i].x), Tp(data795[i].y),
		     Tp(data795[i].z), Tp(data795[i].p));
	const Tp f0 = data795[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data796[] = {
  { 0.37490672257801766, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.27732835487957475, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22763930938409949, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19592979226788718, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15633936012100086, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14284849030042363, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13184660978927920, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11485148518398806, 3.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test796()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data796)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data796[i].x), Tp(data796[i].y),
		     Tp(data796[i].z), Tp(data796[i].p));
	const Tp f0 = data796[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data797[] = {
  { 1.3818155148978264, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.87740444713624755, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.66438581397076057, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.54218956071646918, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.46149861719475943, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.40364236761451172, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.35983969464915294, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.32536674470345223, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.29743639346488782, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.27428896215456866, 3.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test797()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data797)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data797[i].x), Tp(data797[i].y),
		     Tp(data797[i].z), Tp(data797[i].p));
	const Tp f0 = data797[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data798[] = {
  { 0.73109293163336164, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.51312012455982980, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.40829398107716375, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.34382517873635210, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.29925520618337781, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.26621357447657035, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.24054506091464556, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21992117520979021, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.20292276620803792, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18862961391254041, 3.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test798()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data798)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data798[i].x), Tp(data798[i].y),
		     Tp(data798[i].z), Tp(data798[i].p));
	const Tp f0 = data798[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data799[] = {
  { 0.60966029697906376, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.43585178003832342, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.35044435209855912, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.29721596019210228, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.26006627614063615, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.23232405332785691, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.21064553855226686, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19314237133994716, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17865617275751117, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16643164880870379, 3.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test799()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data799)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data799[i].x), Tp(data799[i].y),
		     Tp(data799[i].z), Tp(data799[i].p));
	const Tp f0 = data799[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data800[] = {
  { 0.54017444849099827, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.39022616779574593, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.31568279195720300, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.26887820680694080, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.23603345013807681, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.21140117274804843, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.19208571013328102, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17644476239784859, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16346723896224688, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15249181170206269, 3.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test800()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data800)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data800[i].x), Tp(data800[i].y),
		     Tp(data800[i].z), Tp(data800[i].p));
	const Tp f0 = data800[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data801[] = {
  { 0.49253810493171546, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.35834408626365266, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.29112402611839111, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24870653210676338, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21882966503289622, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.19635716122332908, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17869249731228154, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16435888718022029, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15244494483680715, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14235329837746191, 3.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test801()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data801)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data801[i].x), Tp(data801[i].y),
		     Tp(data801[i].z), Tp(data801[i].p));
	const Tp f0 = data801[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data802[] = {
  { 0.45686179269977178, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.33414241739489764, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.27233326970516303, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.23318729602594307, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20553867201914111, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18469631424905425, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16828303486200485, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15494405085253882, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14384180166952548, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13442645614164758, 3.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test802()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data802)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data802[i].x), Tp(data802[i].y),
		     Tp(data802[i].z), Tp(data802[i].p));
	const Tp f0 = data802[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data803[] = {
  { 0.42867356130362183, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.31482299817374693, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.25724104398424674, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.22066891492755408, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19478250447434123, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17523466914596675, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15981849507971338, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14727429240199458, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13682223971660140, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12794979869413767, 3.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test803()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data803)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data803[i].x), Tp(data803[i].y),
		     Tp(data803[i].z), Tp(data803[i].p));
	const Tp f0 = data803[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data804[] = {
  { 0.40558098790040237, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.29886568055108970, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24471340945057926, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.21024125233844607, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18579864501502721, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16731496396884551, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15272070966424250, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14083317720134328, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13091941660661224, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12249723529609875, 3.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test804()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data804)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data804[i].x), Tp(data804[i].y),
		     Tp(data804[i].z), Tp(data804[i].p));
	const Tp f0 = data804[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data805[] = {
  { 0.38616032574252929, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.28535464670455979, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23406245030266770, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.20134956551950123, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17812071847896979, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16053412172144979, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14663434214427465, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13530274428287928, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12584547310650945, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11780569675934753, 3.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test805()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data805)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data805[i].x), Tp(data805[i].y),
		     Tp(data805[i].z), Tp(data805[i].p));
	const Tp f0 = data805[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data806[] = {
  { 0.36949897192586934, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.27369687614783877, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22484010849946631, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19363109316852320, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17144284739028878, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15462716963260220, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14132536745647911, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13047326015640068, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12141028290792609, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11370123472976013, 3.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test806()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data806)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data806[i].x), Tp(data806[i].y),
		     Tp(data806[i].z), Tp(data806[i].p));
	const Tp f0 = data806[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data807[] = {
  { 0.35497886804334555, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.26348726872117201, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.21673876900247155, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18683591987251380, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16555376173133754, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14941072051245458, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13663155134484470, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12619913157295071, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11748171056537036, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11006283631027459, 3.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test807()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data807)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data807[i].x), Tp(data807[i].y),
		     Tp(data807[i].z), Tp(data807[i].p));
	const Tp f0 = data807[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data808[] = {
  { 1.3040763567820968, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.83004880593973707, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.62950378812379226, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.51431265633309353, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.43816812315985132, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.38352413888786485, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.34212250135987987, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.30951782104299036, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.28308576470346958, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.26116856880011352, 3.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test808()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data808)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data808[i].x), Tp(data808[i].y),
		     Tp(data808[i].z), Tp(data808[i].p));
	const Tp f0 = data808[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data809[] = {
  { 0.69355180313411036, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21037210353882052, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 3.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test809()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data809)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data809[i].x), Tp(data809[i].y),
		     Tp(data809[i].z), Tp(data809[i].p));
	const Tp f0 = data809[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data810[] = {
  { 0.57908381201537662, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.41508412062446814, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.33430182888427129, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.28387114522476453, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.24862809777110170, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20167510684220091, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18502449827060385, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17123442227170885, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15959019453143738, 3.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test810()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data810)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data810[i].x), Tp(data810[i].y),
		     Tp(data810[i].z), Tp(data810[i].p));
	const Tp f0 = data810[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data811[] = {
  { 0.51347985591731382, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 3.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test811()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data811)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data811[i].x), Tp(data811[i].y),
		     Tp(data811[i].z), Tp(data811[i].p));
	const Tp f0 = data811[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data812[] = {
  { 0.46845679275670005, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 3.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test812()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data812)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data812[i].x), Tp(data812[i].y),
		     Tp(data812[i].z), Tp(data812[i].p));
	const Tp f0 = data812[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data813[] = {
  { 0.43471039393925859, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.31881859381125421, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26029452251677160, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19689745748590903, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16145178117610373, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14874331417509712, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 3.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test813()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data813)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data813[i].x), Tp(data813[i].y),
		     Tp(data813[i].z), Tp(data813[i].p));
	const Tp f0 = data813[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data814[] = {
  { 0.40802969980361031, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30049702418283175, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.24596488916490492, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21126552674107046, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18666950997871168, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16807441510136864, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15339517205504866, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 3.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test814()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data814)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data814[i].x), Tp(data814[i].y),
		     Tp(data814[i].z), Tp(data814[i].p));
	const Tp f0 = data814[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data815[] = {
  { 0.38616032574252929, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.28535464670455979, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.23406245030266770, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20134956551950123, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17812071847896979, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16053412172144979, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14663434214427465, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13530274428287928, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12584547310650945, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11780569675934753, 3.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test815()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data815)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data815[i].x), Tp(data815[i].y),
		     Tp(data815[i].z), Tp(data815[i].p));
	const Tp f0 = data815[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data816[] = {
  { 0.36775987208625094, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.27252692999279854, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.22393736300073205, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19288923355417037, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17081015574379926, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15407407058509440, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14083317720134331, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13002934283364664, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12100565601188112, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11332926434347651, 3.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test816()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data816)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data816[i].x), Tp(data816[i].y),
		     Tp(data816[i].z), Tp(data816[i].p));
	const Tp f0 = data816[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data817[] = {
  { 0.35196743249392498, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.21516608970229784, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18554144632956854, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16444842520831870, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12542167802943824, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 3.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test817()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data817)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data817[i].x), Tp(data817[i].y),
		     Tp(data817[i].z), Tp(data817[i].p));
	const Tp f0 = data817[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data818[] = {
  { 0.33819969287467350, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14346870994699223, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13129155535329287, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 3.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test818()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data818)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data818[i].x), Tp(data818[i].y),
		     Tp(data818[i].z), Tp(data818[i].p));
	const Tp f0 = data818[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data819[] = {
  { 1.2385549085969758, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.78995987832038939, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.59989401503220163, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.49060298973382915, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.41829529228584011, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.36636660361944123, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.32699729527497673, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.29597583875094419, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.27081477697700107, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.24994212735723548, 3.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test819()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data819)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data819[i].x), Tp(data819[i].y),
		     Tp(data819[i].z), Tp(data819[i].p));
	const Tp f0 = data819[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data820[] = {
  { 0.66155920777571686, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.46652318314465946, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.37233745780747174, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.31424297259281730, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.24408916990767501, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.20210711136517923, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18666070285211245, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.17365832663910136, 3.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test820()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data820)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data820[i].x), Tp(data820[i].y),
		     Tp(data820[i].z), Tp(data820[i].p));
	const Tp f0 = data820[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data821[] = {
  { 0.55296274146298519, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.39724951501383304, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.32039448944607329, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.27234759696322314, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.23873336681128249, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.21358169594446560, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.19389460229359842, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.16478482871102290, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15364022930203414, 3.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test821()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data821)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data821[i].x), Tp(data821[i].y),
		     Tp(data821[i].z), Tp(data821[i].p));
	const Tp f0 = data821[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data822[] = {
  { 0.49064226479292744, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480224, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557912, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619548, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682120, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596741, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 3.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test822()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data822)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data822[i].x), Tp(data822[i].y),
		     Tp(data822[i].z), Tp(data822[i].p));
	const Tp f0 = data822[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data823[] = {
  { 0.44783441985639022, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 3.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test823()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data823)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data823[i].x), Tp(data823[i].y),
		     Tp(data823[i].z), Tp(data823[i].p));
	const Tp f0 = data823[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data824[] = {
  { 0.41572657954600895, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641914, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740307, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491491, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477400, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716280, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786178, 3.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test824()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data824)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data824[i].x), Tp(data824[i].y),
		     Tp(data824[i].z), Tp(data824[i].p));
	const Tp f0 = data824[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data825[] = {
  { 0.39032744003392794, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.23620685885217635, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.20310782211209585, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17961767715767196, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12679879933178573, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 3.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test825()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data825)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data825[i].x), Tp(data825[i].y),
		     Tp(data825[i].z), Tp(data825[i].p));
	const Tp f0 = data825[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data826[] = {
  { 0.36949897192586934, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.27369687614783877, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.22484010849946631, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.19363109316852320, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17144284739028878, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.15462716963260220, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14132536745647911, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13047326015640068, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12141028290792609, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11370123472976013, 3.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test826()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data826)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data826[i].x), Tp(data826[i].y),
		     Tp(data826[i].z), Tp(data826[i].p));
	const Tp f0 = data826[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data827[] = {
  { 0.35196743249392498, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.21516608970229778, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.18554144632956854, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.16444842520831868, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12542167802943824, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 3.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test827()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data827)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data827[i].x), Tp(data827[i].y),
		     Tp(data827[i].z), Tp(data827[i].p));
	const Tp f0 = data827[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data828[] = {
  { 0.33691559507695484, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.25088103370981046, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.20678207850259028, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17851251804571250, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15835903081081973, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14305126572735666, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13091941660661224, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12100565601188114, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11271445297164348, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10565287267507187, 3.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test828()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data828)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data828[i].x), Tp(data828[i].y),
		     Tp(data828[i].z), Tp(data828[i].p));
	const Tp f0 = data828[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data829[] = {
  { 0.32378952990903487, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.24161482897584433, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13828510006492686, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 3.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test829()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data829)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data829[i].x), Tp(data829[i].y),
		     Tp(data829[i].z), Tp(data829[i].p));
	const Tp f0 = data829[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data830[] = {
  { 1.1823091734174969, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.75541576451496006, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.57431936495071312, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.47008947126163109, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.40107863174854741, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.35148635651660265, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.31386785472054907, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.28421169779883143, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.26014766147690610, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.24017729914130131, 3.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test830()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data830)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data830[i].x), Tp(data830[i].y),
		     Tp(data830[i].z), Tp(data830[i].p));
	const Tp f0 = data830[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data831[] = {
  { 0.63383944056141572, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 3.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test831()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data831)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data831[i].x), Tp(data831[i].y),
		     Tp(data831[i].z), Tp(data831[i].p));
	const Tp f0 = data831[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data832[] = {
  { 0.53028273587019470, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.38169455741536806, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.30823097320026416, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.23004841666960316, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.20593584740565524, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.18704950966394510, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17176974669889256, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15910103247430646, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14839309852132307, 3.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test832()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data832)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data832[i].x), Tp(data832[i].y),
		     Tp(data832[i].z), Tp(data832[i].p));
	const Tp f0 = data832[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data833[] = {
  { 0.47078850771996805, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.34247161105719709, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17097270188240146, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15729483835968866, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14592515814192544, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 3.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test833()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data833)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data833[i].x), Tp(data833[i].y),
		     Tp(data833[i].z), Tp(data833[i].p));
	const Tp f0 = data833[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data834[] = {
  { 0.42989092919613192, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.31497844547758391, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.19434555902721881, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.17475989052454721, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15932635698806280, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 3.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test834()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data834)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data834[i].x), Tp(data834[i].y),
		     Tp(data834[i].z), Tp(data834[i].p));
	const Tp f0 = data834[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data835[] = {
  { 0.39919801690450957, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.29405919660985369, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.20682746443446567, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18278161466609860, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15024802304792700, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13855786767077968, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12880927217128099, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12052772989704705, 3.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test835()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data835)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data835[i].x), Tp(data835[i].y),
		     Tp(data835[i].z), Tp(data835[i].p));
	const Tp f0 = data835[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data836[] = {
  { 0.37490672257801766, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.27732835487957475, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.22763930938409951, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.19592979226788718, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15633936012100086, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14284849030042365, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13184660978927920, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11485148518398806, 3.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test836()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data836)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data836[i].x), Tp(data836[i].y),
		     Tp(data836[i].z), Tp(data836[i].p));
	const Tp f0 = data836[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data837[] = {
  { 0.35497886804334555, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.26348726872117201, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.21673876900247155, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.18683591987251380, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.16555376173133754, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14941072051245458, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13663155134484470, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12619913157295071, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11748171056537036, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11006283631027459, 3.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test837()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data837)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data837[i].x), Tp(data837[i].y),
		     Tp(data837[i].z), Tp(data837[i].p));
	const Tp f0 = data837[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data838[] = {
  { 0.33819969287467350, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14346870994699223, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13129155535329287, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 3.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test838()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data838)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data838[i].x), Tp(data838[i].y),
		     Tp(data838[i].z), Tp(data838[i].p));
	const Tp f0 = data838[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data839[] = {
  { 0.32378952990903487, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.24161482897584435, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13828510006492686, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 3.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test839()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data839)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data839[i].x), Tp(data839[i].y),
		     Tp(data839[i].z), Tp(data839[i].p));
	const Tp f0 = data839[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=3.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data840[] = {
  { 0.31121973703230099, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.23272751358046800, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19233504909865903, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.16636924381727239, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14781779918367008, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13370166746428541, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12249723529609874, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11332926434347647, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10565287267507181, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.099108127499405257, 3.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=3.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test840()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data840)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data840[i].x), Tp(data840[i].y),
		     Tp(data840[i].z), Tp(data840[i].p));
	const Tp f0 = data840[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data841[] = {
  { 2.7957181830885749, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.7000050391699437, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.2544173977804063, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 1.0051946107285361, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.84373385183465388, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.72971996124302185, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.64448919435342700, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.57813379227068229, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.52487480026761746, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.48110030907459589, 4.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test841()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data841)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data841[i].x), Tp(data841[i].y),
		     Tp(data841[i].z), Tp(data841[i].p));
	const Tp f0 = data841[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data842[] = {
  { 2.1706589694463734, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.3438542313870974, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 1.0019762220786403, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.80869336781236623, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.68247913939368532, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.59279828604933249, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.52541540183471169, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.47272980996559177, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.43028641113267230, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.39528882436548302, 4.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test842()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data842)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data842[i].x), Tp(data842[i].y),
		     Tp(data842[i].z), Tp(data842[i].p));
	const Tp f0 = data842[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data843[] = {
  { 1.8533869395258991, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.1587298464787144, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.86902926564433447, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.70430122208049029, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.59626528265163836, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.51923347706414547, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.46118714068187927, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.41568974422172894, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.37895866483944485, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.34861414334458163, 4.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test843()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data843)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data843[i].x), Tp(data843[i].y),
		     Tp(data843[i].z), Tp(data843[i].p));
	const Tp f0 = data843[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data844[] = {
  { 1.6499366323032025, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 1.0382700842969894, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.78179340212247594, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.63540981359548432, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.53912823334761450, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.47031702519777602, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.41836350380340265, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.37757309719027227, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.34459354439341267, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.31731266011780507, 4.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test844()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data844)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data844[i].x), Tp(data844[i].y),
		     Tp(data844[i].z), Tp(data844[i].p));
	const Tp f0 = data844[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data845[] = {
  { 1.5042726072947898, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.95112253927232826, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.71829528725355785, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.58505178588131612, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.49722921558246908, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.43435581561273917, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.38681653176455949, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.34944504467543969, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.31919639053452625, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.29414992917905991, 4.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test845()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data845)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data845[i].x), Tp(data845[i].y),
		     Tp(data845[i].z), Tp(data845[i].p));
	const Tp f0 = data845[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data846[] = {
  { 1.3929441296287395, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.88398457805307318, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.66914333118853631, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.54594086204144898, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.46460550968196507, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.40629888645996021, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.36216265922393076, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.32743221820975338, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.29929679855963198, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.27598202463143412, 4.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test846()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data846)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data846[i].x), Tp(data846[i].y),
		     Tp(data846[i].z), Tp(data846[i].p));
	const Tp f0 = data846[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data847[] = {
  { 1.3040763567820968, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.83004880593973707, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.62950378812379226, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.51431265633309353, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.43816812315985121, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.38352413888786485, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.34212250135987987, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.30951782104299036, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.28308576470346958, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.26116856880011352, 4.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test847()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data847)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data847[i].x), Tp(data847[i].y),
		     Tp(data847[i].z), Tp(data847[i].p));
	const Tp f0 = data847[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data848[] = {
  { 1.2308942620129160, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.78539816339744839, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.59658200011729901, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.48798385671321498, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.41612132636432358, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.36450455615898186, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.32536674470345206, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.29452431127404310, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.26950604222632363, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.24875007088012702, 4.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test848()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data848)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data848[i].x), Tp(data848[i].y),
		     Tp(data848[i].z), Tp(data848[i].p));
	const Tp f0 = data848[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data849[] = {
  { 1.1691998689776044, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.74758821090642469, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.56862689470089289, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.46558271169861637, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.39733462013473336, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.34827731549864349, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.31105617972296390, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.28170753134865645, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.25788891816182635, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.23811920078124657, 4.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test849()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data849)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data849[i].x), Tp(data849[i].y),
		     Tp(data849[i].z), Tp(data849[i].p));
	const Tp f0 = data849[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data850[] = {
  { 1.1162289525908911, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.71499953726585297, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.54447432971840126, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.44619507700934191, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.38105329983216329, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.33419876538580223, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.29862916776034337, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.27056899795342709, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.24778609888688150, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.22886854366397424, 4.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test850()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data850)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data850[i].x), Tp(data850[i].y),
		     Tp(data850[i].z), Tp(data850[i].p));
	const Tp f0 = data850[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data851[] = {
  { 2.7957181830885749, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.7000050391699437, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.2544173977804063, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 1.0051946107285361, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.84373385183465388, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.72971996124302185, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.64448919435342700, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.57813379227068229, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.52487480026761746, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.48110030907459589, 4.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test851()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data851)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data851[i].x), Tp(data851[i].y),
		     Tp(data851[i].z), Tp(data851[i].p));
	const Tp f0 = data851[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data852[] = {
  { 1.3248382358044246, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.89018872093237578, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.69035607662225207, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.57097108596555690, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.49018012937430855, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.43128556654674499, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.38616032574252912, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.35032352839115055, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.32108161258352425, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.29670878274813522, 4.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test852()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data852)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data852[i].x), Tp(data852[i].y),
		     Tp(data852[i].z), Tp(data852[i].p));
	const Tp f0 = data852[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data853[] = {
  { 1.0812295669164198, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.48243192207925401, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.41632034563196074, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 4.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test853()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data853)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data853[i].x), Tp(data853[i].y),
		     Tp(data853[i].z), Tp(data853[i].p));
	const Tp f0 = data853[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data854[] = {
  { 0.94618205076987916, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.43063641346229348, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.37278471192273893, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.24926404039506461, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 4.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test854()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data854)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data854[i].x), Tp(data854[i].y),
		     Tp(data854[i].z), Tp(data854[i].p));
	const Tp f0 = data854[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data855[] = {
  { 0.85542246869229122, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.21370251886958525, 4.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test855()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data855)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data855[i].x), Tp(data855[i].y),
		     Tp(data855[i].z), Tp(data855[i].p));
	const Tp f0 = data855[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data856[] = {
  { 0.78841770016803325, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.55092905081432408, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.43718780399449203, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.36743325468131166, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.31931301755908925, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.28370170658624394, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.25607743108839104, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.23391006877275144, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.21565961679522067, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.20032866163672836, 4.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test856()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data856)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data856[i].x), Tp(data856[i].y),
		     Tp(data856[i].z), Tp(data856[i].p));
	const Tp f0 = data856[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data857[] = {
  { 0.73606083017861434, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.41070634284965735, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.30089848244725997, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.26763661712549192, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.22104742408748265, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.20394381261466935, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18956390308246604, 4.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test857()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data857)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data857[i].x), Tp(data857[i].y),
		     Tp(data857[i].z), Tp(data857[i].p));
	const Tp f0 = data857[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data858[] = {
  { 0.69355180313411036, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.21037210353882049, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 4.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test858()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data858)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data858[i].x), Tp(data858[i].y),
		     Tp(data858[i].z), Tp(data858[i].p));
	const Tp f0 = data858[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data859[] = {
  { 0.65806839500142289, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.46425363300148992, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.37061941990368913, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.31284917785471167, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.27281052919218196, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.24306737484318022, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21992117520979024, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.20129588838919915, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.18592435720628581, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.17298383326391548, 4.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test859()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data859)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data859[i].x), Tp(data859[i].y),
		     Tp(data859[i].z), Tp(data859[i].p));
	const Tp f0 = data859[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data860[] = {
  { 0.62781986015308988, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 4.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test860()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data860)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data860[i].x), Tp(data860[i].y),
		     Tp(data860[i].z), Tp(data860[i].p));
	const Tp f0 = data860[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data861[] = {
  { 0.60160394534475825, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.18653078812307397, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 4.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test861()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data861)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data861[i].x), Tp(data861[i].y),
		     Tp(data861[i].z), Tp(data861[i].p));
	const Tp f0 = data861[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data862[] = {
  { 2.1706589694463734, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.3438542313870974, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.0019762220786403, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.80869336781236612, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.68247913939368532, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.59279828604933249, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.52541540183471169, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.47272980996559177, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.43028641113267230, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.39528882436548302, 4.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test862()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data862)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data862[i].x), Tp(data862[i].y),
		     Tp(data862[i].z), Tp(data862[i].p));
	const Tp f0 = data862[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data863[] = {
  { 1.0812295669164198, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.73947439202003218, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.57928671639991769, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.48243192207925401, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.41632034563196063, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.36780454317851452, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.33043080665859487, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.30061638462319057, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.27619521602672825, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.25577264818334156, 4.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test863()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data863)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data863[i].x), Tp(data863[i].y),
		     Tp(data863[i].z), Tp(data863[i].p));
	const Tp f0 = data863[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data864[] = {
  { 0.89018872093237578, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.61982700184952677, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.49052343231212836, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.41136226848214746, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.35684393218828647, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.31655977795033724, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.28535464670455979, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.26034599630094629, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23978059710511687, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.22252379047510520, 4.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test864()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data864)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data864[i].x), Tp(data864[i].y),
		     Tp(data864[i].z), Tp(data864[i].p));
	const Tp f0 = data864[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data865[] = {
  { 0.78282517157855247, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 4.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test865()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data865)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data865[i].x), Tp(data865[i].y),
		     Tp(data865[i].z), Tp(data865[i].p));
	const Tp f0 = data865[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data866[] = {
  { 0.71006966150449546, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611414, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642282, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976949, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 4.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test866()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data866)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data866[i].x), Tp(data866[i].y),
		     Tp(data866[i].z), Tp(data866[i].p));
	const Tp f0 = data866[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data867[] = {
  { 0.65604142963415024, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.37437691626847652, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.24699601870248772, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.20493348073535306, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 4.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test867()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data867)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data867[i].x), Tp(data867[i].y),
		     Tp(data867[i].z), Tp(data867[i].p));
	const Tp f0 = data867[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data868[] = {
  { 0.61363584810867344, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 4.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test868()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data868)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data868[i].x), Tp(data868[i].y),
		     Tp(data868[i].z), Tp(data868[i].p));
	const Tp f0 = data868[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data869[] = {
  { 0.57908381201537662, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.41508412062446831, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.33430182888427140, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.28387114522476464, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.24862809777110176, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.20167510684220102, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.18502449827060388, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.17123442227170890, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15959019453143747, 4.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test869()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data869)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data869[i].x), Tp(data869[i].y),
		     Tp(data869[i].z), Tp(data869[i].p));
	const Tp f0 = data869[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data870[] = {
  { 0.55015773617347585, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.39540021192192726, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.31898395594683676, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.27119756297906350, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.23775830787373986, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.21273321233390208, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.19314237133994716, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17729989403903632, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.16416997417507503, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.15307628754308211, 4.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test870()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data870)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data870[i].x), Tp(data870[i].y),
		     Tp(data870[i].z), Tp(data870[i].p));
	const Tp f0 = data870[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data871[] = {
  { 0.52543810875974817, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.37848959024338219, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.30578138769068514, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.26024863529587455, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.22835077510766039, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.20445728661137186, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17058958463505428, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15802760630811116, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14740810939919627, 4.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test871()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data871)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data871[i].x), Tp(data871[i].y),
		     Tp(data871[i].z), Tp(data871[i].p));
	const Tp f0 = data871[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data872[] = {
  { 0.50396843767233279, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017671, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285188, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568880, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100889, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931739, 4.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test872()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data872)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data872[i].x), Tp(data872[i].y),
		     Tp(data872[i].z), Tp(data872[i].p));
	const Tp f0 = data872[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data873[] = {
  { 1.8533869395258991, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1587298464787144, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.86902926564433447, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.70430122208049029, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.59626528265163836, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.51923347706414547, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.46118714068187927, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.41568974422172894, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.37895866483944485, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.34861414334458163, 4.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test873()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data873)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data873[i].x), Tp(data873[i].y),
		     Tp(data873[i].z), Tp(data873[i].p));
	const Tp f0 = data873[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data874[] = {
  { 0.94618205076987916, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.65355051966826572, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.51497797638211906, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.43063641346229348, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.37278471192273893, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33016701956357192, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.29723323378411420, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27089078041687914, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.24926404039506461, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23114205210352151, 4.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test874()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data874)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data874[i].x), Tp(data874[i].y),
		     Tp(data874[i].z), Tp(data874[i].p));
	const Tp f0 = data874[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data875[] = {
  { 0.78282517157855247, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.55058670798601161, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.43831649206456907, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.36910679121025747, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32119950033386263, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.28565896051761780, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.25803841677376022, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.23584167134100853, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.21754541996298526, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20216096054451788, 4.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test875()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data875)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data875[i].x), Tp(data875[i].y),
		     Tp(data875[i].z), Tp(data875[i].p));
	const Tp f0 = data875[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data876[] = {
  { 0.69035607662225196, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.49052343231212836, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.39284474545064513, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.33220110465216679, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29000418212636553, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.25857189316307361, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23406245030266770, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21431050909870994, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19799012457061493, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18423812735553041, 4.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test876()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data876)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data876[i].x), Tp(data876[i].y),
		     Tp(data876[i].z), Tp(data876[i].p));
	const Tp f0 = data876[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data877[] = {
  { 0.62740921358182578, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.21692456200648205, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19887612892179199, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 4.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test877()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data877)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data877[i].x), Tp(data877[i].y),
		     Tp(data877[i].z), Tp(data877[i].p));
	const Tp f0 = data877[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data878[] = {
  { 0.58051166300235479, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.41745779321617121, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.33676551537135990, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.28625539161389379, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25089289504482515, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22442219709333006, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20369767690093499, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.18693825882529833, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17304901128802960, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16131469056810757, 4.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test878()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data878)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data878[i].x), Tp(data878[i].y),
		     Tp(data878[i].z), Tp(data878[i].p));
	const Tp f0 = data878[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data879[] = {
  { 0.54360942652648092, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 4.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test879()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data879)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data879[i].x), Tp(data879[i].y),
		     Tp(data879[i].z), Tp(data879[i].p));
	const Tp f0 = data879[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data880[] = {
  { 0.51347985591731382, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 4.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test880()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data880)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data880[i].x), Tp(data880[i].y),
		     Tp(data880[i].z), Tp(data880[i].p));
	const Tp f0 = data880[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data881[] = {
  { 0.48821306476340537, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.35459593356276303, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.28783518604533220, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.24576984570466776, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.21617055422466744, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19392296757294850, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17644476239784854, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16226862482523116, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15048971552664522, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14051533635416971, 4.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test881()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data881)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data881[i].x), Tp(data881[i].y),
		     Tp(data881[i].z), Tp(data881[i].p));
	const Tp f0 = data881[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data882[] = {
  { 0.46658916663652034, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15625051876858434, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14497441712587619, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 4.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test882()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data882)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data882[i].x), Tp(data882[i].y),
		     Tp(data882[i].z), Tp(data882[i].p));
	const Tp f0 = data882[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data883[] = {
  { 0.44778454024562891, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 4.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test883()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data883)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data883[i].x), Tp(data883[i].y),
		     Tp(data883[i].z), Tp(data883[i].p));
	const Tp f0 = data883[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data884[] = {
  { 1.6499366323032025, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0382700842969894, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.78179340212247594, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.63540981359548432, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.53912823334761450, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.47031702519777602, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.41836350380340265, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.37757309719027227, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.34459354439341267, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.31731266011780507, 4.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test884()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data884)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data884[i].x), Tp(data884[i].y),
		     Tp(data884[i].z), Tp(data884[i].p));
	const Tp f0 = data884[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data885[] = {
  { 0.85542246869229122, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.59481476038011782, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.47058821590383693, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.39464586865175760, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.34238370999757667, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.30378252426664054, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.27388766409130511, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.24993166265595113, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23023258035155689, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.21370251886958525, 4.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test885()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data885)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data885[i].x), Tp(data885[i].y),
		     Tp(data885[i].z), Tp(data885[i].p));
	const Tp f0 = data885[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data886[] = {
  { 0.71006966150449546, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.50282434464611414, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.40193548138642282, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.33945510164031767, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.29605700349125819, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.26377357847854027, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23862760506976949, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21838072549338963, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20166397223106278, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18758710228952716, 4.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test886()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data886)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data886[i].x), Tp(data886[i].y),
		     Tp(data886[i].z), Tp(data886[i].p));
	const Tp f0 = data886[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data887[] = {
  { 0.62740921358182578, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.44888312779360867, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.36098876068085428, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.30616051418179241, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26787502741228736, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23927625190125548, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21692456200648208, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19887612892179199, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18393793869871128, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17133180971201439, 4.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test887()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data887)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data887[i].x), Tp(data887[i].y),
		     Tp(data887[i].z), Tp(data887[i].p));
	const Tp f0 = data887[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data888[] = {
  { 0.57097108596555690, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.41136226848214735, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.33220110465216668, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.28258106989482701, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24780725960056418, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22175728741852699, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20134956551950126, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18483786021034576, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17114792855430452, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15957763113942439, 4.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test888()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data888)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data888[i].x), Tp(data888[i].y),
		     Tp(data888[i].z), Tp(data888[i].p));
	const Tp f0 = data888[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data889[] = {
  { 0.52883058269086791, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 4.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test889()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data889)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data889[i].x), Tp(data889[i].y),
		     Tp(data889[i].z), Tp(data889[i].p));
	const Tp f0 = data889[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data890[] = {
  { 0.49561461055199763, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853897, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464495, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468991, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261051, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668173, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 4.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test890()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data890)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data890[i].x), Tp(data890[i].y),
		     Tp(data890[i].z), Tp(data890[i].p));
	const Tp f0 = data890[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data891[] = {
  { 0.46845679275670005, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 4.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test891()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data891)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data891[i].x), Tp(data891[i].y),
		     Tp(data891[i].z), Tp(data891[i].p));
	const Tp f0 = data891[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data892[] = {
  { 0.44565535953864488, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.32601321974974723, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26577099833075696, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22761962087512766, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20067273908200425, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18035802420177471, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16435888718022032, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15135523250739152, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14053100249339395, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13135050397608272, 4.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test892()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data892)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data892[i].x), Tp(data892[i].y),
		     Tp(data892[i].z), Tp(data892[i].p));
	const Tp f0 = data892[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data893[] = {
  { 0.42612170945034850, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.31245388549811498, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14582603024683105, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 4.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test893()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data893)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data893[i].x), Tp(data893[i].y),
		     Tp(data893[i].z), Tp(data893[i].p));
	const Tp f0 = data893[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data894[] = {
  { 0.40911989618188382, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646452, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051629, 4.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test894()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data894)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data894[i].x), Tp(data894[i].y),
		     Tp(data894[i].z), Tp(data894[i].p));
	const Tp f0 = data894[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data895[] = {
  { 1.5042726072947898, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.95112253927232826, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.71829528725355785, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.58505178588131612, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.49722921558246908, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.43435581561273917, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38681653176455949, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34944504467543969, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31919639053452625, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.29414992917905991, 4.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test895()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data895)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data895[i].x), Tp(data895[i].y),
		     Tp(data895[i].z), Tp(data895[i].p));
	const Tp f0 = data895[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data896[] = {
  { 0.78841770016803303, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.55092905081432408, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43718780399449203, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36743325468131166, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31931301755908920, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28370170658624394, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25607743108839098, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23391006877275144, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21565961679522061, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20032866163672836, 4.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test896()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data896)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data896[i].x), Tp(data896[i].y),
		     Tp(data896[i].z), Tp(data896[i].p));
	const Tp f0 = data896[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data897[] = {
  { 0.65604142963415024, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46690886243398255, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.37437691626847652, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31687943486130737, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27684095488117799, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24699601870248772, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22370997140978718, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20493348073535306, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18941118768810428, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17632558199348669, 4.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test897()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data897)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data897[i].x), Tp(data897[i].y),
		     Tp(data897[i].z), Tp(data897[i].p));
	const Tp f0 = data897[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data898[] = {
  { 0.58051166300235479, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41745779321617121, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33676551537135990, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28625539161389379, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.25089289504482515, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22442219709333006, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20369767690093499, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18693825882529833, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17304901128802960, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16131469056810757, 4.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test898()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data898)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data898[i].x), Tp(data898[i].y),
		     Tp(data898[i].z), Tp(data898[i].p));
	const Tp f0 = data898[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data899[] = {
  { 0.52883058269086791, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.38297669463475420, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.31025426020255437, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26450853496326959, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.23236416483159619, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20823246271294929, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18929392277651108, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17394769345507102, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16120729899369959, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15042700390576980, 4.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test899()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data899)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data899[i].x), Tp(data899[i].y),
		     Tp(data899[i].z), Tp(data899[i].p));
	const Tp f0 = data899[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data900[] = {
  { 0.49018012937430860, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35684393218828631, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.29000418212636542, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24780725960056421, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21807596979319691, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19570731523648977, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17812071847896974, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16384806041360628, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15198309579273964, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14193170544719641, 4.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test900()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data900)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data900[i].x), Tp(data900[i].y),
		     Tp(data900[i].z), Tp(data900[i].p));
	const Tp f0 = data900[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data901[] = {
  { 0.45967650472366139, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18555961194525214, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 4.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test901()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data901)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data901[i].x), Tp(data901[i].y),
		     Tp(data901[i].z), Tp(data901[i].p));
	const Tp f0 = data901[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data902[] = {
  { 0.43471039393925859, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31881859381125427, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.26029452251677165, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19689745748590906, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16145178117610376, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14874331417509715, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 4.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test902()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data902)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data902[i].x), Tp(data902[i].y),
		     Tp(data902[i].z), Tp(data902[i].p));
	const Tp f0 = data902[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data903[] = {
  { 0.41373068672159558, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30427602297117118, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24885542593463816, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21362648473259205, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18867379829694031, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16982018255079648, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15494405085253882, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14283392536415829, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13273955248651215, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12416765878620190, 4.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test903()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data903)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data903[i].x), Tp(data903[i].y),
		     Tp(data903[i].z), Tp(data903[i].p));
	const Tp f0 = data903[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data904[] = {
  { 0.39574408342862827, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20535667623877887, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18152755381677393, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16350504415852035, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11979089459308076, 4.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test904()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data904)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data904[i].x), Tp(data904[i].y),
		     Tp(data904[i].z), Tp(data904[i].p));
	const Tp f0 = data904[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data905[] = {
  { 0.38007843235600525, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 4.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test905()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data905)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data905[i].x), Tp(data905[i].y),
		     Tp(data905[i].z), Tp(data905[i].p));
	const Tp f0 = data905[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data906[] = {
  { 1.3929441296287395, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.88398457805307318, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.66914333118853631, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.54594086204144898, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.46460550968196507, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.40629888645996021, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.36216265922393076, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.32743221820975338, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.29929679855963198, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.27598202463143412, 4.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test906()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data906)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data906[i].x), Tp(data906[i].y),
		     Tp(data906[i].z), Tp(data906[i].p));
	const Tp f0 = data906[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data907[] = {
  { 0.73606083017861434, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.51632285701741210, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.41070634284965735, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.34577545681272021, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.30089848244725997, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.26763661712549192, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.24180174534476331, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.22104742408748265, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.20394381261466935, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18956390308246604, 4.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test907()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data907)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data907[i].x), Tp(data907[i].y),
		     Tp(data907[i].z), Tp(data907[i].p));
	const Tp f0 = data907[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data908[] = {
  { 0.61363584810867344, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.43844962711812741, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.35241541951143035, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.29881711825722185, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.26142006378958110, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.23349951607281286, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.21168578111694678, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19407626059349831, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17950405903323632, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16720845365184703, 4.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test908()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data908)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data908[i].x), Tp(data908[i].y),
		     Tp(data908[i].z), Tp(data908[i].p));
	const Tp f0 = data908[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data909[] = {
  { 0.54360942652648092, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.39248680617487625, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.31740483360899419, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.27028080259246273, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.23722167063729346, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.21243444012001567, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.19300122904136710, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17726750745753769, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16421485145665982, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15317724869499230, 4.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test909()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data909)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data909[i].x), Tp(data909[i].y),
		     Tp(data909[i].z), Tp(data909[i].p));
	const Tp f0 = data909[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data910[] = {
  { 0.49561461055199763, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.36037809363511369, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.29267747713344461, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24997405499853897, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21990486754086408, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.19729310775464495, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17952247411468991, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16510527294261051, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15312356769668173, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14297579667156751, 4.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test910()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data910)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data910[i].x), Tp(data910[i].y),
		     Tp(data910[i].z), Tp(data910[i].p));
	const Tp f0 = data910[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data911[] = {
  { 0.45967650472366151, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.33600939903880178, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.27376183890591471, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.23435442661334893, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20652966753789137, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18555961194525217, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16904905882738924, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15563327802202254, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14446872861232091, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13500175069214682, 4.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test911()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data911)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data911[i].x), Tp(data911[i].y),
		     Tp(data911[i].z), Tp(data911[i].p));
	const Tp f0 = data911[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data912[] = {
  { 0.43128556654674499, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.31655977795033724, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.25857189316307355, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.22175728741852707, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19570731523648979, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17604078349891775, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16053412172144979, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14791843300216456, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13740835597815623, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12848780299987314, 4.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test912()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data912)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data912[i].x), Tp(data912[i].y),
		     Tp(data912[i].z), Tp(data912[i].p));
	const Tp f0 = data912[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data913[] = {
  { 0.40802969980361020, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.30049702418283175, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24596488916490480, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.21126552674107041, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18666950997871168, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16807441510136864, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15339517205504866, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 4.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test913()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data913)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data913[i].x), Tp(data913[i].y),
		     Tp(data913[i].z), Tp(data913[i].p));
	const Tp f0 = data913[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data914[] = {
  { 0.38847366574624653, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.28689821387845493, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23524769366779633, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.20232025929616423, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17894643378355898, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16125448077398069, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14727429240199458, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13587911055911933, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12637018703120828, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11828755184020920, 4.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test914()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data914)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data914[i].x), Tp(data914[i].y),
		     Tp(data914[i].z), Tp(data914[i].p));
	const Tp f0 = data914[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data915[] = {
  { 0.37169761313905048, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.27516581242813926, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22596892122058534, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19455607506131359, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12191100711677891, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11416113809265731, 4.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test915()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data915)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data915[i].x), Tp(data915[i].y),
		     Tp(data915[i].z), Tp(data915[i].p));
	const Tp f0 = data915[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data916[] = {
  { 0.35707864409656193, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947164, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262627, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373213, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455752, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855294, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 4.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test916()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data916)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data916[i].x), Tp(data916[i].y),
		     Tp(data916[i].z), Tp(data916[i].p));
	const Tp f0 = data916[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data917[] = {
  { 1.3040763567820968, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.83004880593973707, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.62950378812379226, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.51431265633309353, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.43816812315985121, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.38352413888786485, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.34212250135987987, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.30951782104299036, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.28308576470346958, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.26116856880011352, 4.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test917()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data917)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data917[i].x), Tp(data917[i].y),
		     Tp(data917[i].z), Tp(data917[i].p));
	const Tp f0 = data917[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data918[] = {
  { 0.69355180313411036, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.48802050118711376, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.38895339542169716, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.32792950613240790, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.28568887719658587, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.25434224904378266, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22996951235475088, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21037210353882052, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19420907629996198, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18061035024574290, 4.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test918()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data918)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data918[i].x), Tp(data918[i].y),
		     Tp(data918[i].z), Tp(data918[i].p));
	const Tp f0 = data918[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data919[] = {
  { 0.57908381201537662, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.41508412062446831, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.33430182888427140, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.28387114522476464, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.24862809777110176, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22228157849644301, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20167510684220102, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18502449827060388, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17123442227170890, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15959019453143747, 4.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test919()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data919)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data919[i].x), Tp(data919[i].y),
		     Tp(data919[i].z), Tp(data919[i].p));
	const Tp f0 = data919[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data920[] = {
  { 0.51347985591731382, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.37193884315489434, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.30139821221421109, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.25702956569513996, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.22585215760492189, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20244453840041221, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18407229860844418, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16918315988532187, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15682067595870794, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14635880516614860, 4.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test920()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data920)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data920[i].x), Tp(data920[i].y),
		     Tp(data920[i].z), Tp(data920[i].p));
	const Tp f0 = data920[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data921[] = {
  { 0.46845679275670005, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.34175337852672383, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.27812172279369357, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.23789668754143037, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20952487030144909, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18816032464949170, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17135057751833419, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15769944445407627, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14634456099900495, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13672026410798108, 4.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test921()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data921)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data921[i].x), Tp(data921[i].y),
		     Tp(data921[i].z), Tp(data921[i].p));
	const Tp f0 = data921[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data922[] = {
  { 0.43471039393925859, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.31881859381125427, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26029452251677165, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22316140591139214, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19689745748590906, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17707613830247199, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16145178117610376, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14874331417509715, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13815806997901733, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12917529120370497, 4.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test922()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data922)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data922[i].x), Tp(data922[i].y),
		     Tp(data922[i].z), Tp(data922[i].p));
	const Tp f0 = data922[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data923[] = {
  { 0.40802969980361031, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30049702418283175, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.24596488916490486, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21126552674107041, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18666950997871168, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16807441510136864, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15339517205504866, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14144046272985844, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13147215114414701, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12300472030256521, 4.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test923()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data923)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data923[i].x), Tp(data923[i].y),
		     Tp(data923[i].z), Tp(data923[i].p));
	const Tp f0 = data923[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data924[] = {
  { 0.38616032574252929, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.28535464670455984, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.23406245030266770, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20134956551950123, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17812071847896979, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16053412172144979, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14663434214427465, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13530274428287928, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12584547310650945, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11780569675934753, 4.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test924()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data924)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data924[i].x), Tp(data924[i].y),
		     Tp(data924[i].z), Tp(data924[i].p));
	const Tp f0 = data924[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data925[] = {
  { 0.36775987208625094, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.27252692999279854, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.22393736300073205, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19288923355417037, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17081015574379926, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15407407058509440, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14083317720134331, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13002934283364664, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12100565601188112, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11332926434347651, 4.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test925()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data925)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data925[i].x), Tp(data925[i].y),
		     Tp(data925[i].z), Tp(data925[i].p));
	const Tp f0 = data925[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data926[] = {
  { 0.35196743249392498, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.21516608970229772, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18554144632956851, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16444842520831870, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12542167802943821, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 4.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test926()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data926)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data926[i].x), Tp(data926[i].y),
		     Tp(data926[i].z), Tp(data926[i].p));
	const Tp f0 = data926[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data927[] = {
  { 0.33819969287467350, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14346870994699223, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13129155535329287, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 4.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test927()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data927)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data927[i].x), Tp(data927[i].y),
		     Tp(data927[i].z), Tp(data927[i].p));
	const Tp f0 = data927[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data928[] = {
  { 1.2308942620129160, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.78539816339744839, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.59658200011729901, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.48798385671321498, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.41612132636432358, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.36450455615898186, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.32536674470345206, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.29452431127404305, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.26950604222632363, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.24875007088012702, 4.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test928()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data928)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data928[i].x), Tp(data928[i].y),
		     Tp(data928[i].z), Tp(data928[i].p));
	const Tp f0 = data928[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data929[] = {
  { 0.65806839500142289, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.46425363300148992, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.37061941990368913, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.31284917785471167, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.27281052919218196, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.24306737484318022, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.21992117520979024, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.20129588838919915, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18592435720628581, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.17298383326391548, 4.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test929()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data929)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data929[i].x), Tp(data929[i].y),
		     Tp(data929[i].z), Tp(data929[i].p));
	const Tp f0 = data929[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data930[] = {
  { 0.55015773617347585, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.39540021192192726, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.31898395594683676, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.27119756297906350, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.23775830787373986, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.21273321233390208, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.19314237133994716, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17729989403903632, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.16416997417507503, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15307628754308211, 4.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test930()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data930)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data930[i].x), Tp(data930[i].y),
		     Tp(data930[i].z), Tp(data930[i].p));
	const Tp f0 = data930[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data931[] = {
  { 0.48821306476340537, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.35459593356276303, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.28783518604533220, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.24576984570466776, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.21617055422466744, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.19392296757294850, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17644476239784854, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16226862482523116, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15048971552664522, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14051533635416971, 4.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test931()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data931)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data931[i].x), Tp(data931[i].y),
		     Tp(data931[i].z), Tp(data931[i].p));
	const Tp f0 = data931[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data932[] = {
  { 0.44565535953864488, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.32601321974974723, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.26577099833075696, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.22761962087512766, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20067273908200425, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18035802420177471, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.16435888718022032, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15135523250739152, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14053100249339395, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13135050397608272, 4.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test932()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data932)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data932[i].x), Tp(data932[i].y),
		     Tp(data932[i].z), Tp(data932[i].p));
	const Tp f0 = data932[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data933[] = {
  { 0.41373068672159558, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.30427602297117118, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.24885542593463816, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.21362648473259205, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18867379829694031, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.16982018255079648, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15494405085253882, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14283392536415829, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13273955248651215, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12416765878620190, 4.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test933()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data933)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data933[i].x), Tp(data933[i].y),
		     Tp(data933[i].z), Tp(data933[i].p));
	const Tp f0 = data933[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data934[] = {
  { 0.38847366574624653, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.28689821387845493, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.23524769366779633, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.20232025929616423, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17894643378355898, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16125448077398069, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14727429240199458, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13587911055911933, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12637018703120828, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11828755184020920, 4.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test934()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data934)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data934[i].x), Tp(data934[i].y),
		     Tp(data934[i].z), Tp(data934[i].p));
	const Tp f0 = data934[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data935[] = {
  { 0.36775987208625094, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.27252692999279854, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.22393736300073205, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.19288923355417037, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17081015574379926, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.15407407058509440, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14083317720134331, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13002934283364664, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12100565601188112, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11332926434347651, 4.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test935()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data935)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data935[i].x), Tp(data935[i].y),
		     Tp(data935[i].z), Tp(data935[i].p));
	const Tp f0 = data935[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data936[] = {
  { 0.35032352839115050, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.26034599630094635, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.21431050909870994, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.18483786021034573, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.16384806041360625, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14791843300216456, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13530274428287928, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12500000000000000, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11638820193013963, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10905717299758165, 4.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test936()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data936)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data936[i].x), Tp(data936[i].y),
		     Tp(data936[i].z), Tp(data936[i].p));
	const Tp f0 = data936[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data937[] = {
  { 0.33535244167308820, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.24982627348259920, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.20596673883085315, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17784163491549262, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15778631831232606, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14255021489450143, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13047326015640071, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12060304246691116, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11234730565945149, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10531522201643984, 4.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test937()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data937)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data937[i].x), Tp(data937[i].y),
		     Tp(data937[i].z), Tp(data937[i].p));
	const Tp f0 = data937[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data938[] = {
  { 0.32229604854757482, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.24060591252980174, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19863084151656732, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17167672279762300, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15243555167854192, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13780492604270261, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12619913157295062, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11670775397301596, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10876428955779004, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10199468867893653, 4.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test938()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data938)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data938[i].x), Tp(data938[i].y),
		     Tp(data938[i].z), Tp(data938[i].p));
	const Tp f0 = data938[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data939[] = {
  { 1.1691998689776044, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.74758821090642469, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.56862689470089289, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.46558271169861637, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.39733462013473336, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.34827731549864349, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.31105617972296390, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.28170753134865645, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.25788891816182635, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.23811920078124657, 4.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test939()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data939)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data939[i].x), Tp(data939[i].y),
		     Tp(data939[i].z), Tp(data939[i].p));
	const Tp f0 = data939[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data940[] = {
  { 0.62781986015308988, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 4.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test940()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data940)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data940[i].x), Tp(data940[i].y),
		     Tp(data940[i].z), Tp(data940[i].p));
	const Tp f0 = data940[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data941[] = {
  { 0.52543810875974817, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.37848959024338219, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.30578138769068514, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.26024863529587455, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.22835077510766039, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.20445728661137186, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17058958463505428, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15802760630811116, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14740810939919627, 4.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test941()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data941)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data941[i].x), Tp(data941[i].y),
		     Tp(data941[i].z), Tp(data941[i].p));
	const Tp f0 = data941[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data942[] = {
  { 0.46658916663652034, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15625051876858434, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14497441712587619, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 4.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test942()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data942)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data942[i].x), Tp(data942[i].y),
		     Tp(data942[i].z), Tp(data942[i].p));
	const Tp f0 = data942[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data943[] = {
  { 0.42612170945034850, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.31245388549811498, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14582603024683111, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 4.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test943()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data943)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data943[i].x), Tp(data943[i].y),
		     Tp(data943[i].z), Tp(data943[i].p));
	const Tp f0 = data943[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data944[] = {
  { 0.39574408342862827, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.20535667623877890, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18152755381677393, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.16350504415852035, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11979089459308076, 4.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test944()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data944)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data944[i].x), Tp(data944[i].y),
		     Tp(data944[i].z), Tp(data944[i].p));
	const Tp f0 = data944[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data945[] = {
  { 0.37169761313905048, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.27516581242813926, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.22596892122058534, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.19455607506131364, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12191100711677894, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11416113809265731, 4.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test945()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data945)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data945[i].x), Tp(data945[i].y),
		     Tp(data945[i].z), Tp(data945[i].p));
	const Tp f0 = data945[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data946[] = {
  { 0.35196743249392498, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.21516608970229778, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.18554144632956851, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.16444842520831870, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12542167802943824, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 4.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test946()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data946)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data946[i].x), Tp(data946[i].y),
		     Tp(data946[i].z), Tp(data946[i].p));
	const Tp f0 = data946[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data947[] = {
  { 0.33535244167308820, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.24982627348259920, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.20596673883085315, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17784163491549262, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15778631831232606, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14255021489450143, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13047326015640071, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12060304246691116, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11234730565945149, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10531522201643984, 4.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test947()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data947)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data947[i].x), Tp(data947[i].y),
		     Tp(data947[i].z), Tp(data947[i].p));
	const Tp f0 = data947[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data948[] = {
  { 0.32108161258352425, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.23978059710511687, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19799012457061499, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17114792855430458, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15198309579273966, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13740835597815626, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12584547310650948, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11638820193013964, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10847256570159687, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10172614406502369, 4.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test948()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data948)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data948[i].x), Tp(data948[i].y),
		     Tp(data948[i].z), Tp(data948[i].p));
	const Tp f0 = data948[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data949[] = {
  { 0.30863208433619260, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13286125114219741, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12174808465966325, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11265260970224160, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 4.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test949()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data949)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data949[i].x), Tp(data949[i].y),
		     Tp(data949[i].z), Tp(data949[i].p));
	const Tp f0 = data949[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data950[] = {
  { 1.1162289525908911, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.71499953726585297, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.54447432971840126, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.44619507700934191, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.38105329983216329, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.33419876538580223, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.29862916776034337, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.27056899795342709, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.24778609888688150, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.22886854366397424, 4.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test950()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data950)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data950[i].x), Tp(data950[i].y),
		     Tp(data950[i].z), Tp(data950[i].p));
	const Tp f0 = data950[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data951[] = {
  { 0.60160394534475825, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.18653078812307397, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 4.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test951()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data951)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data951[i].x), Tp(data951[i].y),
		     Tp(data951[i].z), Tp(data951[i].p));
	const Tp f0 = data951[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data952[] = {
  { 0.50396843767233279, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017671, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285188, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568880, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100889, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931739, 4.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test952()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data952)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data952[i].x), Tp(data952[i].y),
		     Tp(data952[i].z), Tp(data952[i].p));
	const Tp f0 = data952[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data953[] = {
  { 0.44778454024562891, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 4.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test953()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data953)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data953[i].x), Tp(data953[i].y),
		     Tp(data953[i].z), Tp(data953[i].p));
	const Tp f0 = data953[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data954[] = {
  { 0.40911989618188382, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646452, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051629, 4.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test954()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data954)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data954[i].x), Tp(data954[i].y),
		     Tp(data954[i].z), Tp(data954[i].p));
	const Tp f0 = data954[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data955[] = {
  { 0.38007843235600525, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 4.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test955()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data955)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data955[i].x), Tp(data955[i].y),
		     Tp(data955[i].z), Tp(data955[i].p));
	const Tp f0 = data955[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data956[] = {
  { 0.35707864409656193, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947164, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262627, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373213, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455752, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855297, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 4.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test956()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data956)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data956[i].x), Tp(data956[i].y),
		     Tp(data956[i].z), Tp(data956[i].p));
	const Tp f0 = data956[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data957[] = {
  { 0.33819969287467350, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14346870994699223, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13129155535329287, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 4.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test957()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data957)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data957[i].x), Tp(data957[i].y),
		     Tp(data957[i].z), Tp(data957[i].p));
	const Tp f0 = data957[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data958[] = {
  { 0.32229604854757482, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.24060591252980174, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.19863084151656732, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17167672279762300, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15243555167854192, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.13780492604270261, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.12619913157295062, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.11670775397301596, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10876428955779004, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10199468867893653, 4.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test958()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data958)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data958[i].x), Tp(data958[i].y),
		     Tp(data958[i].z), Tp(data958[i].p));
	const Tp f0 = data958[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data959[] = {
  { 0.30863208433619260, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13286125114219741, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12174808465966325, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11265260970224160, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 4.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test959()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data959)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data959[i].x), Tp(data959[i].y),
		     Tp(data959[i].z), Tp(data959[i].p));
	const Tp f0 = data959[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data960[] = {
  { 0.29670878274813522, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.22252379047510515, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.18423812735553041, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.15957763113942444, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14193170544719644, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.12848780299987309, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11780569675934752, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10905717299758165, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10172614406502367, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.095471413501209176, 4.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test960()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data960)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data960[i].x), Tp(data960[i].y),
		     Tp(data960[i].z), Tp(data960[i].p));
	const Tp f0 = data960[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data961[] = {
  { 2.6498983543265657, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.6138084171153579, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.1920055072756153, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.95589630327837638, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.80283267460018048, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.69468986307888980, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.61381026139851969, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.55081653632788519, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.50023718770301384, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.45865137206980555, 4.5000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test961()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data961)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data961[i].x), Tp(data961[i].y),
		     Tp(data961[i].z), Tp(data961[i].p));
	const Tp f0 = data961[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data962[] = {
  { 2.0589291172490309, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.2768630731912678, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.95308464885741362, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.76986883081994806, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.65014162880697246, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.56501838754091338, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.50102641833300765, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.45096909104005573, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.41062645838168715, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.37734878208318057, 4.5000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test962()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data962)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data962[i].x), Tp(data962[i].y),
		     Tp(data962[i].z), Tp(data962[i].p));
	const Tp f0 = data962[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data963[] = {
  { 1.7587429565378301, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.1015594456906996, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.82712578126447844, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.67092792533634515, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.56840710705423447, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.49526024630920346, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.44011053425851082, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.39686230526729743, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.36193173526911160, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.33306326488968285, 4.5000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test963()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data963)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data963[i].x), Tp(data963[i].y),
		     Tp(data963[i].z), Tp(data963[i].p));
	const Tp f0 = data963[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data964[] = {
  { 1.5661537714260798, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.98741765401777437, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.74441545361230743, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.60558237286346228, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.51419308374047967, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.44883400631269627, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.39945803864977020, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.36067143569402699, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.32929762047761185, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.30333429561267361, 4.5000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test964()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data964)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data964[i].x), Tp(data964[i].y),
		     Tp(data964[i].z), Tp(data964[i].p));
	const Tp f0 = data964[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data965[] = {
  { 1.4282140314406910, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.90480084152367868, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.68417801528911082, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.55778729967423868, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.47441179365269026, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.41468023686761379, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.36948923018706037, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.33394489335839761, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.30516151808247988, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.28131815919983078, 4.5000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test965()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data965)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data965[i].x), Tp(data965[i].y),
		     Tp(data965[i].z), Tp(data965[i].p));
	const Tp f0 = data965[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data966[] = {
  { 1.3227570824359496, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.84112838412201096, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.63752909715586958, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.52064865027744411, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.44342072162483798, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.38801871838912422, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.34605516653010249, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.31301637554331807, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.28623835999824737, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.26403868659882423, 4.5000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test966()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data966)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data966[i].x), Tp(data966[i].y),
		     Tp(data966[i].z), Tp(data966[i].p));
	const Tp f0 = data966[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data967[] = {
  { 1.2385549085969758, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.78995987832038939, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.59989401503220152, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.49060298973382915, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.41829529228584011, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.36636660361944123, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.32699729527497673, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.29597583875094419, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.27081477697700107, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.24994212735723548, 4.5000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test967()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data967)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data967[i].x), Tp(data967[i].y),
		     Tp(data967[i].z), Tp(data967[i].p));
	const Tp f0 = data967[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data968[] = {
  { 1.1691998689776044, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.74758821090642469, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.56862689470089289, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.46558271169861637, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.39733462013473336, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.34827731549864349, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.31105617972296390, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.28170753134865645, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.25788891816182635, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.23811920078124657, 4.5000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test968()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data968)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data968[i].x), Tp(data968[i].y),
		     Tp(data968[i].z), Tp(data968[i].p));
	const Tp f0 = data968[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data969[] = {
  { 1.1107207345395917, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.71169928894443057, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.54206934046880317, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.44428829381583673, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.37946750532982371, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.33283838484809575, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.29743639346488798, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.26950604222632363, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.24682682989768701, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.22799409953393038, 4.5000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test969()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data969)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data969[i].x), Tp(data969[i].y),
		     Tp(data969[i].z), Tp(data969[i].p));
	const Tp f0 = data969[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data970[] = {
  { 1.0605020626175816, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.68075965854518705, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.51911849792031284, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.42585344699120309, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.36397858547212425, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.31943960239213492, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.28560540065993695, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.25889866065655154, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.23720335234329346, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.21918039874741832, 4.5000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test970()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data970)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data970[i].x), Tp(data970[i].y),
		     Tp(data970[i].z), Tp(data970[i].p));
	const Tp f0 = data970[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data971[] = {
  { 2.6498983543265657, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.6138084171153579, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1920055072756153, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.95589630327837638, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.80283267460018048, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.69468986307888980, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.61381026139851969, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.55081653632788519, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.50023718770301384, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.45865137206980555, 4.5000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test971()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data971)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data971[i].x), Tp(data971[i].y),
		     Tp(data971[i].z), Tp(data971[i].p));
	const Tp f0 = data971[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data972[] = {
  { 1.2604751625374033, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.84850945081602158, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.65881669877867521, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.54536685068321544, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.46852703419365971, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.41247333238452277, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.36949897192586928, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.33535244167308814, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.30747679967138358, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.28423305952716632, 4.5000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test972()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data972)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data972[i].x), Tp(data972[i].y),
		     Tp(data972[i].z), Tp(data972[i].p));
	const Tp f0 = data972[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data973[] = {
  { 1.0296247564337100, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.24532360659601604, 4.5000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test973()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data973)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data973[i].x), Tp(data973[i].y),
		     Tp(data973[i].z), Tp(data973[i].p));
	const Tp f0 = data973[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data974[] = {
  { 0.90151569394875264, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 4.5000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test974()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data974)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data974[i].x), Tp(data974[i].y),
		     Tp(data974[i].z), Tp(data974[i].p));
	const Tp f0 = data974[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data975[] = {
  { 0.81535812729905288, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.29123776130118412, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.20524892428816369, 4.5000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test975()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data975)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data975[i].x), Tp(data975[i].y),
		     Tp(data975[i].z), Tp(data975[i].p));
	const Tp f0 = data975[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data976[] = {
  { 0.75171669684617670, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.24573998678755615, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 4.5000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test976()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data976)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data976[i].x), Tp(data976[i].y),
		     Tp(data976[i].z), Tp(data976[i].p));
	const Tp f0 = data976[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data977[] = {
  { 0.70196643578457152, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.25677566527305340, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.21230066656860408, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 4.5000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test977()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data977)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data977[i].x), Tp(data977[i].y),
		     Tp(data977[i].z), Tp(data977[i].p));
	const Tp f0 = data977[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data978[] = {
  { 0.66155920777571686, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.46652318314465940, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.37233745780747152, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.31424297259281730, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.24408916990767496, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.20210711136517917, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18666070285211236, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.17365832663910130, 4.5000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test978()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data978)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data978[i].x), Tp(data978[i].y),
		     Tp(data978[i].z), Tp(data978[i].p));
	const Tp f0 = data978[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data979[] = {
  { 0.62781986015308988, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 4.5000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test979()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data979)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data979[i].x), Tp(data979[i].y),
		     Tp(data979[i].z), Tp(data979[i].p));
	const Tp f0 = data979[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data980[] = {
  { 0.59905039027703089, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.42449230788788933, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.33983690945412193, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.28746421372502651, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.25108898619570791, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.22401970229754875, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.20292276620803801, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.18592435720628583, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.17187932565251629, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.16004330932154517, 4.5000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test980()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data980)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data980[i].x), Tp(data980[i].y),
		     Tp(data980[i].z), Tp(data980[i].p));
	const Tp f0 = data980[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data981[] = {
  { 0.57411046795964726, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 4.5000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test981()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data981)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data981[i].x), Tp(data981[i].y),
		     Tp(data981[i].z), Tp(data981[i].p));
	const Tp f0 = data981[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data982[] = {
  { 2.0589291172490309, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2768630731912678, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.95308464885741362, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.76986883081994806, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.65014162880697235, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.56501838754091338, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.50102641833300765, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.45096909104005573, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.41062645838168715, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.37734878208318057, 4.5000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test982()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data982)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data982[i].x), Tp(data982[i].y),
		     Tp(data982[i].z), Tp(data982[i].p));
	const Tp f0 = data982[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data983[] = {
  { 1.0296247564337100, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.70555729253351007, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.55340955867323582, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.46130866251508085, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.39838452601716845, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.35217296144943844, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.31655137916070963, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.28811879674425644, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.26481795103277966, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.24532360659601604, 4.5000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test983()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data983)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data983[i].x), Tp(data983[i].y),
		     Tp(data983[i].z), Tp(data983[i].p));
	const Tp f0 = data983[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data984[] = {
  { 0.84850945081602180, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.59201357071832994, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.46912394674132923, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.39379555061681243, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.34186622865287231, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.30346430277664804, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.27369687614783889, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24982627348259923, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.23018642093643524, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.21369851061605935, 4.5000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test984()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data984)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data984[i].x), Tp(data984[i].y),
		     Tp(data984[i].z), Tp(data984[i].p));
	const Tp f0 = data984[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data985[] = {
  { 0.74660796947505947, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.30794075921469916, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.22648518245425828, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 4.5000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test985()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data985)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data985[i].x), Tp(data985[i].y),
		     Tp(data985[i].z), Tp(data985[i].p));
	const Tp f0 = data985[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data986[] = {
  { 0.67750062446352011, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 4.5000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test986()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data986)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data986[i].x), Tp(data986[i].y),
		     Tp(data986[i].z), Tp(data986[i].p));
	const Tp f0 = data986[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data987[] = {
  { 0.62615150586331814, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.35859920693491232, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.30383610797211441, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.26566096411271739, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.23717997682292766, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19699820373548479, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.18215617344720567, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 4.5000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test987()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data987)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data987[i].x), Tp(data987[i].y),
		     Tp(data987[i].z), Tp(data987[i].p));
	const Tp f0 = data987[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data988[] = {
  { 0.58582975227241507, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.28660951724649925, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 4.5000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test988()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data988)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data988[i].x), Tp(data988[i].y),
		     Tp(data988[i].z), Tp(data988[i].p));
	const Tp f0 = data988[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data989[] = {
  { 0.55296274146298530, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.39724951501383310, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.32039448944607335, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.27234759696322330, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23873336681128257, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.21358169594446563, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.19389460229359851, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.16478482871102296, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.15364022930203416, 4.5000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test989()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data989)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data989[i].x), Tp(data989[i].y),
		     Tp(data989[i].z), Tp(data989[i].p));
	const Tp f0 = data989[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data990[] = {
  { 0.52543810875974817, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.37848959024338219, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.30578138769068514, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.26024863529587450, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22835077510766039, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.20445728661137180, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.17058958463505428, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15802760630811116, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14740810939919627, 4.5000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test990()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data990)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data990[i].x), Tp(data990[i].y),
		     Tp(data990[i].z), Tp(data990[i].p));
	const Tp f0 = data990[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data991[] = {
  { 0.50190926592367568, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.36236732081523426, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.29318162565154315, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24979204521826587, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21936122444907369, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.19654546628095973, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17865617275751117, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.16416997417507501, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.15214967292571627, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.14198260091108919, 4.5000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test991()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data991)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data991[i].x), Tp(data991[i].y),
		     Tp(data991[i].z), Tp(data991[i].p));
	const Tp f0 = data991[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data992[] = {
  { 0.48146856024935336, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.28215395230194462, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.24062135428961687, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.21146460339264181, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 4.5000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test992()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data992)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data992[i].x), Tp(data992[i].y),
		     Tp(data992[i].z), Tp(data992[i].p));
	const Tp f0 = data992[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data993[] = {
  { 1.7587429565378301, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.1015594456906996, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.82712578126447844, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.67092792533634515, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.56840710705423447, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.49526024630920346, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.44011053425851082, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.39686230526729743, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.36193173526911160, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.33306326488968285, 4.5000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test993()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data993)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data993[i].x), Tp(data993[i].y),
		     Tp(data993[i].z), Tp(data993[i].p));
	const Tp f0 = data993[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data994[] = {
  { 0.90151569394875264, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.62395833903406261, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.49229699042093134, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.41206411074772303, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.35697803910541492, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.31636571729186419, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.28496056164237310, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25982612340055700, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23918047748576837, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.22187257729561510, 4.5000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test994()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data994)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data994[i].x), Tp(data994[i].y),
		     Tp(data994[i].z), Tp(data994[i].p));
	const Tp f0 = data994[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data995[] = {
  { 0.74660796947505947, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.52621854843823790, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.41947926040273381, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.35359351343455064, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.30794075921469916, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.27404448200626436, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.24768309314046530, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.22648518245425828, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20900272953827995, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.19429539012060429, 4.5000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test995()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data995)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data995[i].x), Tp(data995[i].y),
		     Tp(data995[i].z), Tp(data995[i].p));
	const Tp f0 = data995[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data996[] = {
  { 0.65881669877867544, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.46912394674132923, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.37622277080655520, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.31846715449229562, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.27823736960864387, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.24824442145508765, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.22484010849946631, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.20596673883085326, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.19036349996895291, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17720916259816363, 4.5000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test996()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data996)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data996[i].x), Tp(data996[i].y),
		     Tp(data996[i].z), Tp(data996[i].p));
	const Tp f0 = data996[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data997[] = {
  { 0.59900577193982218, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.19124047998168797, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17695302442341893, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 4.5000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test997()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data997)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data997[i].x), Tp(data997[i].y),
		     Tp(data997[i].z), Tp(data997[i].p));
	const Tp f0 = data997[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data998[] = {
  { 0.55441718621582214, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101521, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672187, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427743, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369857, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460564, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961029, 4.5000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test998()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data998)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data998[i].x), Tp(data998[i].y),
		     Tp(data998[i].z), Tp(data998[i].p));
	const Tp f0 = data998[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data999[] = {
  { 0.51931443788430542, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 4.5000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test999()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data999)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data999[i].x), Tp(data999[i].y),
		     Tp(data999[i].z), Tp(data999[i].p));
	const Tp f0 = data999[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1000[] = {
  { 0.49064226479292722, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480219, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557912, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619545, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682117, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596738, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 4.5000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1000()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1000)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1000[i].x), Tp(data1000[i].y),
		     Tp(data1000[i].z), Tp(data1000[i].p));
	const Tp f0 = data1000[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1001[] = {
  { 0.46658916663652034, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15625051876858434, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14497441712587619, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 4.5000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1001()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1001)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1001[i].x), Tp(data1001[i].y),
		     Tp(data1001[i].z), Tp(data1001[i].p));
	const Tp f0 = data1001[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1002[] = {
  { 0.44599764610881049, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.32543790241474613, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.26494427429221773, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.22671381966906326, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19975034455016183, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17944521689084741, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.16346723896224694, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15048971552664525, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13969338982979984, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13054095718169423, 4.5000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1002()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1002)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1002[i].x), Tp(data1002[i].y),
		     Tp(data1002[i].z), Tp(data1002[i].p));
	const Tp f0 = data1002[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1003[] = {
  { 0.42808593449069277, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 4.5000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1003()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1003)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1003[i].x), Tp(data1003[i].y),
		     Tp(data1003[i].z), Tp(data1003[i].p));
	const Tp f0 = data1003[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1004[] = {
  { 1.5661537714260798, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.98741765401777437, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.74441545361230743, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.60558237286346228, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.51419308374047967, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.44883400631269627, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.39945803864977020, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.36067143569402699, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.32929762047761185, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.30333429561267361, 4.5000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1004()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1004)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1004[i].x), Tp(data1004[i].y),
		     Tp(data1004[i].z), Tp(data1004[i].p));
	const Tp f0 = data1004[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1005[] = {
  { 0.81535812729905288, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.56813252439742801, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.45007490563254354, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.37781286698129474, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.32803438399904034, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.29123776130118406, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.26272072848126882, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23985507345256596, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.22104256809274758, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.20524892428816363, 4.5000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1005()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1005)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1005[i].x), Tp(data1005[i].y),
		     Tp(data1005[i].z), Tp(data1005[i].p));
	const Tp f0 = data1005[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1006[] = {
  { 0.67750062446352011, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.48079215144349863, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.38485010976187162, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.32535367486128924, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.28398498905612740, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.25318478117877519, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22917659913595478, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20983358880912450, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.19385417369521213, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18039146628683242, 4.5000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1006()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1006)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1006[i].x), Tp(data1006[i].y),
		     Tp(data1006[i].z), Tp(data1006[i].p));
	const Tp f0 = data1006[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1007[] = {
  { 0.59900577193982218, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.42950477684022031, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.34588803339345514, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.29365552311085208, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.25714303500254859, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22984438765258361, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20849271748512888, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19124047998168786, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17695302442341890, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.16488981108942916, 4.5000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1007()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1007)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1007[i].x), Tp(data1007[i].y),
		     Tp(data1007[i].z), Tp(data1007[i].p));
	const Tp f0 = data1007[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1008[] = {
  { 0.54536685068321555, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.39379555061681243, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.31846715449229557, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.27118200606113163, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.23800758472499212, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.21313305493648368, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.19363109316852323, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17784163491549257, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.16474276906428437, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15366616394914165, 4.5000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1008()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1008)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1008[i].x), Tp(data1008[i].y),
		     Tp(data1008[i].z), Tp(data1008[i].p));
	const Tp f0 = data1008[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1009[] = {
  { 0.50529089781331371, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.36676078981792687, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.29754578436895351, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.25394274973962694, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.15524361857280367, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 4.5000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1009()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1009)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1009[i].x), Tp(data1009[i].y),
		     Tp(data1009[i].z), Tp(data1009[i].p));
	const Tp f0 = data1009[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1010[] = {
  { 0.47368603656088509, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24006912379411066, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 4.5000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1010()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1010)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1010[i].x), Tp(data1010[i].y),
		     Tp(data1010[i].z), Tp(data1010[i].p));
	const Tp f0 = data1010[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1011[] = {
  { 0.44783441985639022, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 4.5000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1011()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1011)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1011[i].x), Tp(data1011[i].y),
		     Tp(data1011[i].z), Tp(data1011[i].p));
	const Tp f0 = data1011[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1012[] = {
  { 0.42612170945034850, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.31245388549811504, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14582603024683111, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 4.5000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1012()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1012)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1012[i].x), Tp(data1012[i].y),
		     Tp(data1012[i].z), Tp(data1012[i].p));
	const Tp f0 = data1012[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1013[] = {
  { 0.40751481490798841, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.29951576014169679, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.24489766569119636, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21020189719878088, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.18563730493485167, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16708235029898105, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15244494483680712, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14053100249339395, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13060131179612539, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12217000545877148, 4.5000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1013()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1013)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1013[i].x), Tp(data1013[i].y),
		     Tp(data1013[i].z), Tp(data1013[i].p));
	const Tp f0 = data1013[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1014[] = {
  { 0.39131506781838798, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.20271656184114498, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17916302942021572, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16135668036713791, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14729969321580355, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13585100391959684, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12630379536276651, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 4.5000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1014()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1014)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1014[i].x), Tp(data1014[i].y),
		     Tp(data1014[i].z), Tp(data1014[i].p));
	const Tp f0 = data1014[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1015[] = {
  { 1.4282140314406910, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.90480084152367868, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.68417801528911082, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.55778729967423868, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.47441179365269026, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.41468023686761379, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.36948923018706037, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.33394489335839761, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.30516151808247988, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.28131815919983078, 4.5000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1015()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1015)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1015[i].x), Tp(data1015[i].y),
		     Tp(data1015[i].z), Tp(data1015[i].p));
	const Tp f0 = data1015[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1016[] = {
  { 0.75171669684617670, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.52639467476878998, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.41828350268354286, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.35189621827427592, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.30605263016592271, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.27209789687409769, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.24573998678755615, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.22457578693433114, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.20714173705525246, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19248943029453996, 4.5000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1016()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1016)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1016[i].x), Tp(data1016[i].y),
		     Tp(data1016[i].z), Tp(data1016[i].p));
	const Tp f0 = data1016[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1017[] = {
  { 0.62615150586331814, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.44661005343999288, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.35859920693491232, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.30383610797211441, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.26566096411271739, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.23717997682292766, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.21494155887975144, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19699820373548479, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18215617344720567, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16963764560278910, 4.5000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1017()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1017)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1017[i].x), Tp(data1017[i].y),
		     Tp(data1017[i].z), Tp(data1017[i].p));
	const Tp f0 = data1017[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1018[] = {
  { 0.55441718621582214, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.39958358030563318, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.32280382680101521, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.27467440250672187, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24094132614427746, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.21566738313369857, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.19586457877460564, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17983982355881603, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16655159039492887, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15531911932961032, 4.5000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1018()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1018)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1018[i].x), Tp(data1018[i].y),
		     Tp(data1018[i].z), Tp(data1018[i].p));
	const Tp f0 = data1018[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1019[] = {
  { 0.50529089781331371, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.36676078981792687, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.29754578436895357, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.25394274973962699, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22326916372124525, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20022015773117002, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18211703022524661, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16743770647124012, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15524361857280367, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14492001769660448, 4.5000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1019()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1019)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1019[i].x), Tp(data1019[i].y),
		     Tp(data1019[i].z), Tp(data1019[i].p));
	const Tp f0 = data1019[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1020[] = {
  { 0.46852703419365949, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.34186622865287225, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.27823736960864393, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.23800758472499209, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20962942990006528, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18825852514797531, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17144284739028876, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15778631831232603, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14642656514910740, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13679787979397154, 4.5000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1020()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1020)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1020[i].x), Tp(data1020[i].y),
		     Tp(data1020[i].z), Tp(data1020[i].p));
	const Tp f0 = data1020[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1021[] = {
  { 0.43949703921614336, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.32200691636610929, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.26274026800952888, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.22516306783226769, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17856025043066379, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16276980988993645, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14993007047678017, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 4.5000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1021()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1021)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1021[i].x), Tp(data1021[i].y),
		     Tp(data1021[i].z), Tp(data1021[i].p));
	const Tp f0 = data1021[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1022[] = {
  { 0.41572657954600889, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641905, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740301, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491491, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477397, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716277, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786175, 4.5000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1022()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1022)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1022[i].x), Tp(data1022[i].y),
		     Tp(data1022[i].z), Tp(data1022[i].p));
	const Tp f0 = data1022[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1023[] = {
  { 0.39574408342862827, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.20535667623877890, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18152755381677391, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16350504415852030, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11979089459308073, 4.5000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1023()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1023)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1023[i].x), Tp(data1023[i].y),
		     Tp(data1023[i].z), Tp(data1023[i].p));
	const Tp f0 = data1023[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1024[] = {
  { 0.37860679494221022, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.27977081290193428, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22950278035995050, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19744909828337609, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17469023684433332, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15745997252936839, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14384180166952554, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13273955248651217, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12347339225572537, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11559576508589173, 4.5000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1024()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1024)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1024[i].x), Tp(data1024[i].y),
		     Tp(data1024[i].z), Tp(data1024[i].p));
	const Tp f0 = data1024[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1025[] = {
  { 0.36367653002590999, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.26929396731289790, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 4.5000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1025()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1025)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1025[i].x), Tp(data1025[i].y),
		     Tp(data1025[i].z), Tp(data1025[i].p));
	const Tp f0 = data1025[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1026[] = {
  { 1.3227570824359496, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.84112838412201096, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.63752909715586958, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.52064865027744411, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.44342072162483798, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.38801871838912422, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.34605516653010243, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.31301637554331807, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.28623835999824737, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.26403868659882423, 4.5000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1026()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1026)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1026[i].x), Tp(data1026[i].y),
		     Tp(data1026[i].z), Tp(data1026[i].p));
	const Tp f0 = data1026[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1027[] = {
  { 0.70196643578457152, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.49346545328851593, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.39306368158466531, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.33125757935206601, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.28849631545770604, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.25677566527305334, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.23212007183800812, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21230066656860405, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19595843732162685, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18221182013379453, 4.5000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1027()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1027)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1027[i].x), Tp(data1027[i].y),
		     Tp(data1027[i].z), Tp(data1027[i].p));
	const Tp f0 = data1027[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1028[] = {
  { 0.58582975227241507, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.41950957307134507, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.33766737129050112, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.28660951724649925, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.25094624644571911, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22429633237312194, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20345951448946425, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18662754336737519, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17269067548325898, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16092502889713969, 4.5000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1028()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1028)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1028[i].x), Tp(data1028[i].y),
		     Tp(data1028[i].z), Tp(data1028[i].p));
	const Tp f0 = data1028[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1029[] = {
  { 0.51931443788430542, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.37579425978052400, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.30434214257764308, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.25943141438420048, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.22788948913648335, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20421797318537210, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18564493767305426, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17059741891039601, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15810655090365155, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14753834963639009, 4.5000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1029()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1029)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1029[i].x), Tp(data1029[i].y),
		     Tp(data1029[i].z), Tp(data1029[i].p));
	const Tp f0 = data1029[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1030[] = {
  { 0.47368603656088509, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.34522496511224948, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.28077964061422994, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24006912379411066, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21137008577924715, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18976821759995394, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17277763302868732, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15898369100222828, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14751292779556119, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13779257271902687, 4.5000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1030()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1030)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1030[i].x), Tp(data1030[i].y),
		     Tp(data1030[i].z), Tp(data1030[i].p));
	const Tp f0 = data1030[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1031[] = {
  { 0.43949703921614336, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.32200691636610923, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26274026800952888, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22516306783226769, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19859930075036444, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17856025043066379, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16276980988993645, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14993007047678017, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13923822831329410, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13016702853927492, 4.5000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1031()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1031)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1031[i].x), Tp(data1031[i].y),
		     Tp(data1031[i].z), Tp(data1031[i].p));
	const Tp f0 = data1031[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1032[] = {
  { 0.41247333238452277, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30346430277664810, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.24824442145508774, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21313305493648368, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18825852514797534, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16946097115410677, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15462716963260220, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14255021489450148, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13248257848281811, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12393271845547064, 4.5000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1032()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1032)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1032[i].x), Tp(data1032[i].y),
		     Tp(data1032[i].z), Tp(data1032[i].p));
	const Tp f0 = data1032[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1033[] = {
  { 0.39032744003392794, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.23620685885217635, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20310782211209585, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17961767715767193, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12679879933178567, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 4.5000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1033()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1033)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1033[i].x), Tp(data1033[i].y),
		     Tp(data1033[i].z), Tp(data1033[i].p));
	const Tp f0 = data1033[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1034[] = {
  { 0.37169761313905048, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.27516581242813926, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.22596892122058534, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19455607506131359, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12191100711677891, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11416113809265732, 4.5000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1034()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1034)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1034[i].x), Tp(data1034[i].y),
		     Tp(data1034[i].z), Tp(data1034[i].p));
	const Tp f0 = data1034[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1035[] = {
  { 0.35571073090686678, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26396563861456251, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.21710144256169830, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18713024484317306, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16580237209547136, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14962638285972321, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13682223971660146, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12637018703120831, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11763689830001366, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11020491664921009, 4.5000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1035()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1035)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1035[i].x), Tp(data1035[i].y),
		     Tp(data1035[i].z), Tp(data1035[i].p));
	const Tp f0 = data1035[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1036[] = {
  { 0.34177531815965190, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 4.5000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1036()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1036)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1036[i].x), Tp(data1036[i].y),
		     Tp(data1036[i].z), Tp(data1036[i].p));
	const Tp f0 = data1036[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1037[] = {
  { 1.2385549085969758, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.78995987832038939, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.59989401503220163, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.49060298973382915, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.41829529228584011, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.36636660361944123, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.32699729527497673, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.29597583875094419, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.27081477697700107, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.24994212735723548, 4.5000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1037()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1037)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1037[i].x), Tp(data1037[i].y),
		     Tp(data1037[i].z), Tp(data1037[i].p));
	const Tp f0 = data1037[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1038[] = {
  { 0.66155920777571686, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.46652318314465940, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.37233745780747152, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.31424297259281730, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.27398800849679428, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.24408916990767490, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22082505702186819, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.20210711136517917, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18666070285211236, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.17365832663910130, 4.5000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1038()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1038)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1038[i].x), Tp(data1038[i].y),
		     Tp(data1038[i].z), Tp(data1038[i].p));
	const Tp f0 = data1038[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1039[] = {
  { 0.55296274146298530, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.39724951501383310, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.32039448944607335, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.27234759696322330, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.23873336681128257, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.21358169594446563, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.19389460229359851, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17797623942160509, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.16478482871102296, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15364022930203416, 4.5000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1039()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1039)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1039[i].x), Tp(data1039[i].y),
		     Tp(data1039[i].z), Tp(data1039[i].p));
	const Tp f0 = data1039[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1040[] = {
  { 0.49064226479292722, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.35620936467480213, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.28907092028557912, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.24678017301619545, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.21702891909535291, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.19467109481567238, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17710887253682117, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16286637345710206, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15103360702596738, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14101457604502673, 4.5000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1040()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1040)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1040[i].x), Tp(data1040[i].y),
		     Tp(data1040[i].z), Tp(data1040[i].p));
	const Tp f0 = data1040[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1041[] = {
  { 0.44783441985639022, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.32746744504040565, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.26688784408188965, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.22853444770475487, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20145104310752351, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18103710709592949, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.16496223617891401, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15189868846999888, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14102579994117995, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13180492318662126, 4.5000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1041()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1041)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1041[i].x), Tp(data1041[i].y),
		     Tp(data1041[i].z), Tp(data1041[i].p));
	const Tp f0 = data1041[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1042[] = {
  { 0.41572657954600889, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.30561255166081908, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.24988391144641905, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.21447008069888324, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18939223193740301, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17044752963491486, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15550179755477397, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14333657982716277, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13319741424158046, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12458832548786175, 4.5000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1042()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1042)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1042[i].x), Tp(data1042[i].y),
		     Tp(data1042[i].z), Tp(data1042[i].p));
	const Tp f0 = data1042[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1043[] = {
  { 0.39032744003392794, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.28814277595551513, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.23620685885217635, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.20310782211209580, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17961767715767193, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16184098634210525, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14779599479809385, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13634948217881554, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12679879933178567, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11868147002378221, 4.5000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1043()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1043)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1043[i].x), Tp(data1043[i].y),
		     Tp(data1043[i].z), Tp(data1043[i].p));
	const Tp f0 = data1043[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1044[] = {
  { 0.36949897192586934, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.27369687614783877, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.22484010849946631, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.19363109316852320, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17144284739028878, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.15462716963260220, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14132536745647911, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13047326015640068, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12141028290792609, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11370123472976013, 4.5000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1044()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1044)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1044[i].x), Tp(data1044[i].y),
		     Tp(data1044[i].z), Tp(data1044[i].p));
	const Tp f0 = data1044[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1045[] = {
  { 0.35196743249392498, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.21516608970229772, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.18554144632956851, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.16444842520831865, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12542167802943824, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 4.5000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1045()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1045)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1045[i].x), Tp(data1045[i].y),
		     Tp(data1045[i].z), Tp(data1045[i].p));
	const Tp f0 = data1045[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1046[] = {
  { 0.33691559507695484, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.25088103370981046, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.20678207850259028, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17851251804571250, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15835903081081973, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14305126572735666, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13091941660661224, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12100565601188114, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11271445297164348, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10565287267507187, 4.5000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1046()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1046)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1046[i].x), Tp(data1046[i].y),
		     Tp(data1046[i].z), Tp(data1046[i].p));
	const Tp f0 = data1046[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1047[] = {
  { 0.32378952990903481, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.24161482897584427, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13828510006492684, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 4.5000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1047()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1047)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1047[i].x), Tp(data1047[i].y),
		     Tp(data1047[i].z), Tp(data1047[i].p));
	const Tp f0 = data1047[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1048[] = {
  { 1.1691998689776044, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.74758821090642469, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.56862689470089289, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.46558271169861637, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.39733462013473336, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.34827731549864349, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.31105617972296390, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.28170753134865645, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.25788891816182635, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.23811920078124657, 4.5000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1048()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1048)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1048[i].x), Tp(data1048[i].y),
		     Tp(data1048[i].z), Tp(data1048[i].p));
	const Tp f0 = data1048[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1049[] = {
  { 0.62781986015308988, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.44389025137424148, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.35486188231906418, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.29985904843404926, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.26169798902754904, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.23332484027836586, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.21122835128269588, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.19343623197211957, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.17874390787479072, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16636882977390188, 4.5000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1049()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1049)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1049[i].x), Tp(data1049[i].y),
		     Tp(data1049[i].z), Tp(data1049[i].p));
	const Tp f0 = data1049[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1050[] = {
  { 0.52543810875974817, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.37848959024338219, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.30578138769068514, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.26024863529587450, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.22835077510766039, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.20445728661137180, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.18573773199449525, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17058958463505428, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15802760630811116, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14740810939919627, 4.5000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1050()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1050)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1050[i].x), Tp(data1050[i].y),
		     Tp(data1050[i].z), Tp(data1050[i].p));
	const Tp f0 = data1050[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1051[] = {
  { 0.46658916663652034, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.33967259587581161, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.27612533329516531, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.23602527368531434, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20777621110896594, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18652334041934979, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.16981317412174435, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15625051876858434, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14497441712587619, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13542056723836365, 4.5000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1051()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1051)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1051[i].x), Tp(data1051[i].y),
		     Tp(data1051[i].z), Tp(data1051[i].p));
	const Tp f0 = data1051[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1052[] = {
  { 0.42612170945034850, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.31245388549811504, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.25509515949343070, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.21871448708573704, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.19298780643885469, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.17357412622186552, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15827202520998379, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14582603024683111, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13545948266743188, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12666222894334273, 4.5000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1052()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1052)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1052[i].x), Tp(data1052[i].y),
		     Tp(data1052[i].z), Tp(data1052[i].p));
	const Tp f0 = data1052[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1053[] = {
  { 0.39574408342862827, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.29173777641782117, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.23895870746180120, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.20535667623877890, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18152755381677391, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.16350504415852030, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.14927276174416579, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13767835848658191, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12800768319660208, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11979089459308073, 4.5000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1053()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1053)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1053[i].x), Tp(data1053[i].y),
		     Tp(data1053[i].z), Tp(data1053[i].p));
	const Tp f0 = data1053[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1054[] = {
  { 0.37169761313905048, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.27516581242813926, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.22596892122058534, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.19455607506131364, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17223000376279499, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15531411600095618, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14193580018414226, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13102316734612793, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12191100711677894, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11416113809265731, 4.5000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1054()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1054)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1054[i].x), Tp(data1054[i].y),
		     Tp(data1054[i].z), Tp(data1054[i].p));
	const Tp f0 = data1054[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1055[] = {
  { 0.35196743249392498, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.26145372596528538, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.21516608970229778, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.18554144632956851, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.16444842520831870, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14844349091361458, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13577014173391874, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12542167802943824, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11677265324587034, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10941067244956264, 4.5000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1055()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1055)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1055[i].x), Tp(data1055[i].y),
		     Tp(data1055[i].z), Tp(data1055[i].p));
	const Tp f0 = data1055[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1056[] = {
  { 0.33535244167308820, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.24982627348259920, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.20596673883085315, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17784163491549262, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15778631831232606, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14255021489450143, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13047326015640071, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12060304246691116, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11234730565945149, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10531522201643984, 4.5000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1056()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1056)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1056[i].x), Tp(data1056[i].y),
		     Tp(data1056[i].z), Tp(data1056[i].p));
	const Tp f0 = data1056[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1057[] = {
  { 0.32108161258352425, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.23978059710511687, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19799012457061499, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17114792855430458, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15198309579273966, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13740835597815626, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12584547310650948, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11638820193013964, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10847256570159687, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10172614406502369, 4.5000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1057()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1057)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1057[i].x), Tp(data1057[i].y),
		     Tp(data1057[i].z), Tp(data1057[i].p));
	const Tp f0 = data1057[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1058[] = {
  { 0.30863208433619260, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13286125114219741, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12174808465966325, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11265260970224160, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 4.5000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1058()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1058)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1058[i].x), Tp(data1058[i].y),
		     Tp(data1058[i].z), Tp(data1058[i].p));
	const Tp f0 = data1058[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1059[] = {
  { 1.1107207345395917, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.71169928894443057, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.54206934046880317, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.44428829381583673, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.37946750532982371, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.33283838484809575, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.29743639346488798, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.26950604222632363, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.24682682989768701, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.22799409953393038, 4.5000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1059()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1059)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1059[i].x), Tp(data1059[i].y),
		     Tp(data1059[i].z), Tp(data1059[i].p));
	const Tp f0 = data1059[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1060[] = {
  { 0.59905039027703089, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.42449230788788933, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.33983690945412193, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.28746421372502651, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.25108898619570791, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.22401970229754875, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.20292276620803801, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.18592435720628583, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.17187932565251629, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16004330932154517, 4.5000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1060()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1060)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1060[i].x), Tp(data1060[i].y),
		     Tp(data1060[i].z), Tp(data1060[i].p));
	const Tp f0 = data1060[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1061[] = {
  { 0.50190926592367568, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.36236732081523426, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.29318162565154315, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.24979204521826587, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.21936122444907369, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.19654546628095973, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.17865617275751117, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.16416997417507501, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15214967292571627, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14198260091108919, 4.5000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1061()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1061)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1061[i].x), Tp(data1061[i].y),
		     Tp(data1061[i].z), Tp(data1061[i].p));
	const Tp f0 = data1061[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1062[] = {
  { 0.44599764610881049, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.32543790241474613, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.26494427429221773, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.22671381966906326, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.19975034455016183, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.17944521689084741, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.16346723896224694, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15048971552664525, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.13969338982979984, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13054095718169423, 4.5000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1062()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1062)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1062[i].x), Tp(data1062[i].y),
		     Tp(data1062[i].z), Tp(data1062[i].p));
	const Tp f0 = data1062[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1063[] = {
  { 0.40751481490798841, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.29951576014169679, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.24489766569119636, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.21020189719878088, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.18563730493485167, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.16708235029898105, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15244494483680712, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14053100249339395, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13060131179612539, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12217000545877148, 4.5000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1063()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1063)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1063[i].x), Tp(data1063[i].y),
		     Tp(data1063[i].z), Tp(data1063[i].p));
	const Tp f0 = data1063[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1064[] = {
  { 0.37860679494221022, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.27977081290193428, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.22950278035995050, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.19744909828337609, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.17469023684433332, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.15745997252936839, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.14384180166952554, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13273955248651217, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12347339225572537, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11559576508589173, 4.5000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1064()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1064)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1064[i].x), Tp(data1064[i].y),
		     Tp(data1064[i].z), Tp(data1064[i].p));
	const Tp f0 = data1064[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1065[] = {
  { 0.35571073090686678, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.26396563861456251, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.21710144256169830, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.18713024484317306, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.16580237209547136, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.14962638285972321, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.13682223971660146, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.12637018703120831, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11763689830001366, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11020491664921009, 4.5000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1065()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1065)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1065[i].x), Tp(data1065[i].y),
		     Tp(data1065[i].z), Tp(data1065[i].p));
	const Tp f0 = data1065[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1066[] = {
  { 0.33691559507695484, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.25088103370981046, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.20678207850259028, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.17851251804571250, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.15835903081081973, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14305126572735666, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13091941660661224, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12100565601188114, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11271445297164348, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10565287267507187, 4.5000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1066()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1066)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1066[i].x), Tp(data1066[i].y),
		     Tp(data1066[i].z), Tp(data1066[i].p));
	const Tp f0 = data1066[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1067[] = {
  { 0.32108161258352425, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.23978059710511687, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.19799012457061499, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17114792855430458, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15198309579273966, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.13740835597815626, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.12584547310650945, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.11638820193013964, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10847256570159687, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10172614406502369, 4.5000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1067()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1067)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1067[i].x), Tp(data1067[i].y),
		     Tp(data1067[i].z), Tp(data1067[i].p));
	const Tp f0 = data1067[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1068[] = {
  { 0.30747679967138353, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.23018642093643529, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19036349996895299, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.16474276906428439, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.14642656514910743, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13248257848281814, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12141028290792613, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11234730565945149, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10475656017578483, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.098283138373428197, 4.5000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1068()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1068)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1068[i].x), Tp(data1068[i].y),
		     Tp(data1068[i].z), Tp(data1068[i].p));
	const Tp f0 = data1068[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1069[] = {
  { 0.29560457867385181, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.22177139496237155, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.18365308285677109, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.15909423614965645, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14151773614835397, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.12812471388106514, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11748171056537038, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10876428955779005, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10145865459994452, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.095225087800083014, 4.5000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1069()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1069)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1069[i].x), Tp(data1069[i].y),
		     Tp(data1069[i].z), Tp(data1069[i].p));
	const Tp f0 = data1069[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1070[] = {
  { 1.0605020626175816, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.68075965854518705, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.51911849792031284, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.42585344699120309, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.36397858547212425, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.31943960239213492, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.28560540065993695, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.25889866065655154, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.23720335234329346, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.21918039874741832, 4.5000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1070()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1070)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1070[i].x), Tp(data1070[i].y),
		     Tp(data1070[i].z), Tp(data1070[i].p));
	const Tp f0 = data1070[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1071[] = {
  { 0.57411046795964726, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 4.5000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1071()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1071)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1071[i].x), Tp(data1071[i].y),
		     Tp(data1071[i].z), Tp(data1071[i].p));
	const Tp f0 = data1071[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1072[] = {
  { 0.48146856024935336, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.28215395230194468, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.24062135428961690, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.21146460339264184, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 4.5000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1072()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1072)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1072[i].x), Tp(data1072[i].y),
		     Tp(data1072[i].z), Tp(data1072[i].p));
	const Tp f0 = data1072[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1073[] = {
  { 0.42808593449069277, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 4.5000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1073()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1073)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1073[i].x), Tp(data1073[i].y),
		     Tp(data1073[i].z), Tp(data1073[i].p));
	const Tp f0 = data1073[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1074[] = {
  { 0.39131506781838798, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.20271656184114500, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.17916302942021572, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.16135668036713791, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.14729969321580361, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.13585100391959684, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.12630379536276654, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 4.5000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1074()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1074)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1074[i].x), Tp(data1074[i].y),
		     Tp(data1074[i].z), Tp(data1074[i].p));
	const Tp f0 = data1074[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1075[] = {
  { 0.36367653002590999, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.26929396731289784, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 4.5000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1075()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1075)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1075[i].x), Tp(data1075[i].y),
		     Tp(data1075[i].z), Tp(data1075[i].p));
	const Tp f0 = data1075[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1076[] = {
  { 0.34177531815965190, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 4.5000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1076()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1076)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1076[i].x), Tp(data1076[i].y),
		     Tp(data1076[i].z), Tp(data1076[i].p));
	const Tp f0 = data1076[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1077[] = {
  { 0.32378952990903481, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.24161482897584433, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.13828510006492684, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 4.5000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1077()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1077)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1077[i].x), Tp(data1077[i].y),
		     Tp(data1077[i].z), Tp(data1077[i].p));
	const Tp f0 = data1077[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1078[] = {
  { 0.30863208433619260, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.13286125114219741, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.12174808465966325, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.11265260970224160, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 4.5000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1078()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1078)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1078[i].x), Tp(data1078[i].y),
		     Tp(data1078[i].z), Tp(data1078[i].p));
	const Tp f0 = data1078[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1079[] = {
  { 0.29560457867385181, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.22177139496237155, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.18365308285677109, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.15909423614965645, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.14151773614835397, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.12812471388106514, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.11748171056537038, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.10876428955779005, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10145865459994452, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.095225087800083014, 4.5000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1079()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1079)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1079[i].x), Tp(data1079[i].y),
		     Tp(data1079[i].z), Tp(data1079[i].p));
	const Tp f0 = data1079[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=4.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1080[] = {
  { 0.28423305952716627, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.21369851061605932, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.17720916259816363, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.15366616394914165, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.13679787979397157, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.12393271845547066, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11370123472976013, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10531522201643985, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.098283138373428169, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.092279787050595419, 4.5000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=4.5000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1080()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1080)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1080[i].x), Tp(data1080[i].y),
		     Tp(data1080[i].z), Tp(data1080[i].p));
	const Tp f0 = data1080[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1081[] = {
  { 2.5251633071736093, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 1.5398644654482319, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 1.1383703069075368, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.91347651070764491, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.76760362606933297, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.66449360407569580, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.58734713574982367, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.52723975772596432, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.47896266566575291, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.43925837540695190, 5.0000000000000000, 0.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1081()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1081)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1081[i].x), Tp(data1081[i].y),
		     Tp(data1081[i].z), Tp(data1081[i].p));
	const Tp f0 = data1081[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1082[] = {
  { 1.9632259881925387, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 1.2192980037048136, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.91098920475560263, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.73639343103384503, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.62222874715997789, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.54101812180189024, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.47994002983795436, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.43214312138003680, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.39360856814154288, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.36181214525256422, 5.0000000000000000, 0.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1082()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1082)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1082[i].x), Tp(data1082[i].y),
		     Tp(data1082[i].z), Tp(data1082[i].p));
	const Tp f0 = data1082[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1083[] = {
  { 1.6776131976127413, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 1.0523861651487221, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.79100793201960873, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.64211888601758704, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.54433069051281546, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.47452170094153118, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.42186331242242570, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.38055128332648536, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.34717190593992298, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.31957598621544397, 5.0000000000000000, 0.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1083()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1083)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1083[i].x), Tp(data1083[i].y),
		     Tp(data1083[i].z), Tp(data1083[i].p));
	const Tp f0 = data1083[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1084[] = {
  { 1.4942973790551632, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.94365001435344487, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.71217440333325732, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.57981347206667344, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.49262440117297462, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.43023294452768129, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.38307518584806649, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.34601465156302741, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.31602515192876895, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.29119853301023985, 5.0000000000000000, 0.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1084()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1084)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1084[i].x), Tp(data1084[i].y),
		     Tp(data1084[i].z), Tp(data1084[i].p));
	const Tp f0 = data1084[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1085[] = {
  { 1.3629576598727582, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.86491339529509692, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.65473326650829555, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.53421842599735769, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.45466225176639130, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.39763264972151718, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.35446341401990045, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.32049370748236927, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.29297417862271818, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.27016931577362679, 5.0000000000000000, 0.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1085()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1085)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1085[i].x), Tp(data1085[i].y),
		     Tp(data1085[i].z), Tp(data1085[i].p));
	const Tp f0 = data1085[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1086[] = {
  { 1.2625205818912750, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.80421108910111860, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.61023275990848969, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.49877435732263031, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.42507502529871505, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.37217173108359985, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.33207938945607324, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.30049897897205485, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.27489221136027703, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.25365545886709745, 5.0000000000000000, 0.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1086()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1086)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1086[i].x), Tp(data1086[i].y),
		     Tp(data1086[i].z), Tp(data1086[i].p));
	const Tp f0 = data1086[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1087[] = {
  { 1.1823091734174969, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.75541576451496006, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.57431936495071312, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.47008947126163109, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.40107863174854741, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.35148635651660265, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.31386785472054907, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.28421169779883143, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.26014766147690610, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.24017729914130131, 5.0000000000000000, 0.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1087()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1087)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1087[i].x), Tp(data1087[i].y),
		     Tp(data1087[i].z), Tp(data1087[i].p));
	const Tp f0 = data1087[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1088[] = {
  { 1.1162289525908911, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.71499953726585297, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.54447432971840126, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.44619507700934191, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.38105329983216318, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.33419876538580223, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.29862916776034337, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.27056899795342709, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.24778609888688150, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.22886854366397424, 5.0000000000000000, 0.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1088()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1088)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1088[i].x), Tp(data1088[i].y),
		     Tp(data1088[i].z), Tp(data1088[i].p));
	const Tp f0 = data1088[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1089[] = {
  { 1.0605020626175816, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.68075965854518705, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.51911849792031284, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.42585344699120309, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.36397858547212425, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.31943960239213492, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.28560540065993695, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.25889866065655154, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.23720335234329346, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.21918039874741832, 5.0000000000000000, 0.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1089()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1089)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1089[i].x), Tp(data1089[i].y),
		     Tp(data1089[i].z), Tp(data1089[i].p));
	const Tp f0 = data1089[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1090[] = {
  { 1.0126399973167399, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.65123614026811805, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.49720144890667828, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.40823926143551875, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.34917282417064488, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.30662731351955447, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.27428896215456872, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.24875007088012702, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.22799409953393041, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.21074444193122177, 5.0000000000000000, 0.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1090()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1090)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1090[i].x), Tp(data1090[i].y),
		     Tp(data1090[i].z), Tp(data1090[i].p));
	const Tp f0 = data1090[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1091[] = {
  { 2.5251633071736093, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.5398644654482319, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 1.1383703069075368, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.91347651070764491, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.76760362606933297, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.66449360407569580, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.58734713574982367, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.52723975772596432, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.47896266566575291, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.43925837540695190, 5.0000000000000000, 0.50000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1091()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1091)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1091[i].x), Tp(data1091[i].y),
		     Tp(data1091[i].z), Tp(data1091[i].p));
	const Tp f0 = data1091[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1092[] = {
  { 1.2049706911003792, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.81243686465421328, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.63145906612509362, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.52312181621417730, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.44969142119934957, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.39609249754952380, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.35497886804334561, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.32229604854757482, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.29560457867385176, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.27334019079898864, 5.0000000000000000, 0.50000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1092()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1092)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1092[i].x), Tp(data1092[i].y),
		     Tp(data1092[i].z), Tp(data1092[i].p));
	const Tp f0 = data1092[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1093[] = {
  { 0.98504492018034995, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.30442632980811574, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.27719259367796739, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 5.0000000000000000, 0.50000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1093()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1093)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1093[i].x), Tp(data1093[i].y),
		     Tp(data1093[i].z), Tp(data1093[i].p));
	const Tp f0 = data1093[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1094[] = {
  { 0.86289061321428662, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.59826640042081203, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.34317743248401805, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.30430255416260915, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.25013826445237008, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.23034553941811331, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.21374598482754295, 5.0000000000000000, 0.50000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1094()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1094)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1094[i].x), Tp(data1094[i].y),
		     Tp(data1094[i].z), Tp(data1094[i].p));
	const Tp f0 = data1094[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1095[] = {
  { 0.78068845414522159, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.54494833083219296, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.43220566332383353, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.36312278662905817, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.31549408045108390, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.28026194988618314, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.21298191526646917, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.19782954572559394, 5.0000000000000000, 0.50000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1095()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1095)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1095[i].x), Tp(data1095[i].y),
		     Tp(data1095[i].z), Tp(data1095[i].p));
	const Tp f0 = data1095[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1096[] = {
  { 0.71994094443495504, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.50506385303798651, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.33832764042495689, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.29445551387110397, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.23667971146773958, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.21638788243953924, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 5.0000000000000000, 0.50000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1096()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1096)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1096[i].x), Tp(data1096[i].y),
		     Tp(data1096[i].z), Tp(data1096[i].p));
	const Tp f0 = data1096[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1097[] = {
  { 0.67243540762391052, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.47358314076150682, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.37767691694270905, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.31857200599266755, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.27764347267224726, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.24726015371628143, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.22362928147368372, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.20462324582094824, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.17574955367014047, 5.0000000000000000, 0.50000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1097()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1097)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1097[i].x), Tp(data1097[i].y),
		     Tp(data1097[i].z), Tp(data1097[i].p));
	const Tp f0 = data1097[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1098[] = {
  { 0.63383944056141572, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 5.0000000000000000, 0.50000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1098()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1098)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1098[i].x), Tp(data1098[i].y),
		     Tp(data1098[i].z), Tp(data1098[i].p));
	const Tp f0 = data1098[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1099[] = {
  { 0.60160394534475825, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.18653078812307397, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 5.0000000000000000, 0.50000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1099()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1099)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1099[i].x), Tp(data1099[i].y),
		     Tp(data1099[i].z), Tp(data1099[i].p));
	const Tp f0 = data1099[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1100[] = {
  { 0.57411046795964726, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 5.0000000000000000, 0.50000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1100()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1100)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1100[i].x), Tp(data1100[i].y),
		     Tp(data1100[i].z), Tp(data1100[i].p));
	const Tp f0 = data1100[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1101[] = {
  { 0.55027182572642119, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.39143618306709621, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.31415210943518235, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.26622739632444620, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.23287985082087539, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.20802560405354784, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.18862961391254038, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.17298383326391550, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.16004330932154509, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.14912815584871789, 5.0000000000000000, 0.50000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=0.50000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1101()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1101)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1101[i].x), Tp(data1101[i].y),
		     Tp(data1101[i].z), Tp(data1101[i].p));
	const Tp f0 = data1101[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1102[] = {
  { 1.9632259881925387, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.2192980037048136, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.91098920475560263, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.73639343103384503, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.62222874715997789, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.54101812180189024, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.47994002983795436, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.43214312138003680, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.39360856814154288, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.36181214525256422, 5.0000000000000000, 1.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1102()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1102)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1102[i].x), Tp(data1102[i].y),
		     Tp(data1102[i].z), Tp(data1102[i].p));
	const Tp f0 = data1102[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1103[] = {
  { 0.98504492018034995, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.67614468006652750, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.53091580814596506, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.44291589512235058, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.38274653653391300, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.33852942114178403, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.30442632980811574, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.27719259367796739, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.25486461895243767, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.23617699585414989, 5.0000000000000000, 1.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1103()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1103)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1103[i].x), Tp(data1103[i].y),
		     Tp(data1103[i].z), Tp(data1103[i].p));
	const Tp f0 = data1103[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1104[] = {
  { 0.81243686465421372, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.56784383996639420, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.45048126759597351, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.37846429199415921, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.32877627338106152, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.29200640577335130, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.26348726872117195, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.24060591252980171, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.22177139496237153, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.20595310656708540, 5.0000000000000000, 1.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1104()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1104)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1104[i].x), Tp(data1104[i].y),
		     Tp(data1104[i].z), Tp(data1104[i].p));
	const Tp f0 = data1104[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1105[] = {
  { 0.71522849851832271, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.50501667495530911, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.34003567806892138, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.29633652745245054, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.26386742498192284, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.23860047673192983, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.21827177905010714, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.20149825408531305, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 5.0000000000000000, 1.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1105()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1105)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1105[i].x), Tp(data1105[i].y),
		     Tp(data1105[i].z), Tp(data1105[i].p));
	const Tp f0 = data1105[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1106[] = {
  { 0.64926076968466362, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027559, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 5.0000000000000000, 1.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1106()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1106)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1106[i].x), Tp(data1106[i].y),
		     Tp(data1106[i].z), Tp(data1106[i].p));
	const Tp f0 = data1106[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1107[] = {
  { 0.60022003632971521, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.34481369816852914, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.29241747858151068, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.22856307759848521, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.20723641412862270, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.17577045613521000, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.16374710393804559, 5.0000000000000000, 1.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1107()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1107)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1107[i].x), Tp(data1107[i].y),
		     Tp(data1107[i].z), Tp(data1107[i].p));
	const Tp f0 = data1107[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1108[] = {
  { 0.56169543033873548, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246269, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 5.0000000000000000, 1.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1108()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1108)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1108[i].x), Tp(data1108[i].y),
		     Tp(data1108[i].z), Tp(data1108[i].p));
	const Tp f0 = data1108[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1109[] = {
  { 0.53028273587019470, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.38169455741536795, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.30823097320026416, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.23004841666960310, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.20593584740565521, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.18704950966394510, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.17176974669889250, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.15910103247430643, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.14839309852132304, 5.0000000000000000, 1.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1109()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1109)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1109[i].x), Tp(data1109[i].y),
		     Tp(data1109[i].z), Tp(data1109[i].p));
	const Tp f0 = data1109[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1110[] = {
  { 0.50396843767233279, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017671, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285193, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568886, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100892, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931739, 5.0000000000000000, 1.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1110()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1110)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1110[i].x), Tp(data1110[i].y),
		     Tp(data1110[i].z), Tp(data1110[i].p));
	const Tp f0 = data1110[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1111[] = {
  { 0.48146856024935336, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.28215395230194468, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.24062135428961690, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.21146460339264184, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 5.0000000000000000, 1.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1111()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1111)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1111[i].x), Tp(data1111[i].y),
		     Tp(data1111[i].z), Tp(data1111[i].p));
	const Tp f0 = data1111[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1112[] = {
  { 0.46191741425561045, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.33481923082721610, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.27158176497433534, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.23182380450040299, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.20388549974147677, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.18290474993849207, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.16643164880870376, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.15307628754308211, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.14198260091108916, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.13259038458639197, 5.0000000000000000, 1.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1112()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1112)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1112[i].x), Tp(data1112[i].y),
		     Tp(data1112[i].z), Tp(data1112[i].p));
	const Tp f0 = data1112[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1113[] = {
  { 1.6776131976127413, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 1.0523861651487221, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.79100793201960873, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.64211888601758704, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.54433069051281546, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.47452170094153118, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.42186331242242570, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.38055128332648536, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.34717190593992298, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.31957598621544397, 5.0000000000000000, 1.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1113()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1113)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1113[i].x), Tp(data1113[i].y),
		     Tp(data1113[i].z), Tp(data1113[i].p));
	const Tp f0 = data1113[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1114[] = {
  { 0.86289061321428662, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.59826640042081203, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.47255674044113682, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.39587113028739673, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.34317743248401805, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.30430255416260915, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.27422353384191517, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.25013826445237008, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.23034553941811331, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.21374598482754295, 5.0000000000000000, 1.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1114()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1114)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1114[i].x), Tp(data1114[i].y),
		     Tp(data1114[i].z), Tp(data1114[i].p));
	const Tp f0 = data1114[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1115[] = {
  { 0.71522849851832271, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.50501667495530911, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.40304711931662451, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.34003567806892138, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.29633652745245054, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.26386742498192284, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.23860047673192983, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.21827177905010714, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.20149825408531305, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.18738132073839855, 5.0000000000000000, 1.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1115()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1115)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1115[i].x), Tp(data1115[i].y),
		     Tp(data1115[i].z), Tp(data1115[i].p));
	const Tp f0 = data1115[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1116[] = {
  { 0.63145906612509350, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.45048126759597351, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.36170333943276439, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.30644731639234468, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.26792377627360547, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.23918145183247716, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.21673876900247149, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.19863084151656735, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.18365308285677112, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.17102051213438707, 5.0000000000000000, 1.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1116()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1116)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1116[i].x), Tp(data1116[i].y),
		     Tp(data1116[i].z), Tp(data1116[i].p));
	const Tp f0 = data1116[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1117[] = {
  { 0.57434886336852520, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 5.0000000000000000, 1.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1117()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1117)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1117[i].x), Tp(data1117[i].y),
		     Tp(data1117[i].z), Tp(data1117[i].p));
	const Tp f0 = data1117[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1118[] = {
  { 0.53175127941998745, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.38398773910410744, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.18897040732232553, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 5.0000000000000000, 1.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1118()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1118)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1118[i].x), Tp(data1118[i].y),
		     Tp(data1118[i].z), Tp(data1118[i].p));
	const Tp f0 = data1118[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1119[] = {
  { 0.49820173719202743, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 5.0000000000000000, 1.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1119()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1119)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1119[i].x), Tp(data1119[i].y),
		     Tp(data1119[i].z), Tp(data1119[i].p));
	const Tp f0 = data1119[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1120[] = {
  { 0.47078850771996805, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.34247161105719687, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.17097270188240141, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.15729483835968863, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.14592515814192542, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 5.0000000000000000, 1.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1120()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1120)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1120[i].x), Tp(data1120[i].y),
		     Tp(data1120[i].z), Tp(data1120[i].p));
	const Tp f0 = data1120[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1121[] = {
  { 0.44778454024562891, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 5.0000000000000000, 1.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1121()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1121)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1121[i].x), Tp(data1121[i].y),
		     Tp(data1121[i].z), Tp(data1121[i].p));
	const Tp f0 = data1121[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1122[] = {
  { 0.42808593449069277, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 5.0000000000000000, 1.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1122()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1122)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1122[i].x), Tp(data1122[i].y),
		     Tp(data1122[i].z), Tp(data1122[i].p));
	const Tp f0 = data1122[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1123[] = {
  { 0.41094690289468638, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.30107578426061465, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.24574380041928576, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.21068500925450168, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.18590846707646830, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.16721915196355908, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.15249181170206264, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.14051533635416971, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.13054095718169420, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.12207707406867493, 5.0000000000000000, 1.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=1.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1123()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1123)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1123[i].x), Tp(data1123[i].y),
		     Tp(data1123[i].z), Tp(data1123[i].p));
	const Tp f0 = data1123[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1124[] = {
  { 1.4942973790551632, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.94365001435344487, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.71217440333325732, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.57981347206667344, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.49262440117297462, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.43023294452768129, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.38307518584806649, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.34601465156302741, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.31602515192876895, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.29119853301023985, 5.0000000000000000, 2.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1124()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1124)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1124[i].x), Tp(data1124[i].y),
		     Tp(data1124[i].z), Tp(data1124[i].p));
	const Tp f0 = data1124[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1125[] = {
  { 0.78068845414522159, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.54494833083219296, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.43220566332383353, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.36312278662905817, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.31549408045108390, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.28026194988618314, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.25294106219519419, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.23102307691730350, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.21298191526646917, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.19782954572559394, 5.0000000000000000, 2.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1125()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1125)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1125[i].x), Tp(data1125[i].y),
		     Tp(data1125[i].z), Tp(data1125[i].p));
	const Tp f0 = data1125[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1126[] = {
  { 0.64926076968466362, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.46160631439647176, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.36993243387291708, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.31301779500799842, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.27340877133216812, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.24389684923272786, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.22087834855052271, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.20232251730027559, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.18698593937126248, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.17405918864604358, 5.0000000000000000, 2.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1126()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1126)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1126[i].x), Tp(data1126[i].y),
		     Tp(data1126[i].z), Tp(data1126[i].p));
	const Tp f0 = data1126[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1127[] = {
  { 0.57434886336852520, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.41260785523751853, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.33268487290100718, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.28270034324677890, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.24772673729691724, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.22155856574780458, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.20107772593601533, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.18451971444141366, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.17080028669537115, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15921145309369730, 5.0000000000000000, 2.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1127()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1127)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1127[i].x), Tp(data1127[i].y),
		     Tp(data1127[i].z), Tp(data1127[i].p));
	const Tp f0 = data1127[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1128[] = {
  { 0.52312181621417742, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.37846429199415910, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.30644731639234468, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.26118550757927134, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.22940023615486640, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.20554851955254339, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.18683591987251377, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.17167672279762300, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.15909423614965643, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14844937809139419, 5.0000000000000000, 2.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1128()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1128)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1128[i].x), Tp(data1128[i].y),
		     Tp(data1128[i].z), Tp(data1128[i].p));
	const Tp f0 = data1128[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1129[] = {
  { 0.48482703260271992, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.14005584409361149, 5.0000000000000000, 2.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1129()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1129)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1129[i].x), Tp(data1129[i].y),
		     Tp(data1129[i].z), Tp(data1129[i].p));
	const Tp f0 = data1129[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1130[] = {
  { 0.45461355226272843, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 5.0000000000000000, 2.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1130()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1130)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1130[i].x), Tp(data1130[i].y),
		     Tp(data1130[i].z), Tp(data1130[i].p));
	const Tp f0 = data1130[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1131[] = {
  { 0.42989092919613203, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.31497844547758391, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.19434555902721881, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.17475989052454721, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15932635698806283, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 5.0000000000000000, 2.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1131()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1131)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1131[i].x), Tp(data1131[i].y),
		     Tp(data1131[i].z), Tp(data1131[i].p));
	const Tp f0 = data1131[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1132[] = {
  { 0.40911989618188382, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646452, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051627, 5.0000000000000000, 2.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1132()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1132)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1132[i].x), Tp(data1132[i].y),
		     Tp(data1132[i].z), Tp(data1132[i].p));
	const Tp f0 = data1132[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1133[] = {
  { 0.39131506781838787, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.20271656184114498, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.17916302942021570, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.16135668036713785, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.14729969321580355, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.13585100391959681, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.12630379536276651, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 5.0000000000000000, 2.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1133()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1133)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1133[i].x), Tp(data1133[i].y),
		     Tp(data1133[i].z), Tp(data1133[i].p));
	const Tp f0 = data1133[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1134[] = {
  { 0.37580983608029783, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.27734754080633112, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.22736514280085002, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.19552991524211258, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.17294384503963564, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.15585426408892872, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.14235329837746191, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.13135050397608269, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.12217000545877146, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.11436707673490792, 5.0000000000000000, 2.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1134()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1134)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1134[i].x), Tp(data1134[i].y),
		     Tp(data1134[i].z), Tp(data1134[i].p));
	const Tp f0 = data1134[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1135[] = {
  { 1.3629576598727582, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.86491339529509692, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.65473326650829555, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.53421842599735769, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.45466225176639130, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.39763264972151718, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.35446341401990045, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.32049370748236927, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.29297417862271818, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.27016931577362679, 5.0000000000000000, 2.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1135()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1135)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1135[i].x), Tp(data1135[i].y),
		     Tp(data1135[i].z), Tp(data1135[i].p));
	const Tp f0 = data1135[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1136[] = {
  { 0.71994094443495504, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.50506385303798640, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.40180501891063503, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.33832764042495689, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.29445551387110391, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.26193767131225271, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.23667971146773953, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.21638788243953924, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.19966452859837594, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.18560354169394075, 5.0000000000000000, 2.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1136()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1136)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1136[i].x), Tp(data1136[i].y),
		     Tp(data1136[i].z), Tp(data1136[i].p));
	const Tp f0 = data1136[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1137[] = {
  { 0.60022003632971521, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.42892227004405292, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.34481369816852914, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.29241747858151068, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.25585876344175840, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.22856307759848521, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.20723641412862276, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.19001905356941595, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.17577045613521000, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.16374710393804559, 5.0000000000000000, 2.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1137()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1137)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1137[i].x), Tp(data1137[i].y),
		     Tp(data1137[i].z), Tp(data1137[i].p));
	const Tp f0 = data1137[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1138[] = {
  { 0.53175127941998745, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.38398773910410744, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.31058777828219231, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.26452102657131615, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.23220291160200490, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.20797011504959809, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.18897040732232553, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.17358660669703485, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.16082332524108589, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.15002963314335371, 5.0000000000000000, 2.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1138()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1138)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1138[i].x), Tp(data1138[i].y),
		     Tp(data1138[i].z), Tp(data1138[i].p));
	const Tp f0 = data1138[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1139[] = {
  { 0.48482703260271992, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.35259868191795857, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.28641521409210641, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.24466982149071356, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.21527433441567492, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.19316795381124133, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.17579330339775009, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.16169630183319131, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14997979194824079, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.14005584409361146, 5.0000000000000000, 2.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1139()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1139)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1139[i].x), Tp(data1139[i].y),
		     Tp(data1139[i].z), Tp(data1139[i].p));
	const Tp f0 = data1139[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1140[] = {
  { 0.44969142119934957, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.32877627338106152, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.26792377627360547, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.22940023615486632, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.20219855406062481, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.18169680295022042, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.16555376173133748, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.15243555167854184, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.14151773614835392, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.13225920647869971, 5.0000000000000000, 2.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1140()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1140)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1140[i].x), Tp(data1140[i].y),
		     Tp(data1140[i].z), Tp(data1140[i].p));
	const Tp f0 = data1140[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1141[] = {
  { 0.42193459245985337, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.21708494054221628, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.19161797648737755, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.14489224956209637, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.12588968030716380, 5.0000000000000000, 2.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1141()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1141)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1141[i].x), Tp(data1141[i].y),
		     Tp(data1141[i].z), Tp(data1141[i].p));
	const Tp f0 = data1141[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1142[] = {
  { 0.39919801690450957, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.29405919660985369, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.20682746443446567, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.18278161466609860, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.15024802304792700, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13855786767077968, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12880927217128099, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.12052772989704705, 5.0000000000000000, 2.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1142()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1142)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1142[i].x), Tp(data1142[i].y),
		     Tp(data1142[i].z), Tp(data1142[i].p));
	const Tp f0 = data1142[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1143[] = {
  { 0.38007843235600525, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 5.0000000000000000, 2.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1143()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1143)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1143[i].x), Tp(data1143[i].y),
		     Tp(data1143[i].z), Tp(data1143[i].p));
	const Tp f0 = data1143[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1144[] = {
  { 0.36367653002590999, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.26929396731289784, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 5.0000000000000000, 2.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1144()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1144)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1144[i].x), Tp(data1144[i].y),
		     Tp(data1144[i].z), Tp(data1144[i].p));
	const Tp f0 = data1144[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1145[] = {
  { 0.34938334718039693, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.25924893192492893, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.21323034960651346, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.18380687608379528, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.16287134249264495, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.14699392066849923, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.13442645614164755, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.12416765878620194, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11559576508589167, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10830098836378027, 5.0000000000000000, 2.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=2.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1145()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1145)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1145[i].x), Tp(data1145[i].y),
		     Tp(data1145[i].z), Tp(data1145[i].p));
	const Tp f0 = data1145[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1146[] = {
  { 1.2625205818912750, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.80421108910111860, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.61023275990848969, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.49877435732263031, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.42507502529871505, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.37217173108359985, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.33207938945607324, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.30049897897205485, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.27489221136027703, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.25365545886709745, 5.0000000000000000, 3.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1146()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1146)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1146[i].x), Tp(data1146[i].y),
		     Tp(data1146[i].z), Tp(data1146[i].p));
	const Tp f0 = data1146[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1147[] = {
  { 0.67243540762391052, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.47358314076150682, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.37767691694270905, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.31857200599266755, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.27764347267224726, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.24726015371628143, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.22362928147368372, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.20462324582094824, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18894411339211695, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.17574955367014047, 5.0000000000000000, 3.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1147()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1147)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1147[i].x), Tp(data1147[i].y),
		     Tp(data1147[i].z), Tp(data1147[i].p));
	const Tp f0 = data1147[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1148[] = {
  { 0.56169543033873548, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.40299735406429821, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.32477439804471248, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.27591628084320347, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.24175760839962171, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.21621234527246269, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.19622610421770009, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.18007199523256570, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.16668962701081813, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.15538696990472234, 5.0000000000000000, 3.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1148()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1148)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1148[i].x), Tp(data1148[i].y),
		     Tp(data1148[i].z), Tp(data1148[i].p));
	const Tp f0 = data1148[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1149[] = {
  { 0.49820173719202743, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.36122172518996071, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.29290614798863190, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.24991372038189930, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.21968981867679782, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.19698935005202972, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17916612276982422, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.16471755886515080, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.15271761932787808, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.14256003399301431, 5.0000000000000000, 3.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1149()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1149)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1149[i].x), Tp(data1149[i].y),
		     Tp(data1149[i].z), Tp(data1149[i].p));
	const Tp f0 = data1149[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1150[] = {
  { 0.45461355226272848, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.33198378851913835, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.27035293580648151, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.23137081797861417, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.20386289924842219, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.18314064674453737, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.16683057175741883, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.15358110118757398, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.14255722308120608, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.13321109278201460, 5.0000000000000000, 3.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1150()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1150)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1150[i].x), Tp(data1150[i].y),
		     Tp(data1150[i].z), Tp(data1150[i].p));
	const Tp f0 = data1150[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1151[] = {
  { 0.42193459245985337, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.30976241638119928, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.25307408248246627, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.21708494054221633, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.19161797648737755, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.17239029176209433, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15722844983158979, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.14489224956209637, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.13461412157939798, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12588968030716380, 5.0000000000000000, 3.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1151()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1151)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1151[i].x), Tp(data1151[i].y),
		     Tp(data1151[i].z), Tp(data1151[i].p));
	const Tp f0 = data1151[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1152[] = {
  { 0.39609249754952380, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.29200640577335130, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.23918145183247710, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.20554851955254339, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.18169680295022048, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.16365689406956915, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14941072051245458, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13780492604270261, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12812471388106511, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11989980736081955, 5.0000000000000000, 3.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1152()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1152)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1152[i].x), Tp(data1152[i].y),
		     Tp(data1152[i].z), Tp(data1152[i].p));
	const Tp f0 = data1152[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1153[] = {
  { 0.37490672257801766, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.27732835487957475, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.22763930938409949, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.19592979226788718, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.15633936012100083, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.14284849030042363, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.13184660978927917, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11485148518398804, 5.0000000000000000, 3.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1153()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1153)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1153[i].x), Tp(data1153[i].y),
		     Tp(data1153[i].z), Tp(data1153[i].p));
	const Tp f0 = data1153[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1154[] = {
  { 0.35707864409656198, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947169, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262633, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373224, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455758, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855297, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 5.0000000000000000, 3.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1154()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1154)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1154[i].x), Tp(data1154[i].y),
		     Tp(data1154[i].z), Tp(data1154[i].p));
	const Tp f0 = data1154[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1155[] = {
  { 0.34177531815965190, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 5.0000000000000000, 3.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1155()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1155)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1155[i].x), Tp(data1155[i].y),
		     Tp(data1155[i].z), Tp(data1155[i].p));
	const Tp f0 = data1155[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1156[] = {
  { 0.32843230710046045, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.24474554836889348, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.20183051028848570, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.17430935681084589, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.15468288100621905, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13977101630709496, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12794979869413764, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11828755184020916, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.11020491664921006, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.10331957260334028, 5.0000000000000000, 3.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1156()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1156)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1156[i].x), Tp(data1156[i].y),
		     Tp(data1156[i].z), Tp(data1156[i].p));
	const Tp f0 = data1156[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1157[] = {
  { 1.1823091734174969, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.75541576451496006, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.57431936495071312, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.47008947126163109, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.40107863174854741, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.35148635651660265, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.31386785472054907, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.28421169779883143, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.26014766147690610, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.24017729914130131, 5.0000000000000000, 3.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1157()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1157)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1157[i].x), Tp(data1157[i].y),
		     Tp(data1157[i].z), Tp(data1157[i].p));
	const Tp f0 = data1157[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1158[] = {
  { 0.63383944056141572, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.44781663519650527, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.35783994318229656, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.30227837930034812, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.26374397196025812, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.23510177994201248, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.21280130805001146, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.19484875301719451, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.18002668280820980, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16754435706279278, 5.0000000000000000, 3.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1158()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1158)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1158[i].x), Tp(data1158[i].y),
		     Tp(data1158[i].z), Tp(data1158[i].p));
	const Tp f0 = data1158[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1159[] = {
  { 0.53028273587019470, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.38169455741536795, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.30823097320026416, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.26224871934098654, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.23004841666960310, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.20593584740565521, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.18704950966394510, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.17176974669889250, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15910103247430643, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14839309852132304, 5.0000000000000000, 3.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1159()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1159)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1159[i].x), Tp(data1159[i].y),
		     Tp(data1159[i].z), Tp(data1159[i].p));
	const Tp f0 = data1159[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1160[] = {
  { 0.47078850771996805, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.34247161105719687, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.27827367482698762, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.23778437210655834, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20927242677458086, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18782858490110974, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.17097270188240141, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15729483835968863, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14592515814192542, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13629366705973089, 5.0000000000000000, 3.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1160()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1160)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1160[i].x), Tp(data1160[i].y),
		     Tp(data1160[i].z), Tp(data1160[i].p));
	const Tp f0 = data1160[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1161[] = {
  { 0.42989092919613203, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.31497844547758391, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.25703824705827677, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.22030854348613493, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.19434555902721881, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.17475989052454721, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15932635698806283, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14677631580506806, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13632516528205274, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12745765236291220, 5.0000000000000000, 3.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1161()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1161)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1161[i].x), Tp(data1161[i].y),
		     Tp(data1161[i].z), Tp(data1161[i].p));
	const Tp f0 = data1161[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1162[] = {
  { 0.39919801690450957, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.29405919660985369, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.24074904863009541, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.20682746443446567, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.18278161466609860, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.16460114882221016, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.15024802304792700, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13855786767077968, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12880927217128099, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.12052772989704705, 5.0000000000000000, 3.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1162()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1162)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1162[i].x), Tp(data1162[i].y),
		     Tp(data1162[i].z), Tp(data1162[i].p));
	const Tp f0 = data1162[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1163[] = {
  { 0.37490672257801766, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.27732835487957475, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.22763930938409951, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.19592979226788718, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.17340224345725705, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15633936012100086, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.14284849030042363, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.13184660978927917, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.12266177809281005, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11485148518398804, 5.0000000000000000, 3.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1163()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1163)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1163[i].x), Tp(data1163[i].y),
		     Tp(data1163[i].z), Tp(data1163[i].p));
	const Tp f0 = data1163[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1164[] = {
  { 0.35497886804334555, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.26348726872117190, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.21673876900247155, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.18683591987251380, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.16555376173133754, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14941072051245458, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13663155134484470, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12619913157295068, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11748171056537035, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.11006283631027457, 5.0000000000000000, 3.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1164()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1164)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1164[i].x), Tp(data1164[i].y),
		     Tp(data1164[i].z), Tp(data1164[i].p));
	const Tp f0 = data1164[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1165[] = {
  { 0.33819969287467355, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.14346870994699226, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.13129155535329290, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 5.0000000000000000, 3.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1165()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1165)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1165[i].x), Tp(data1165[i].y),
		     Tp(data1165[i].z), Tp(data1165[i].p));
	const Tp f0 = data1165[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1166[] = {
  { 0.32378952990903481, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.24161482897584435, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13828510006492684, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 5.0000000000000000, 3.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1166()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1166)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1166[i].x), Tp(data1166[i].y),
		     Tp(data1166[i].z), Tp(data1166[i].p));
	const Tp f0 = data1166[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1167[] = {
  { 0.31121973703230099, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.23272751358046800, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.19233504909865903, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.16636924381727239, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14781779918367008, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.13370166746428541, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.12249723529609874, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.11332926434347647, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10565287267507181, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.099108127499405257, 5.0000000000000000, 3.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=3.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1167()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1167)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1167[i].x), Tp(data1167[i].y),
		     Tp(data1167[i].z), Tp(data1167[i].p));
	const Tp f0 = data1167[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1168[] = {
  { 1.1162289525908911, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.71499953726585297, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.54447432971840126, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.44619507700934191, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.38105329983216318, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.33419876538580223, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.29862916776034337, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.27056899795342709, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.24778609888688150, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.22886854366397424, 5.0000000000000000, 4.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1168()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1168)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1168[i].x), Tp(data1168[i].y),
		     Tp(data1168[i].z), Tp(data1168[i].p));
	const Tp f0 = data1168[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1169[] = {
  { 0.60160394534475825, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.42616464729710912, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.34110840068867848, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.28849890302086456, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.25196512714223446, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.22478140935023830, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.20359759944141806, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.18653078812307397, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.17243038686430417, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.16054856458268149, 5.0000000000000000, 4.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1169()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1169)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1169[i].x), Tp(data1169[i].y),
		     Tp(data1169[i].z), Tp(data1169[i].p));
	const Tp f0 = data1169[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1170[] = {
  { 0.50396843767233279, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.36373535432267656, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.29422988090017677, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.25064946872285193, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.22008997604688094, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.19718085501568886, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.17922038758100892, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.16467795731794288, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.15261200842782935, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.14240708160931742, 5.0000000000000000, 4.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1170()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1170)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1170[i].x), Tp(data1170[i].y),
		     Tp(data1170[i].z), Tp(data1170[i].p));
	const Tp f0 = data1170[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1171[] = {
  { 0.44778454024562891, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.32663414779601752, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.26586483871333838, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.22746897886368803, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.20039354773902518, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.18000694772357967, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.16396671485329573, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.15093991123975528, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.14010351580803038, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.13091780755207250, 5.0000000000000000, 4.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1171()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1171)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1171[i].x), Tp(data1171[i].y),
		     Tp(data1171[i].z), Tp(data1171[i].p));
	const Tp f0 = data1171[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1172[] = {
  { 0.40911989618188382, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.30059562524134803, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.24573103475740585, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.21088685615112543, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.18622155855646449, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.16759317653603986, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.15289957565886375, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.14094109198361518, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.13097514479193445, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.12251370089051627, 5.0000000000000000, 4.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1172()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1172)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1172[i].x), Tp(data1172[i].y),
		     Tp(data1172[i].z), Tp(data1172[i].p));
	const Tp f0 = data1172[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1173[] = {
  { 0.38007843235600525, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.28076441039988737, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.23027115587674304, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.19808153653240518, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.17523026672771963, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.15793252983165473, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.14426266197009244, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.13311939795403521, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.12381982469938110, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11591440403017361, 5.0000000000000000, 4.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1173()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1173)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1173[i].x), Tp(data1173[i].y),
		     Tp(data1173[i].z), Tp(data1173[i].p));
	const Tp f0 = data1173[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1174[] = {
  { 0.35707864409656198, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.26489168774947169, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.21781871453262633, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.18772126981373224, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.16630745811455758, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.15006865242668110, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.13721633752735266, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.12672603871835356, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11796157290855297, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.11050364347570706, 5.0000000000000000, 4.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1174()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1174)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1174[i].x), Tp(data1174[i].y),
		     Tp(data1174[i].z), Tp(data1174[i].p));
	const Tp f0 = data1174[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1175[] = {
  { 0.33819969287467355, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.25175218656465831, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.20745768172942691, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.17906969945758447, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.15883551244265948, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.14346870994699226, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.13129155535329290, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.12134180312760508, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.11302124596643463, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10593522431942011, 5.0000000000000000, 4.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1175()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1175)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1175[i].x), Tp(data1175[i].y),
		     Tp(data1175[i].z), Tp(data1175[i].p));
	const Tp f0 = data1175[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1176[] = {
  { 0.32229604854757482, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.24060591252980174, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.19863084151656732, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.17167672279762300, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.15243555167854192, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.13780492604270264, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.12619913157295062, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.11670775397301596, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10876428955779004, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.10199468867893653, 5.0000000000000000, 4.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1176()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1176)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1176[i].x), Tp(data1176[i].y),
		     Tp(data1176[i].z), Tp(data1176[i].p));
	const Tp f0 = data1176[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1177[] = {
  { 0.30863208433619260, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.13286125114219746, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.12174808465966327, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.11265260970224161, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 5.0000000000000000, 4.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1177()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1177)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1177[i].x), Tp(data1177[i].y),
		     Tp(data1177[i].z), Tp(data1177[i].p));
	const Tp f0 = data1177[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1178[] = {
  { 0.29670878274813522, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.22252379047510515, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.18423812735553038, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.15957763113942444, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.14193170544719641, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.12848780299987306, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11780569675934752, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10905717299758165, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.10172614406502367, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.095471413501209176, 5.0000000000000000, 4.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1178()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1178)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1178[i].x), Tp(data1178[i].y),
		     Tp(data1178[i].z), Tp(data1178[i].p));
	const Tp f0 = data1178[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1179[] = {
  { 1.0605020626175816, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.68075965854518705, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.51911849792031284, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.42585344699120309, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.36397858547212425, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.31943960239213492, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.28560540065993695, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.25889866065655154, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.23720335234329346, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.21918039874741832, 5.0000000000000000, 4.5000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1179()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1179)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1179[i].x), Tp(data1179[i].y),
		     Tp(data1179[i].z), Tp(data1179[i].p));
	const Tp f0 = data1179[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1180[] = {
  { 0.57411046795964726, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.40760238031340812, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.32671880776689249, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.27662112062189537, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.24179395056338043, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.21585691484936845, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.19562924653743635, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.17932196430080147, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.16584118671070608, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.15447553632956265, 5.0000000000000000, 4.5000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1180()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1180)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1180[i].x), Tp(data1180[i].y),
		     Tp(data1180[i].z), Tp(data1180[i].p));
	const Tp f0 = data1180[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1181[] = {
  { 0.48146856024935336, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.34829670728282186, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.28215395230194468, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.24062135428961690, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.21146460339264184, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.18958655857871945, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.17242078581243564, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.15851220451038808, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.14696512174988713, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.13719370300096684, 5.0000000000000000, 4.5000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1181()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1181)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1181[i].x), Tp(data1181[i].y),
		     Tp(data1181[i].z), Tp(data1181[i].p));
	const Tp f0 = data1181[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1182[] = {
  { 0.42808593449069277, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.31299723668470153, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.25514380722164015, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.21853489959632386, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.19268911090764926, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.17320954131325222, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.15787038708207360, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.14540408916296541, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.13502744596076066, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.12622652631192144, 5.0000000000000000, 4.5000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1182()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1182)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1182[i].x), Tp(data1182[i].y),
		     Tp(data1182[i].z), Tp(data1182[i].p));
	const Tp f0 = data1182[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1183[] = {
  { 0.39131506781838787, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.28819712794148933, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.23594999714728990, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.20271656184114498, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.17916302942021570, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.16135668036713791, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.14729969321580355, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.13585100391959681, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.12630379536276651, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.11819323829604647, 5.0000000000000000, 4.5000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1183()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1183)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1183[i].x), Tp(data1183[i].y),
		     Tp(data1183[i].z), Tp(data1183[i].p));
	const Tp f0 = data1183[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1184[] = {
  { 0.36367653002590999, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.26929396731289784, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.22119920751659003, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.19049000920228321, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.16866282308705080, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.15212361450409367, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.13904202422096190, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.12837041823237205, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.11945866268003853, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.11187851423291066, 5.0000000000000000, 4.5000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1184()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1184)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1184[i].x), Tp(data1184[i].y),
		     Tp(data1184[i].z), Tp(data1184[i].p));
	const Tp f0 = data1184[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1185[] = {
  { 0.34177531815965190, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.25415428043764143, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.20930967784230087, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.18059079555922064, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.16013223784241620, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.14460194030822637, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.13229972567625120, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.12225089450827355, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11384972015614130, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.10669671120574309, 5.0000000000000000, 4.5000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1185()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1185)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1185[i].x), Tp(data1185[i].y),
		     Tp(data1185[i].z), Tp(data1185[i].p));
	const Tp f0 = data1185[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1186[] = {
  { 0.32378952990903481, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.24161482897584433, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.19941129022967902, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.17231921503789768, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.15298423533392708, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.13828510006492684, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.12662680541694901, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.11709377037495125, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.10911636586568768, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.10231853060877000, 5.0000000000000000, 4.5000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1186()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1186)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1186[i].x), Tp(data1186[i].y),
		     Tp(data1186[i].z), Tp(data1186[i].p));
	const Tp f0 = data1186[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1187[] = {
  { 0.30863208433619260, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.23097266561108259, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.19097441386143629, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.16524727476053686, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.14685844030151729, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.13286125114219746, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.12174808465966327, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.11265260970224161, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10503533930178945, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.098539817012806882, 5.0000000000000000, 4.5000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1187()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1187)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1187[i].x), Tp(data1187[i].y),
		     Tp(data1187[i].z), Tp(data1187[i].p));
	const Tp f0 = data1187[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1188[] = {
  { 0.29560457867385176, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.22177139496237150, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.18365308285677109, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.15909423614965643, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.14151773614835395, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.12812471388106508, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.11748171056537036, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.10876428955779005, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.10145865459994449, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.095225087800083000, 5.0000000000000000, 4.5000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1188()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1188)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1188[i].x), Tp(data1188[i].y),
		     Tp(data1188[i].z), Tp(data1188[i].p));
	const Tp f0 = data1188[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1189[] = {
  { 0.28423305952716627, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.21369851061605932, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.17720916259816363, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.15366616394914165, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.13679787979397157, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.12393271845547066, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11370123472976013, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10531522201643985, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.098283138373428169, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.092279787050595419, 5.0000000000000000, 4.5000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=4.5000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1189()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1189)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1189[i].x), Tp(data1189[i].y),
		     Tp(data1189[i].z), Tp(data1189[i].p));
	const Tp f0 = data1189[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
testcase_ellint_rj<double> data1190[] = {
  { 1.0126399973167399, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 0.50000000000000000 },
  { 0.65123614026811805, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.0000000000000000 },
  { 0.49720144890667828, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 1.5000000000000000 },
  { 0.40823926143551875, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.0000000000000000 },
  { 0.34917282417064488, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 2.5000000000000000 },
  { 0.30662731351955447, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.0000000000000000 },
  { 0.27428896215456872, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 3.5000000000000000 },
  { 0.24875007088012702, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.0000000000000000 },
  { 0.22799409953393041, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 4.5000000000000000 },
  { 0.21074444193122177, 5.0000000000000000, 5.0000000000000000, 
	  0.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=0.0000000000000000.
template<typename Tp>
  void
  test1190()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1190)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1190[i].x), Tp(data1190[i].y),
		     Tp(data1190[i].z), Tp(data1190[i].p));
	const Tp f0 = data1190[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
testcase_ellint_rj<double> data1191[] = {
  { 0.55027182572642119, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 0.50000000000000000 },
  { 0.39143618306709621, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.0000000000000000 },
  { 0.31415210943518235, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 1.5000000000000000 },
  { 0.26622739632444620, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.0000000000000000 },
  { 0.23287985082087539, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 2.5000000000000000 },
  { 0.20802560405354784, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.0000000000000000 },
  { 0.18862961391254038, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 3.5000000000000000 },
  { 0.17298383326391550, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.0000000000000000 },
  { 0.16004330932154509, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 4.5000000000000000 },
  { 0.14912815584871789, 5.0000000000000000, 5.0000000000000000, 
	  0.50000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=0.50000000000000000.
template<typename Tp>
  void
  test1191()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1191)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1191[i].x), Tp(data1191[i].y),
		     Tp(data1191[i].z), Tp(data1191[i].p));
	const Tp f0 = data1191[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
testcase_ellint_rj<double> data1192[] = {
  { 0.46191741425561045, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 0.50000000000000000 },
  { 0.33481923082721610, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.0000000000000000 },
  { 0.27158176497433534, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 1.5000000000000000 },
  { 0.23182380450040299, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.0000000000000000 },
  { 0.20388549974147677, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 2.5000000000000000 },
  { 0.18290474993849207, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.0000000000000000 },
  { 0.16643164880870376, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 3.5000000000000000 },
  { 0.15307628754308211, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.0000000000000000 },
  { 0.14198260091108916, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 4.5000000000000000 },
  { 0.13259038458639197, 5.0000000000000000, 5.0000000000000000, 
	  1.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=1.0000000000000000.
template<typename Tp>
  void
  test1192()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1192)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1192[i].x), Tp(data1192[i].y),
		     Tp(data1192[i].z), Tp(data1192[i].p));
	const Tp f0 = data1192[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
testcase_ellint_rj<double> data1193[] = {
  { 0.41094690289468638, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 0.50000000000000000 },
  { 0.30107578426061465, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.0000000000000000 },
  { 0.24574380041928576, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 1.5000000000000000 },
  { 0.21068500925450168, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.0000000000000000 },
  { 0.18590846707646830, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 2.5000000000000000 },
  { 0.16721915196355908, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.0000000000000000 },
  { 0.15249181170206264, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 3.5000000000000000 },
  { 0.14051533635416971, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.0000000000000000 },
  { 0.13054095718169420, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 4.5000000000000000 },
  { 0.12207707406867493, 5.0000000000000000, 5.0000000000000000, 
	  1.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=1.5000000000000000.
template<typename Tp>
  void
  test1193()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1193)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1193[i].x), Tp(data1193[i].y),
		     Tp(data1193[i].z), Tp(data1193[i].p));
	const Tp f0 = data1193[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
testcase_ellint_rj<double> data1194[] = {
  { 0.37580983608029778, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 0.50000000000000000 },
  { 0.27734754080633112, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.0000000000000000 },
  { 0.22736514280085002, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 1.5000000000000000 },
  { 0.19552991524211258, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.0000000000000000 },
  { 0.17294384503963564, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 2.5000000000000000 },
  { 0.15585426408892872, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.0000000000000000 },
  { 0.14235329837746191, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 3.5000000000000000 },
  { 0.13135050397608269, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.0000000000000000 },
  { 0.12217000545877146, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 4.5000000000000000 },
  { 0.11436707673490792, 5.0000000000000000, 5.0000000000000000, 
	  2.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=2.0000000000000000.
template<typename Tp>
  void
  test1194()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1194)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1194[i].x), Tp(data1194[i].y),
		     Tp(data1194[i].z), Tp(data1194[i].p));
	const Tp f0 = data1194[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
testcase_ellint_rj<double> data1195[] = {
  { 0.34938334718039693, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 0.50000000000000000 },
  { 0.25924893192492893, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.0000000000000000 },
  { 0.21323034960651346, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 1.5000000000000000 },
  { 0.18380687608379528, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.0000000000000000 },
  { 0.16287134249264495, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 2.5000000000000000 },
  { 0.14699392066849923, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.0000000000000000 },
  { 0.13442645614164755, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 3.5000000000000000 },
  { 0.12416765878620194, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.0000000000000000 },
  { 0.11559576508589167, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 4.5000000000000000 },
  { 0.10830098836378027, 5.0000000000000000, 5.0000000000000000, 
	  2.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=2.5000000000000000.
template<typename Tp>
  void
  test1195()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1195)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1195[i].x), Tp(data1195[i].y),
		     Tp(data1195[i].z), Tp(data1195[i].p));
	const Tp f0 = data1195[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
testcase_ellint_rj<double> data1196[] = {
  { 0.32843230710046045, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 0.50000000000000000 },
  { 0.24474554836889348, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.0000000000000000 },
  { 0.20183051028848570, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 1.5000000000000000 },
  { 0.17430935681084589, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.0000000000000000 },
  { 0.15468288100621905, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 2.5000000000000000 },
  { 0.13977101630709493, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.0000000000000000 },
  { 0.12794979869413764, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 3.5000000000000000 },
  { 0.11828755184020916, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.0000000000000000 },
  { 0.11020491664921006, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 4.5000000000000000 },
  { 0.10331957260334028, 5.0000000000000000, 5.0000000000000000, 
	  3.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=3.0000000000000000.
template<typename Tp>
  void
  test1196()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1196)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1196[i].x), Tp(data1196[i].y),
		     Tp(data1196[i].z), Tp(data1196[i].p));
	const Tp f0 = data1196[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
testcase_ellint_rj<double> data1197[] = {
  { 0.31121973703230099, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 0.50000000000000000 },
  { 0.23272751358046800, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.0000000000000000 },
  { 0.19233504909865898, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 1.5000000000000000 },
  { 0.16636924381727239, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.0000000000000000 },
  { 0.14781779918367008, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 2.5000000000000000 },
  { 0.13370166746428541, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.0000000000000000 },
  { 0.12249723529609874, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 3.5000000000000000 },
  { 0.11332926434347647, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.0000000000000000 },
  { 0.10565287267507181, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 4.5000000000000000 },
  { 0.099108127499405257, 5.0000000000000000, 5.0000000000000000, 
	  3.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=3.5000000000000000.
template<typename Tp>
  void
  test1197()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1197)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1197[i].x), Tp(data1197[i].y),
		     Tp(data1197[i].z), Tp(data1197[i].p));
	const Tp f0 = data1197[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
testcase_ellint_rj<double> data1198[] = {
  { 0.29670878274813522, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 0.50000000000000000 },
  { 0.22252379047510515, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.0000000000000000 },
  { 0.18423812735553041, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 1.5000000000000000 },
  { 0.15957763113942444, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.0000000000000000 },
  { 0.14193170544719641, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 2.5000000000000000 },
  { 0.12848780299987306, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.0000000000000000 },
  { 0.11780569675934752, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 3.5000000000000000 },
  { 0.10905717299758165, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.0000000000000000 },
  { 0.10172614406502367, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 4.5000000000000000 },
  { 0.095471413501209176, 5.0000000000000000, 5.0000000000000000, 
	  4.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=4.0000000000000000.
template<typename Tp>
  void
  test1198()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1198)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1198[i].x), Tp(data1198[i].y),
		     Tp(data1198[i].z), Tp(data1198[i].p));
	const Tp f0 = data1198[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
testcase_ellint_rj<double> data1199[] = {
  { 0.28423305952716627, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 0.50000000000000000 },
  { 0.21369851061605932, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.0000000000000000 },
  { 0.17720916259816363, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 1.5000000000000000 },
  { 0.15366616394914165, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.0000000000000000 },
  { 0.13679787979397157, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 2.5000000000000000 },
  { 0.12393271845547066, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.0000000000000000 },
  { 0.11370123472976013, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 3.5000000000000000 },
  { 0.10531522201643985, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.0000000000000000 },
  { 0.098283138373428169, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 4.5000000000000000 },
  { 0.092279787050595419, 5.0000000000000000, 5.0000000000000000, 
	  4.5000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=4.5000000000000000.
template<typename Tp>
  void
  test1199()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1199)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1199[i].x), Tp(data1199[i].y),
		     Tp(data1199[i].z), Tp(data1199[i].p));
	const Tp f0 = data1199[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

// Test data for x=5.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
testcase_ellint_rj<double> data1200[] = {
  { 0.27334019079898847, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 0.50000000000000000 },
  { 0.20595310656708540, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.0000000000000000 },
  { 0.17102051213438707, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 1.5000000000000000 },
  { 0.14844937809139416, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.0000000000000000 },
  { 0.13225920647869971, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 2.5000000000000000 },
  { 0.11989980736081954, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.0000000000000000 },
  { 0.11006283631027454, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 3.5000000000000000 },
  { 0.10199468867893652, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.0000000000000000 },
  { 0.095225087800082986, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 4.5000000000000000 },
  { 0.089442719099991588, 5.0000000000000000, 5.0000000000000000, 
	  5.0000000000000000, 5.0000000000000000 },
};

// Test function for x=5.0000000000000000, y=5.0000000000000000, z=5.0000000000000000.
template<typename Tp>
  void
  test1200()
  {
    bool test [[gnu::unused]] = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = sizeof(data1200)
			   / sizeof(testcase_ellint_rj<double>);
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::ellint_rj(Tp(data1200[i].x), Tp(data1200[i].y),
		     Tp(data1200[i].z), Tp(data1200[i].p));
	const Tp f0 = data1200[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
  	 max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));
  }

int
main()
{
  test001<double>();
  test002<double>();
  test003<double>();
  test004<double>();
  test005<double>();
  test006<double>();
  test007<double>();
  test008<double>();
  test009<double>();
  test010<double>();
  test011<double>();
  test012<double>();
  test013<double>();
  test014<double>();
  test015<double>();
  test016<double>();
  test017<double>();
  test018<double>();
  test019<double>();
  test020<double>();
  test021<double>();
  test022<double>();
  test023<double>();
  test024<double>();
  test025<double>();
  test026<double>();
  test027<double>();
  test028<double>();
  test029<double>();
  test030<double>();
  test031<double>();
  test032<double>();
  test033<double>();
  test034<double>();
  test035<double>();
  test036<double>();
  test037<double>();
  test038<double>();
  test039<double>();
  test040<double>();
  test041<double>();
  test042<double>();
  test043<double>();
  test044<double>();
  test045<double>();
  test046<double>();
  test047<double>();
  test048<double>();
  test049<double>();
  test050<double>();
  test051<double>();
  test052<double>();
  test053<double>();
  test054<double>();
  test055<double>();
  test056<double>();
  test057<double>();
  test058<double>();
  test059<double>();
  test060<double>();
  test061<double>();
  test062<double>();
  test063<double>();
  test064<double>();
  test065<double>();
  test066<double>();
  test067<double>();
  test068<double>();
  test069<double>();
  test070<double>();
  test071<double>();
  test072<double>();
  test073<double>();
  test074<double>();
  test075<double>();
  test076<double>();
  test077<double>();
  test078<double>();
  test079<double>();
  test080<double>();
  test081<double>();
  test082<double>();
  test083<double>();
  test084<double>();
  test085<double>();
  test086<double>();
  test087<double>();
  test088<double>();
  test089<double>();
  test090<double>();
  test091<double>();
  test092<double>();
  test093<double>();
  test094<double>();
  test095<double>();
  test096<double>();
  test097<double>();
  test098<double>();
  test099<double>();
  test100<double>();
  test101<double>();
  test102<double>();
  test103<double>();
  test104<double>();
  test105<double>();
  test106<double>();
  test107<double>();
  test108<double>();
  test109<double>();
  test110<double>();
  test111<double>();
  test112<double>();
  test113<double>();
  test114<double>();
  test115<double>();
  test116<double>();
  test117<double>();
  test118<double>();
  test119<double>();
  test120<double>();
  test121<double>();
  test122<double>();
  test123<double>();
  test124<double>();
  test125<double>();
  test126<double>();
  test127<double>();
  test128<double>();
  test129<double>();
  test130<double>();
  test131<double>();
  test132<double>();
  test133<double>();
  test134<double>();
  test135<double>();
  test136<double>();
  test137<double>();
  test138<double>();
  test139<double>();
  test140<double>();
  test141<double>();
  test142<double>();
  test143<double>();
  test144<double>();
  test145<double>();
  test146<double>();
  test147<double>();
  test148<double>();
  test149<double>();
  test150<double>();
  test151<double>();
  test152<double>();
  test153<double>();
  test154<double>();
  test155<double>();
  test156<double>();
  test157<double>();
  test158<double>();
  test159<double>();
  test160<double>();
  test161<double>();
  test162<double>();
  test163<double>();
  test164<double>();
  test165<double>();
  test166<double>();
  test167<double>();
  test168<double>();
  test169<double>();
  test170<double>();
  test171<double>();
  test172<double>();
  test173<double>();
  test174<double>();
  test175<double>();
  test176<double>();
  test177<double>();
  test178<double>();
  test179<double>();
  test180<double>();
  test181<double>();
  test182<double>();
  test183<double>();
  test184<double>();
  test185<double>();
  test186<double>();
  test187<double>();
  test188<double>();
  test189<double>();
  test190<double>();
  test191<double>();
  test192<double>();
  test193<double>();
  test194<double>();
  test195<double>();
  test196<double>();
  test197<double>();
  test198<double>();
  test199<double>();
  test200<double>();
  test201<double>();
  test202<double>();
  test203<double>();
  test204<double>();
  test205<double>();
  test206<double>();
  test207<double>();
  test208<double>();
  test209<double>();
  test210<double>();
  test211<double>();
  test212<double>();
  test213<double>();
  test214<double>();
  test215<double>();
  test216<double>();
  test217<double>();
  test218<double>();
  test219<double>();
  test220<double>();
  test221<double>();
  test222<double>();
  test223<double>();
  test224<double>();
  test225<double>();
  test226<double>();
  test227<double>();
  test228<double>();
  test229<double>();
  test230<double>();
  test231<double>();
  test232<double>();
  test233<double>();
  test234<double>();
  test235<double>();
  test236<double>();
  test237<double>();
  test238<double>();
  test239<double>();
  test240<double>();
  test241<double>();
  test242<double>();
  test243<double>();
  test244<double>();
  test245<double>();
  test246<double>();
  test247<double>();
  test248<double>();
  test249<double>();
  test250<double>();
  test251<double>();
  test252<double>();
  test253<double>();
  test254<double>();
  test255<double>();
  test256<double>();
  test257<double>();
  test258<double>();
  test259<double>();
  test260<double>();
  test261<double>();
  test262<double>();
  test263<double>();
  test264<double>();
  test265<double>();
  test266<double>();
  test267<double>();
  test268<double>();
  test269<double>();
  test270<double>();
  test271<double>();
  test272<double>();
  test273<double>();
  test274<double>();
  test275<double>();
  test276<double>();
  test277<double>();
  test278<double>();
  test279<double>();
  test280<double>();
  test281<double>();
  test282<double>();
  test283<double>();
  test284<double>();
  test285<double>();
  test286<double>();
  test287<double>();
  test288<double>();
  test289<double>();
  test290<double>();
  test291<double>();
  test292<double>();
  test293<double>();
  test294<double>();
  test295<double>();
  test296<double>();
  test297<double>();
  test298<double>();
  test299<double>();
  test300<double>();
  test301<double>();
  test302<double>();
  test303<double>();
  test304<double>();
  test305<double>();
  test306<double>();
  test307<double>();
  test308<double>();
  test309<double>();
  test310<double>();
  test311<double>();
  test312<double>();
  test313<double>();
  test314<double>();
  test315<double>();
  test316<double>();
  test317<double>();
  test318<double>();
  test319<double>();
  test320<double>();
  test321<double>();
  test322<double>();
  test323<double>();
  test324<double>();
  test325<double>();
  test326<double>();
  test327<double>();
  test328<double>();
  test329<double>();
  test330<double>();
  test331<double>();
  test332<double>();
  test333<double>();
  test334<double>();
  test335<double>();
  test336<double>();
  test337<double>();
  test338<double>();
  test339<double>();
  test340<double>();
  test341<double>();
  test342<double>();
  test343<double>();
  test344<double>();
  test345<double>();
  test346<double>();
  test347<double>();
  test348<double>();
  test349<double>();
  test350<double>();
  test351<double>();
  test352<double>();
  test353<double>();
  test354<double>();
  test355<double>();
  test356<double>();
  test357<double>();
  test358<double>();
  test359<double>();
  test360<double>();
  test361<double>();
  test362<double>();
  test363<double>();
  test364<double>();
  test365<double>();
  test366<double>();
  test367<double>();
  test368<double>();
  test369<double>();
  test370<double>();
  test371<double>();
  test372<double>();
  test373<double>();
  test374<double>();
  test375<double>();
  test376<double>();
  test377<double>();
  test378<double>();
  test379<double>();
  test380<double>();
  test381<double>();
  test382<double>();
  test383<double>();
  test384<double>();
  test385<double>();
  test386<double>();
  test387<double>();
  test388<double>();
  test389<double>();
  test390<double>();
  test391<double>();
  test392<double>();
  test393<double>();
  test394<double>();
  test395<double>();
  test396<double>();
  test397<double>();
  test398<double>();
  test399<double>();
  test400<double>();
  test401<double>();
  test402<double>();
  test403<double>();
  test404<double>();
  test405<double>();
  test406<double>();
  test407<double>();
  test408<double>();
  test409<double>();
  test410<double>();
  test411<double>();
  test412<double>();
  test413<double>();
  test414<double>();
  test415<double>();
  test416<double>();
  test417<double>();
  test418<double>();
  test419<double>();
  test420<double>();
  test421<double>();
  test422<double>();
  test423<double>();
  test424<double>();
  test425<double>();
  test426<double>();
  test427<double>();
  test428<double>();
  test429<double>();
  test430<double>();
  test431<double>();
  test432<double>();
  test433<double>();
  test434<double>();
  test435<double>();
  test436<double>();
  test437<double>();
  test438<double>();
  test439<double>();
  test440<double>();
  test441<double>();
  test442<double>();
  test443<double>();
  test444<double>();
  test445<double>();
  test446<double>();
  test447<double>();
  test448<double>();
  test449<double>();
  test450<double>();
  test451<double>();
  test452<double>();
  test453<double>();
  test454<double>();
  test455<double>();
  test456<double>();
  test457<double>();
  test458<double>();
  test459<double>();
  test460<double>();
  test461<double>();
  test462<double>();
  test463<double>();
  test464<double>();
  test465<double>();
  test466<double>();
  test467<double>();
  test468<double>();
  test469<double>();
  test470<double>();
  test471<double>();
  test472<double>();
  test473<double>();
  test474<double>();
  test475<double>();
  test476<double>();
  test477<double>();
  test478<double>();
  test479<double>();
  test480<double>();
  test481<double>();
  test482<double>();
  test483<double>();
  test484<double>();
  test485<double>();
  test486<double>();
  test487<double>();
  test488<double>();
  test489<double>();
  test490<double>();
  test491<double>();
  test492<double>();
  test493<double>();
  test494<double>();
  test495<double>();
  test496<double>();
  test497<double>();
  test498<double>();
  test499<double>();
  test500<double>();
  test501<double>();
  test502<double>();
  test503<double>();
  test504<double>();
  test505<double>();
  test506<double>();
  test507<double>();
  test508<double>();
  test509<double>();
  test510<double>();
  test511<double>();
  test512<double>();
  test513<double>();
  test514<double>();
  test515<double>();
  test516<double>();
  test517<double>();
  test518<double>();
  test519<double>();
  test520<double>();
  test521<double>();
  test522<double>();
  test523<double>();
  test524<double>();
  test525<double>();
  test526<double>();
  test527<double>();
  test528<double>();
  test529<double>();
  test530<double>();
  test531<double>();
  test532<double>();
  test533<double>();
  test534<double>();
  test535<double>();
  test536<double>();
  test537<double>();
  test538<double>();
  test539<double>();
  test540<double>();
  test541<double>();
  test542<double>();
  test543<double>();
  test544<double>();
  test545<double>();
  test546<double>();
  test547<double>();
  test548<double>();
  test549<double>();
  test550<double>();
  test551<double>();
  test552<double>();
  test553<double>();
  test554<double>();
  test555<double>();
  test556<double>();
  test557<double>();
  test558<double>();
  test559<double>();
  test560<double>();
  test561<double>();
  test562<double>();
  test563<double>();
  test564<double>();
  test565<double>();
  test566<double>();
  test567<double>();
  test568<double>();
  test569<double>();
  test570<double>();
  test571<double>();
  test572<double>();
  test573<double>();
  test574<double>();
  test575<double>();
  test576<double>();
  test577<double>();
  test578<double>();
  test579<double>();
  test580<double>();
  test581<double>();
  test582<double>();
  test583<double>();
  test584<double>();
  test585<double>();
  test586<double>();
  test587<double>();
  test588<double>();
  test589<double>();
  test590<double>();
  test591<double>();
  test592<double>();
  test593<double>();
  test594<double>();
  test595<double>();
  test596<double>();
  test597<double>();
  test598<double>();
  test599<double>();
  test600<double>();
  test601<double>();
  test602<double>();
  test603<double>();
  test604<double>();
  test605<double>();
  test606<double>();
  test607<double>();
  test608<double>();
  test609<double>();
  test610<double>();
  test611<double>();
  test612<double>();
  test613<double>();
  test614<double>();
  test615<double>();
  test616<double>();
  test617<double>();
  test618<double>();
  test619<double>();
  test620<double>();
  test621<double>();
  test622<double>();
  test623<double>();
  test624<double>();
  test625<double>();
  test626<double>();
  test627<double>();
  test628<double>();
  test629<double>();
  test630<double>();
  test631<double>();
  test632<double>();
  test633<double>();
  test634<double>();
  test635<double>();
  test636<double>();
  test637<double>();
  test638<double>();
  test639<double>();
  test640<double>();
  test641<double>();
  test642<double>();
  test643<double>();
  test644<double>();
  test645<double>();
  test646<double>();
  test647<double>();
  test648<double>();
  test649<double>();
  test650<double>();
  test651<double>();
  test652<double>();
  test653<double>();
  test654<double>();
  test655<double>();
  test656<double>();
  test657<double>();
  test658<double>();
  test659<double>();
  test660<double>();
  test661<double>();
  test662<double>();
  test663<double>();
  test664<double>();
  test665<double>();
  test666<double>();
  test667<double>();
  test668<double>();
  test669<double>();
  test670<double>();
  test671<double>();
  test672<double>();
  test673<double>();
  test674<double>();
  test675<double>();
  test676<double>();
  test677<double>();
  test678<double>();
  test679<double>();
  test680<double>();
  test681<double>();
  test682<double>();
  test683<double>();
  test684<double>();
  test685<double>();
  test686<double>();
  test687<double>();
  test688<double>();
  test689<double>();
  test690<double>();
  test691<double>();
  test692<double>();
  test693<double>();
  test694<double>();
  test695<double>();
  test696<double>();
  test697<double>();
  test698<double>();
  test699<double>();
  test700<double>();
  test701<double>();
  test702<double>();
  test703<double>();
  test704<double>();
  test705<double>();
  test706<double>();
  test707<double>();
  test708<double>();
  test709<double>();
  test710<double>();
  test711<double>();
  test712<double>();
  test713<double>();
  test714<double>();
  test715<double>();
  test716<double>();
  test717<double>();
  test718<double>();
  test719<double>();
  test720<double>();
  test721<double>();
  test722<double>();
  test723<double>();
  test724<double>();
  test725<double>();
  test726<double>();
  test727<double>();
  test728<double>();
  test729<double>();
  test730<double>();
  test731<double>();
  test732<double>();
  test733<double>();
  test734<double>();
  test735<double>();
  test736<double>();
  test737<double>();
  test738<double>();
  test739<double>();
  test740<double>();
  test741<double>();
  test742<double>();
  test743<double>();
  test744<double>();
  test745<double>();
  test746<double>();
  test747<double>();
  test748<double>();
  test749<double>();
  test750<double>();
  test751<double>();
  test752<double>();
  test753<double>();
  test754<double>();
  test755<double>();
  test756<double>();
  test757<double>();
  test758<double>();
  test759<double>();
  test760<double>();
  test761<double>();
  test762<double>();
  test763<double>();
  test764<double>();
  test765<double>();
  test766<double>();
  test767<double>();
  test768<double>();
  test769<double>();
  test770<double>();
  test771<double>();
  test772<double>();
  test773<double>();
  test774<double>();
  test775<double>();
  test776<double>();
  test777<double>();
  test778<double>();
  test779<double>();
  test780<double>();
  test781<double>();
  test782<double>();
  test783<double>();
  test784<double>();
  test785<double>();
  test786<double>();
  test787<double>();
  test788<double>();
  test789<double>();
  test790<double>();
  test791<double>();
  test792<double>();
  test793<double>();
  test794<double>();
  test795<double>();
  test796<double>();
  test797<double>();
  test798<double>();
  test799<double>();
  test800<double>();
  test801<double>();
  test802<double>();
  test803<double>();
  test804<double>();
  test805<double>();
  test806<double>();
  test807<double>();
  test808<double>();
  test809<double>();
  test810<double>();
  test811<double>();
  test812<double>();
  test813<double>();
  test814<double>();
  test815<double>();
  test816<double>();
  test817<double>();
  test818<double>();
  test819<double>();
  test820<double>();
  test821<double>();
  test822<double>();
  test823<double>();
  test824<double>();
  test825<double>();
  test826<double>();
  test827<double>();
  test828<double>();
  test829<double>();
  test830<double>();
  test831<double>();
  test832<double>();
  test833<double>();
  test834<double>();
  test835<double>();
  test836<double>();
  test837<double>();
  test838<double>();
  test839<double>();
  test840<double>();
  test841<double>();
  test842<double>();
  test843<double>();
  test844<double>();
  test845<double>();
  test846<double>();
  test847<double>();
  test848<double>();
  test849<double>();
  test850<double>();
  test851<double>();
  test852<double>();
  test853<double>();
  test854<double>();
  test855<double>();
  test856<double>();
  test857<double>();
  test858<double>();
  test859<double>();
  test860<double>();
  test861<double>();
  test862<double>();
  test863<double>();
  test864<double>();
  test865<double>();
  test866<double>();
  test867<double>();
  test868<double>();
  test869<double>();
  test870<double>();
  test871<double>();
  test872<double>();
  test873<double>();
  test874<double>();
  test875<double>();
  test876<double>();
  test877<double>();
  test878<double>();
  test879<double>();
  test880<double>();
  test881<double>();
  test882<double>();
  test883<double>();
  test884<double>();
  test885<double>();
  test886<double>();
  test887<double>();
  test888<double>();
  test889<double>();
  test890<double>();
  test891<double>();
  test892<double>();
  test893<double>();
  test894<double>();
  test895<double>();
  test896<double>();
  test897<double>();
  test898<double>();
  test899<double>();
  test900<double>();
  test901<double>();
  test902<double>();
  test903<double>();
  test904<double>();
  test905<double>();
  test906<double>();
  test907<double>();
  test908<double>();
  test909<double>();
  test910<double>();
  test911<double>();
  test912<double>();
  test913<double>();
  test914<double>();
  test915<double>();
  test916<double>();
  test917<double>();
  test918<double>();
  test919<double>();
  test920<double>();
  test921<double>();
  test922<double>();
  test923<double>();
  test924<double>();
  test925<double>();
  test926<double>();
  test927<double>();
  test928<double>();
  test929<double>();
  test930<double>();
  test931<double>();
  test932<double>();
  test933<double>();
  test934<double>();
  test935<double>();
  test936<double>();
  test937<double>();
  test938<double>();
  test939<double>();
  test940<double>();
  test941<double>();
  test942<double>();
  test943<double>();
  test944<double>();
  test945<double>();
  test946<double>();
  test947<double>();
  test948<double>();
  test949<double>();
  test950<double>();
  test951<double>();
  test952<double>();
  test953<double>();
  test954<double>();
  test955<double>();
  test956<double>();
  test957<double>();
  test958<double>();
  test959<double>();
  test960<double>();
  test961<double>();
  test962<double>();
  test963<double>();
  test964<double>();
  test965<double>();
  test966<double>();
  test967<double>();
  test968<double>();
  test969<double>();
  test970<double>();
  test971<double>();
  test972<double>();
  test973<double>();
  test974<double>();
  test975<double>();
  test976<double>();
  test977<double>();
  test978<double>();
  test979<double>();
  test980<double>();
  test981<double>();
  test982<double>();
  test983<double>();
  test984<double>();
  test985<double>();
  test986<double>();
  test987<double>();
  test988<double>();
  test989<double>();
  test990<double>();
  test991<double>();
  test992<double>();
  test993<double>();
  test994<double>();
  test995<double>();
  test996<double>();
  test997<double>();
  test998<double>();
  test999<double>();
  test1000<double>();
  test1001<double>();
  test1002<double>();
  test1003<double>();
  test1004<double>();
  test1005<double>();
  test1006<double>();
  test1007<double>();
  test1008<double>();
  test1009<double>();
  test1010<double>();
  test1011<double>();
  test1012<double>();
  test1013<double>();
  test1014<double>();
  test1015<double>();
  test1016<double>();
  test1017<double>();
  test1018<double>();
  test1019<double>();
  test1020<double>();
  test1021<double>();
  test1022<double>();
  test1023<double>();
  test1024<double>();
  test1025<double>();
  test1026<double>();
  test1027<double>();
  test1028<double>();
  test1029<double>();
  test1030<double>();
  test1031<double>();
  test1032<double>();
  test1033<double>();
  test1034<double>();
  test1035<double>();
  test1036<double>();
  test1037<double>();
  test1038<double>();
  test1039<double>();
  test1040<double>();
  test1041<double>();
  test1042<double>();
  test1043<double>();
  test1044<double>();
  test1045<double>();
  test1046<double>();
  test1047<double>();
  test1048<double>();
  test1049<double>();
  test1050<double>();
  test1051<double>();
  test1052<double>();
  test1053<double>();
  test1054<double>();
  test1055<double>();
  test1056<double>();
  test1057<double>();
  test1058<double>();
  test1059<double>();
  test1060<double>();
  test1061<double>();
  test1062<double>();
  test1063<double>();
  test1064<double>();
  test1065<double>();
  test1066<double>();
  test1067<double>();
  test1068<double>();
  test1069<double>();
  test1070<double>();
  test1071<double>();
  test1072<double>();
  test1073<double>();
  test1074<double>();
  test1075<double>();
  test1076<double>();
  test1077<double>();
  test1078<double>();
  test1079<double>();
  test1080<double>();
  test1081<double>();
  test1082<double>();
  test1083<double>();
  test1084<double>();
  test1085<double>();
  test1086<double>();
  test1087<double>();
  test1088<double>();
  test1089<double>();
  test1090<double>();
  test1091<double>();
  test1092<double>();
  test1093<double>();
  test1094<double>();
  test1095<double>();
  test1096<double>();
  test1097<double>();
  test1098<double>();
  test1099<double>();
  test1100<double>();
  test1101<double>();
  test1102<double>();
  test1103<double>();
  test1104<double>();
  test1105<double>();
  test1106<double>();
  test1107<double>();
  test1108<double>();
  test1109<double>();
  test1110<double>();
  test1111<double>();
  test1112<double>();
  test1113<double>();
  test1114<double>();
  test1115<double>();
  test1116<double>();
  test1117<double>();
  test1118<double>();
  test1119<double>();
  test1120<double>();
  test1121<double>();
  test1122<double>();
  test1123<double>();
  test1124<double>();
  test1125<double>();
  test1126<double>();
  test1127<double>();
  test1128<double>();
  test1129<double>();
  test1130<double>();
  test1131<double>();
  test1132<double>();
  test1133<double>();
  test1134<double>();
  test1135<double>();
  test1136<double>();
  test1137<double>();
  test1138<double>();
  test1139<double>();
  test1140<double>();
  test1141<double>();
  test1142<double>();
  test1143<double>();
  test1144<double>();
  test1145<double>();
  test1146<double>();
  test1147<double>();
  test1148<double>();
  test1149<double>();
  test1150<double>();
  test1151<double>();
  test1152<double>();
  test1153<double>();
  test1154<double>();
  test1155<double>();
  test1156<double>();
  test1157<double>();
  test1158<double>();
  test1159<double>();
  test1160<double>();
  test1161<double>();
  test1162<double>();
  test1163<double>();
  test1164<double>();
  test1165<double>();
  test1166<double>();
  test1167<double>();
  test1168<double>();
  test1169<double>();
  test1170<double>();
  test1171<double>();
  test1172<double>();
  test1173<double>();
  test1174<double>();
  test1175<double>();
  test1176<double>();
  test1177<double>();
  test1178<double>();
  test1179<double>();
  test1180<double>();
  test1181<double>();
  test1182<double>();
  test1183<double>();
  test1184<double>();
  test1185<double>();
  test1186<double>();
  test1187<double>();
  test1188<double>();
  test1189<double>();
  test1190<double>();
  test1191<double>();
  test1192<double>();
  test1193<double>();
  test1194<double>();
  test1195<double>();
  test1196<double>();
  test1197<double>();
  test1198<double>();
  test1199<double>();
  test1200<double>();
  return 0;
}
