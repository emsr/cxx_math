// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  pochhammer_l
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

Divergence at a=0.0000000000000000 x=0.25000000000000000 f1=0.81604893909826304 f2=inf
Divergence at a=1.0000000000000000 x=2.0000000000000000 f1=inf f2=1.0000000000000000

// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 0.72418433716979069
// max(|f - f_GSL| / |f_GSL|): 0.72418433716979069
const testcase_pochhammer_l<double>
data001[7] =
{
  { 0.99999999999999989, 1.0000000000000000, 0.25000000000000000 },
  { 0.99999999999999989, 1.0000000000000000, 0.50000000000000000 },
  { 0.99999999999999989, 1.0000000000000000, 0.75000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.2500000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.5000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.7500000000000000 },
};
const double toler001 = 0.050000000000000003;
Divergence at a=2.0000000000000000 x=3.0000000000000000 f1=inf f2=0.99999999999999989

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 1.2567583341910251
// max(|f - f_GSL| / |f_GSL|): 1.2567583341910251
const testcase_pochhammer_l<double>
data002[11] =
{
  { 1.0000000000000000, 2.0000000000000000, 0.25000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 0.50000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 0.75000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 1.0000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 1.2500000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 1.5000000000000000 },
  { 0.99999999999999978, 2.0000000000000000, 1.7500000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 2.0000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 2.2500000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 2.5000000000000000 },
  { 1.0000000000000000, 2.0000000000000000, 2.7500000000000000 },
};
const double toler002 = 0.050000000000000003;

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 111.40550005146146
// max(|f - f_GSL| / |f_GSL|): 4.6418958354775643
const testcase_pochhammer_l<double>
data003[20] =
{
  { 24.000000000000000, 5.0000000000000000, 0.25000000000000000 },
  { 24.000000000000000, 5.0000000000000000, 0.50000000000000000 },
  { 24.000000000000000, 5.0000000000000000, 0.75000000000000000 },
  { 24.000000000000004, 5.0000000000000000, 1.0000000000000000 },
  { 24.000000000000007, 5.0000000000000000, 1.2500000000000000 },
  { 24.000000000000007, 5.0000000000000000, 1.5000000000000000 },
  { 24.000000000000007, 5.0000000000000000, 1.7500000000000000 },
  { 24.000000000000007, 5.0000000000000000, 2.0000000000000000 },
  { 23.999999999999996, 5.0000000000000000, 2.2500000000000000 },
  { 24.000000000000000, 5.0000000000000000, 2.5000000000000000 },
  { 24.000000000000011, 5.0000000000000000, 2.7500000000000000 },
  { 24.000000000000007, 5.0000000000000000, 3.0000000000000000 },
  { 24.000000000000011, 5.0000000000000000, 3.2500000000000000 },
  { 23.999999999999989, 5.0000000000000000, 3.5000000000000000 },
  { 24.000000000000007, 5.0000000000000000, 3.7500000000000000 },
  { 24.000000000000000, 5.0000000000000000, 4.0000000000000000 },
  { 24.000000000000004, 5.0000000000000000, 4.2500000000000000 },
  { 23.999999999999982, 5.0000000000000000, 4.5000000000000000 },
  { 23.999999999999986, 5.0000000000000000, 4.7500000000000000 },
  { 24.000000000000007, 5.0000000000000000, 5.0000000000000000 },
};
const double toler003 = 0.050000000000000003;

// Test data for a=10.000000000000000.
// max(|f - f_GSL|): 362878.20511608594
// max(|f - f_GSL| / |f_GSL|): 0.99999505378110098
const testcase_pochhammer_l<double>
data004[20] =
{
  { 362880.00000000000, 10.000000000000000, 0.25000000000000000 },
  { 362879.99999999994, 10.000000000000000, 0.50000000000000000 },
  { 362879.99999999994, 10.000000000000000, 0.75000000000000000 },
  { 362879.99999999994, 10.000000000000000, 1.0000000000000000 },
  { 362879.99999999994, 10.000000000000000, 1.2500000000000000 },
  { 362879.99999999994, 10.000000000000000, 1.5000000000000000 },
  { 362879.99999999983, 10.000000000000000, 1.7500000000000000 },
  { 362879.99999999988, 10.000000000000000, 2.0000000000000000 },
  { 362879.99999999988, 10.000000000000000, 2.2500000000000000 },
  { 362880.00000000012, 10.000000000000000, 2.5000000000000000 },
  { 362880.00000000000, 10.000000000000000, 2.7500000000000000 },
  { 362880.00000000000, 10.000000000000000, 3.0000000000000000 },
  { 362880.00000000000, 10.000000000000000, 3.2500000000000000 },
  { 362880.00000000006, 10.000000000000000, 3.5000000000000000 },
  { 362879.99999999988, 10.000000000000000, 3.7500000000000000 },
  { 362879.99999999983, 10.000000000000000, 4.0000000000000000 },
  { 362879.99999999977, 10.000000000000000, 4.2500000000000000 },
  { 362880.00000000006, 10.000000000000000, 4.5000000000000000 },
  { 362880.00000000017, 10.000000000000000, 4.7500000000000000 },
  { 362879.99999999977, 10.000000000000000, 5.0000000000000000 },
};
const double toler004 = 0.050000000000000003;

// Test data for a=20.000000000000000.
// max(|f - f_GSL|): 1.2164510040883202e+17
// max(|f - f_GSL| / |f_GSL|): 1.0000000000000000
const testcase_pochhammer_l<double>
data005[20] =
{
  { 1.2164510040883202e+17, 20.000000000000000, 0.25000000000000000 },
  { 1.2164510040883200e+17, 20.000000000000000, 0.50000000000000000 },
  { 1.2164510040883200e+17, 20.000000000000000, 0.75000000000000000 },
  { 1.2164510040883202e+17, 20.000000000000000, 1.0000000000000000 },
  { 1.2164510040883202e+17, 20.000000000000000, 1.2500000000000000 },
  { 1.2164510040883202e+17, 20.000000000000000, 1.5000000000000000 },
  { 1.2164510040883197e+17, 20.000000000000000, 1.7500000000000000 },
  { 1.2164510040883202e+17, 20.000000000000000, 2.0000000000000000 },
  { 1.2164510040883202e+17, 20.000000000000000, 2.2500000000000000 },
  { 1.2164510040883203e+17, 20.000000000000000, 2.5000000000000000 },
  { 1.2164510040883203e+17, 20.000000000000000, 2.7500000000000000 },
  { 1.2164510040883210e+17, 20.000000000000000, 3.0000000000000000 },
  { 1.2164510040883206e+17, 20.000000000000000, 3.2500000000000000 },
  { 1.2164510040883190e+17, 20.000000000000000, 3.5000000000000000 },
  { 1.2164510040883211e+17, 20.000000000000000, 3.7500000000000000 },
  { 1.2164510040883211e+17, 20.000000000000000, 4.0000000000000000 },
  { 1.2164510040883205e+17, 20.000000000000000, 4.2500000000000000 },
  { 1.2164510040883205e+17, 20.000000000000000, 4.5000000000000000 },
  { 1.2164510040883206e+17, 20.000000000000000, 4.7500000000000000 },
  { 1.2164510040883190e+17, 20.000000000000000, 5.0000000000000000 },
};
const double toler005 = 0.050000000000000003;

// Test data for a=50.000000000000000.
// max(|f - f_GSL|): 6.0828186403426798e+62
// max(|f - f_GSL| / |f_GSL|): 1.0000000000000000
const testcase_pochhammer_l<double>
data006[20] =
{
  { 6.0828186403426752e+62, 50.000000000000000, 0.25000000000000000 },
  { 6.0828186403426761e+62, 50.000000000000000, 0.50000000000000000 },
  { 6.0828186403426743e+62, 50.000000000000000, 0.75000000000000000 },
  { 6.0828186403426761e+62, 50.000000000000000, 1.0000000000000000 },
  { 6.0828186403426771e+62, 50.000000000000000, 1.2500000000000000 },
  { 6.0828186403426743e+62, 50.000000000000000, 1.5000000000000000 },
  { 6.0828186403426780e+62, 50.000000000000000, 1.7500000000000000 },
  { 6.0828186403426761e+62, 50.000000000000000, 2.0000000000000000 },
  { 6.0828186403426761e+62, 50.000000000000000, 2.2500000000000000 },
  { 6.0828186403426780e+62, 50.000000000000000, 2.5000000000000000 },
  { 6.0828186403426743e+62, 50.000000000000000, 2.7500000000000000 },
  { 6.0828186403426725e+62, 50.000000000000000, 3.0000000000000000 },
  { 6.0828186403426789e+62, 50.000000000000000, 3.2500000000000000 },
  { 6.0828186403426771e+62, 50.000000000000000, 3.5000000000000000 },
  { 6.0828186403426771e+62, 50.000000000000000, 3.7500000000000000 },
  { 6.0828186403426798e+62, 50.000000000000000, 4.0000000000000000 },
  { 6.0828186403426688e+62, 50.000000000000000, 4.2500000000000000 },
  { 6.0828186403426752e+62, 50.000000000000000, 4.5000000000000000 },
  { 6.0828186403426761e+62, 50.000000000000000, 4.7500000000000000 },
  { 6.0828186403426679e+62, 50.000000000000000, 5.0000000000000000 },
};
const double toler006 = 0.050000000000000003;

// Test data for a=100.00000000000000.
// max(|f - f_GSL|): 9.3326215443944306e+155
// max(|f - f_GSL| / |f_GSL|): 1.0000000000000000
const testcase_pochhammer_l<double>
data007[20] =
{
  { 9.3326215443944134e+155, 100.00000000000000, 0.25000000000000000 },
  { 9.3326215443944172e+155, 100.00000000000000, 0.50000000000000000 },
  { 9.3326215443944153e+155, 100.00000000000000, 0.75000000000000000 },
  { 9.3326215443944191e+155, 100.00000000000000, 1.0000000000000000 },
  { 9.3326215443944134e+155, 100.00000000000000, 1.2500000000000000 },
  { 9.3326215443944191e+155, 100.00000000000000, 1.5000000000000000 },
  { 9.3326215443944172e+155, 100.00000000000000, 1.7500000000000000 },
  { 9.3326215443944172e+155, 100.00000000000000, 2.0000000000000000 },
  { 9.3326215443944115e+155, 100.00000000000000, 2.2500000000000000 },
  { 9.3326215443944077e+155, 100.00000000000000, 2.5000000000000000 },
  { 9.3326215443944077e+155, 100.00000000000000, 2.7500000000000000 },
  { 9.3326215443944134e+155, 100.00000000000000, 3.0000000000000000 },
  { 9.3326215443944153e+155, 100.00000000000000, 3.2500000000000000 },
  { 9.3326215443944039e+155, 100.00000000000000, 3.5000000000000000 },
  { 9.3326215443944191e+155, 100.00000000000000, 3.7500000000000000 },
  { 9.3326215443944134e+155, 100.00000000000000, 4.0000000000000000 },
  { 9.3326215443944058e+155, 100.00000000000000, 4.2500000000000000 },
  { 9.3326215443944020e+155, 100.00000000000000, 4.5000000000000000 },
  { 9.3326215443944058e+155, 100.00000000000000, 4.7500000000000000 },
  { 9.3326215443944306e+155, 100.00000000000000, 5.0000000000000000 },
};
const double toler007 = 0.050000000000000003;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_pochhammer_l<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::pochhammer_l(data[i].a, data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  return 0;
}
