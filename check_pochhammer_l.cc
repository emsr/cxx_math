// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
//
// Copyright (C) 2016 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  pochhammer_l
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< std::endl; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>


// Test data for a=0.25000000000000000.
// max(|f - f_GSL|): 1.2060634289351705e+155
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000004
// mean(f - f_GSL): 1.5075792861689631e+154
// variance(f - f_GSL): inf
// stddev(f - f_GSL): 4.2640781457057939e+154
const testcase_pochhammer_l<double>
data001[8] =
{
  { 1.0000000000000000, 0.25000000000000000, 0.0000000000000000 },
  { 0.25000000000000000, 0.25000000000000000, 1.0000000000000000 },
  { -0.18750000000000000, 0.25000000000000000, 2.0000000000000000 },
  { 3.3837890625000000, 0.25000000000000000, 5.0000000000000000 },
  { -42303.691363334656, 0.25000000000000000, 10.000000000000000 },
  { -11828484735041610., 0.25000000000000000, 20.000000000000000 },
  { -4.6814734487901089e+61, 0.25000000000000000, 50.000000000000000 },
  { -6.0303171446759310e+154, 0.25000000000000000, 100.00000000000000 },
};
const double toler001 = 0.050000000000000003;

// Test data for a=0.50000000000000000.
// max(|f - f_GSL|): 5.2852163738255689e+154
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000044
// mean(f - f_GSL): 6.6065204672819611e+153
// variance(f - f_GSL): inf
// stddev(f - f_GSL): 1.8686061689851174e+154
const testcase_pochhammer_l<double>
data002[8] =
{
  { 1.0000000000000000, 0.50000000000000000, 0.0000000000000000 },
  { 0.50000000000000000, 0.50000000000000000, 1.0000000000000000 },
  { -0.25000000000000000, 0.50000000000000000, 2.0000000000000000 },
  { 3.2812499999999996, 0.50000000000000000, 5.0000000000000000 },
  { -33651.782226562500, 0.50000000000000000, 10.000000000000000 },
  { -7820887119901554.0, 0.50000000000000000, 20.000000000000000 },
  { -2.4450853371181271e+61, 0.50000000000000000, 50.000000000000000 },
  { -2.6426081869127788e+154, 0.50000000000000000, 100.00000000000000 },
};
const double toler002 = 0.050000000000000003;

// Test data for a=0.75000000000000000.
// max(|f - f_GSL|): 1.2290677811453688e+154
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000084
// mean(f - f_GSL): 1.5363347264317111e+153
// variance(f - f_GSL): 1.8882595133120004e+307
// stddev(f - f_GSL): 4.3454108129289688e+153
const testcase_pochhammer_l<double>
data003[8] =
{
  { 1.0000000000000000, 0.75000000000000000, 0.0000000000000000 },
  { 0.75000000000000000, 0.75000000000000000, 1.0000000000000000 },
  { -0.18750000000000000, 0.75000000000000000, 2.0000000000000000 },
  { 1.7138671875000000, 0.75000000000000000, 5.0000000000000000 },
  { -14295.434832572937, 0.75000000000000000, 10.000000000000000 },
  { -2751423860459567.5, 0.75000000000000000, 20.000000000000000 },
  { -6.7811862645560589e+60, 0.75000000000000000, 50.000000000000000 },
  { -6.1453389057270772e+153, 0.75000000000000000, 100.00000000000000 },
};
const double toler003 = 0.050000000000000003;

// Test data for a=1.0000000000000000.
// max(|f - f_GSL|): 0.0000000000000000
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_pochhammer_l<double>
data004[8] =
{
  { 1.0000000000000000, 1.0000000000000000, 0.0000000000000000 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 2.0000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 5.0000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 10.000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 20.000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 50.000000000000000 },
  { 0.0000000000000000, 1.0000000000000000, 100.00000000000000 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for a=1.2500000000000000.
// max(|f - f_GSL|): 1.4420480290024841e+139
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000000
// mean(f - f_GSL): 1.8025600362531051e+138
// variance(f - f_GSL): 2.5993781474374364e+277
// stddev(f - f_GSL): 5.0984097005217584e+138
const testcase_pochhammer_l<double>
data005[8] =
{
  { 1.0000000000000000, 1.2500000000000000, 0.0000000000000000 },
  { 1.2500000000000000, 1.2500000000000000, 1.0000000000000000 },
  { 0.31250000000000000, 1.2500000000000000, 2.0000000000000000 },
  { -1.1279296875000000, 1.2500000000000000, 5.0000000000000000 },
  { 6043.3844804763794, 1.2500000000000000, 10.000000000000000 },
  { 788565649002774.00, 1.2500000000000000, 20.000000000000000 },
  { 1.2003778073820791e+60, 1.2500000000000000, 50.000000000000000 },
  { 7.6333128413619383e+152, 1.2500000000000000, 100.00000000000000 },
};
const double toler005 = 0.050000000000000003;

// Test data for a=1.5000000000000000.
// max(|f - f_GSL|): 1.1164242805180522e+138
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000000
// mean(f - f_GSL): 1.3955303506475652e+137
// variance(f - f_GSL): 1.5580039676628131e+275
// stddev(f - f_GSL): 3.9471558971781350e+137
const testcase_pochhammer_l<double>
data006[8] =
{
  { 1.0000000000000000, 1.5000000000000000, 0.0000000000000000 },
  { 1.5000000000000000, 1.5000000000000000, 1.0000000000000000 },
  { 0.75000000000000000, 1.5000000000000000, 2.0000000000000000 },
  { -1.4062500000000000, 1.5000000000000000, 5.0000000000000000 },
  { 5938.5498046875000, 1.5000000000000000, 10.000000000000000 },
  { 634125982694720.50, 1.5000000000000000, 20.000000000000000 },
  { 7.5621195993344138e+59, 1.5000000000000000, 50.000000000000000 },
  { 4.0242764267707290e+152, 1.5000000000000000, 100.00000000000000 },
};
const double toler006 = 0.050000000000000003;

// Test data for a=1.7500000000000000.
// max(|f - f_GSL|): 1.1862007980504304e+139
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000000
// mean(f - f_GSL): 1.4827509975630381e+138
// variance(f - f_GSL): 1.7588404166193476e+277
// stddev(f - f_GSL): 4.1938531407517690e+138
const testcase_pochhammer_l<double>
data007[8] =
{
  { 1.0000000000000000, 1.7500000000000000, 0.0000000000000000 },
  { 1.7500000000000000, 1.7500000000000000, 1.0000000000000000 },
  { 1.3125000000000000, 1.7500000000000000, 2.0000000000000000 },
  { -0.92285156250000000, 1.7500000000000000, 5.0000000000000000 },
  { 3032.3649644851685, 1.7500000000000000, 10.000000000000000 },
  { 263835164701602.38, 1.7500000000000000, 20.000000000000000 },
  { 2.4594976089063422e+59, 1.7500000000000000, 50.000000000000000 },
  { 1.0945896269742883e+152, 1.7500000000000000, 100.00000000000000 },
};
const double toler007 = 0.050000000000000003;

// Test data for a=2.0000000000000000.
// max(|f - f_GSL|): 0.0000000000000000
// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000
// mean(f - f_GSL): 0.0000000000000000
// variance(f - f_GSL): 0.0000000000000000
// stddev(f - f_GSL): 0.0000000000000000
const testcase_pochhammer_l<double>
data008[8] =
{
  { 1.0000000000000000, 2.0000000000000000, 0.0000000000000000 },
  { 2.0000000000000000, 2.0000000000000000, 1.0000000000000000 },
  { 2.0000000000000000, 2.0000000000000000, 2.0000000000000000 },
  { 0.0000000000000000, 2.0000000000000000, 5.0000000000000000 },
  { 0.0000000000000000, 2.0000000000000000, 10.000000000000000 },
  { 0.0000000000000000, 2.0000000000000000, 20.000000000000000 },
  { 0.0000000000000000, 2.0000000000000000, 50.000000000000000 },
  { 0.0000000000000000, 2.0000000000000000, 100.00000000000000 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for a=2.2500000000000000.
// max(|f - f_GSL|): 3.5140570625194704e+151
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000067
// mean(f - f_GSL): 4.3925713281493380e+150
// variance(f - f_GSL): 1.5435746298303711e+302
// stddev(f - f_GSL): 1.2424067891919985e+151
const testcase_pochhammer_l<double>
data009[8] =
{
  { 1.0000000000000000, 2.2500000000000000, 0.0000000000000000 },
  { 2.2500000000000000, 2.2500000000000000, 1.0000000000000000 },
  { 2.8125000000000000, 2.2500000000000000, 2.0000000000000000 },
  { 0.92285156250000000, 2.2500000000000000, 5.0000000000000000 },
  { -1754.5309782028198, 2.2500000000000000, 10.000000000000000 },
  { -99959025929929.078, 2.2500000000000000, 20.000000000000000 },
  { -5.6562305059888551e+58, 2.2500000000000000, 50.000000000000000 },
  { -1.7570285312597814e+151, 2.2500000000000000, 100.00000000000000 },
};
const double toler009 = 0.050000000000000003;

// Test data for a=2.5000000000000000.
// max(|f - f_GSL|): 2.0637315009080496e+151
// max(|f - f_GSL| / |f_GSL|): 1.9999999999999987
// mean(f - f_GSL): 2.5796643761350620e+150
// variance(f - f_GSL): 5.3237346348002388e+301
// stddev(f - f_GSL): 7.2963926942018669e+150
const testcase_pochhammer_l<double>
data010[8] =
{
  { 1.0000000000000000, 2.5000000000000000, 0.0000000000000000 },
  { 2.5000000000000000, 2.5000000000000000, 1.0000000000000000 },
  { 3.7500000000000000, 2.5000000000000000, 2.0000000000000000 },
  { 1.4062500000000000, 2.5000000000000000, 5.0000000000000000 },
  { -1979.5166015625000, 2.5000000000000000, 10.000000000000000 },
  { -90589426099245.797, 2.5000000000000000, 20.000000000000000 },
  { -3.9800629470181124e+58, 2.5000000000000000, 50.000000000000000 },
  { -1.0318657504540329e+151, 2.5000000000000000, 100.00000000000000 },
};
const double toler010 = 0.050000000000000003;

// Test data for a=2.7500000000000000.
// max(|f - f_GSL|): 6.1904811808313239e+150
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000120
// mean(f - f_GSL): 7.7381014760391548e+149
// variance(f - f_GSL): 4.7902571562783477e+300
// stddev(f - f_GSL): 2.1886656108867678e+150
const testcase_pochhammer_l<double>
data011[8] =
{
  { 1.0000000000000000, 2.7500000000000000, 0.0000000000000000 },
  { 2.7500000000000000, 2.7500000000000000, 1.0000000000000000 },
  { 4.8125000000000000, 2.7500000000000000, 2.0000000000000000 },
  { 1.1279296875000000, 2.7500000000000000, 5.0000000000000000 },
  { -1150.2074003219604, 2.7500000000000000, 10.000000000000000 },
  { -42060678430690.234, 2.7500000000000000, 20.000000000000000 },
  { -1.4314536348132149e+58, 2.7500000000000000, 50.000000000000000 },
  { -3.0952405904157255e+150, 2.7500000000000000, 100.00000000000000 },
};
const double toler011 = 0.050000000000000003;

// Test data for a=3.0000000000000000.
// max(|f - f_GSL|): 4.4408920985006262e-16
// max(|f - f_GSL| / |f_GSL|): 1.4802973661668753e-16
// mean(f - f_GSL): -5.5511151231257827e-17
// variance(f - f_GSL): 5.0310006710523708e-34
// stddev(f - f_GSL): 2.2429892266911074e-17
const testcase_pochhammer_l<double>
data012[8] =
{
  { 1.0000000000000000, 3.0000000000000000, 0.0000000000000000 },
  { 3.0000000000000000, 3.0000000000000000, 1.0000000000000000 },
  { 6.0000000000000000, 3.0000000000000000, 2.0000000000000000 },
  { 0.0000000000000000, 3.0000000000000000, 5.0000000000000000 },
  { 0.0000000000000000, 3.0000000000000000, 10.000000000000000 },
  { 0.0000000000000000, 3.0000000000000000, 20.000000000000000 },
  { 0.0000000000000000, 3.0000000000000000, 50.000000000000000 },
  { 0.0000000000000000, 3.0000000000000000, 100.00000000000000 },
};
const double toler012 = 2.5000000000000020e-13;

// Test data for a=3.2500000000000000.
// max(|f - f_GSL|): 2.2168581091016010e+136
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000000
// mean(f - f_GSL): 2.7710726363770013e+135
// variance(f - f_GSL): 6.1430748448619074e+271
// stddev(f - f_GSL): 7.8377770093706465e+135
const testcase_pochhammer_l<double>
data013[8] =
{
  { 1.0000000000000000, 3.2500000000000000, 0.0000000000000000 },
  { 3.2500000000000000, 3.2500000000000000, 1.0000000000000000 },
  { 7.3125000000000000, 3.2500000000000000, 2.0000000000000000 },
  { -1.7138671875000000, 3.2500000000000000, 5.0000000000000000 },
  { 844.77417469024670, 3.2500000000000000, 10.000000000000000 },
  { 19395034881926.543, 3.2500000000000000, 20.000000000000000 },
  { 3.9321388544307538e+57, 3.2500000000000000, 50.000000000000000 },
  { 5.9021630249036580e+149, 3.2500000000000000, 100.00000000000000 },
};
const double toler013 = 0.050000000000000003;

// Test data for a=3.5000000000000000.
// max(|f - f_GSL|): 1.8170968107390172e+135
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000000
// mean(f - f_GSL): -2.2713710134237715e+134
// variance(f - f_GSL): 4.1273010244973847e+269
// stddev(f - f_GSL): 6.4244073847300383e+134
const testcase_pochhammer_l<double>
data014[8] =
{
  { 1.0000000000000000, 3.5000000000000000, 0.0000000000000000 },
  { 3.5000000000000000, 3.5000000000000000, 1.0000000000000000 },
  { 8.7500000000000000, 3.5000000000000000, 2.0000000000000000 },
  { -3.2812500000000000, 3.5000000000000000, 5.0000000000000000 },
  { 1065.8935546875000, 3.5000000000000000, 10.000000000000000 },
  { 19215938869536.988, 3.5000000000000000, 20.000000000000000 },
  { 2.9957463042071814e+57, 3.5000000000000000, 50.000000000000000 },
  { 3.7425182658954563e+149, 3.5000000000000000, 100.00000000000000 },
};
const double toler014 = 0.050000000000000003;

// Test data for a=3.7500000000000000.
// max(|f - f_GSL|): 1.1583992168461235e+135
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000004
// mean(f - f_GSL): 1.4479990210576544e+134
// variance(f - f_GSL): 1.6773609319871403e+269
// stddev(f - f_GSL): 4.0955597077653993e+134
const testcase_pochhammer_l<double>
data015[8] =
{
  { 1.0000000000000000, 3.7500000000000000, 0.0000000000000000 },
  { 3.7500000000000000, 3.7500000000000000, 1.0000000000000000 },
  { 10.312500000000000, 3.7500000000000000, 2.0000000000000000 },
  { -3.3837890625000000, 3.7500000000000000, 5.0000000000000000 },
  { 690.12444019317627, 3.7500000000000000, 10.000000000000000 },
  { 9706310407082.3613, 3.7500000000000000, 20.000000000000000 },
  { 1.1606380822809851e+57, 3.7500000000000000, 50.000000000000000 },
  { 1.2059378923697631e+149, 3.7500000000000000, 100.00000000000000 },
};
const double toler015 = 0.050000000000000003;

// Test data for a=4.0000000000000000.
// max(|f - f_GSL|): 8.8817841970012523e-16
// max(|f - f_GSL| / |f_GSL|): 2.2204460492503131e-16
// mean(f - f_GSL): 1.1102230246251565e-16
// variance(f - f_GSL): 2.0124002684209483e-33
// stddev(f - f_GSL): 4.4859784533822148e-17
const testcase_pochhammer_l<double>
data016[8] =
{
  { 1.0000000000000000, 4.0000000000000000, 0.0000000000000000 },
  { 4.0000000000000000, 4.0000000000000000, 1.0000000000000000 },
  { 12.000000000000000, 4.0000000000000000, 2.0000000000000000 },
  { 0.0000000000000000, 4.0000000000000000, 5.0000000000000000 },
  { 0.0000000000000000, 4.0000000000000000, 10.000000000000000 },
  { 0.0000000000000000, 4.0000000000000000, 20.000000000000000 },
  { 0.0000000000000000, 4.0000000000000000, 50.000000000000000 },
  { 0.0000000000000000, 4.0000000000000000, 100.00000000000000 },
};
const double toler016 = 2.5000000000000020e-13;

// Test data for a=4.2500000000000000.
// max(|f - f_GSL|): 5.2395180899928838e+148
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000306
// mean(f - f_GSL): 6.5493976124911047e+147
// variance(f - f_GSL): 3.4315687269203344e+296
// stddev(f - f_GSL): 1.8524493857917778e+148
const testcase_pochhammer_l<double>
data017[8] =
{
  { 1.0000000000000000, 4.2500000000000000, 0.0000000000000000 },
  { 4.2500000000000000, 4.2500000000000000, 1.0000000000000000 },
  { 13.812500000000000, 4.2500000000000000, 2.0000000000000000 },
  { 9.7119140625000000, 4.2500000000000000, 5.0000000000000000 },
  { -624.39830303192139, 4.2500000000000000, 10.000000000000000 },
  { -5233580841154.7803, 4.2500000000000000, 20.000000000000000 },
  { -3.6528065860832145e+56, 4.2500000000000000, 50.000000000000000 },
  { -2.6197590449964016e+148, 4.2500000000000000, 100.00000000000000 },
};
const double toler017 = 0.050000000000000003;

// Test data for a=4.5000000000000000.
// max(|f - f_GSL|): 3.5269805647183058e+148
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000417
// mean(f - f_GSL): 4.4087257058978823e+147
// variance(f - f_GSL): 1.5549489879875824e+296
// stddev(f - f_GSL): 1.2469759372127364e+148
const testcase_pochhammer_l<double>
data018[8] =
{
  { 1.0000000000000000, 4.5000000000000000, 0.0000000000000000 },
  { 4.5000000000000000, 4.5000000000000000, 1.0000000000000000 },
  { 15.750000000000000, 4.5000000000000000, 2.0000000000000000 },
  { 29.531250000000000, 4.5000000000000000, 5.0000000000000000 },
  { -872.09472656249989, 4.5000000000000000, 10.000000000000000 },
  { -5578820962123.6416, 4.5000000000000000, 20.000000000000000 },
  { -2.9628260151499600e+56, 4.5000000000000000, 50.000000000000000 },
  { -1.7634902823591160e+148, 4.5000000000000000, 100.00000000000000 },
};
const double toler018 = 0.050000000000000003;

// Test data for a=4.7500000000000000.
// max(|f - f_GSL|): 1.2027727010512037e+148
// max(|f - f_GSL| / |f_GSL|): 2.0000000000000004
// mean(f - f_GSL): 1.5034658763140046e+147
// variance(f - f_GSL): 1.8083277129925103e+295
// stddev(f - f_GSL): 4.2524436656968310e+147
const testcase_pochhammer_l<double>
data019[8] =
{
  { 1.0000000000000000, 4.7500000000000000, 0.0000000000000000 },
  { 4.7500000000000000, 4.7500000000000000, 1.0000000000000000 },
  { 17.812500000000000, 4.7500000000000000, 2.0000000000000000 },
  { 64.291992187500000, 4.7500000000000000, 5.0000000000000000 },
  { -624.39830303192139, 4.7500000000000000, 10.000000000000000 },
  { -3023277012042.0469, 4.7500000000000000, 20.000000000000000 },
  { -1.2183493681402606e+56, 4.7500000000000000, 50.000000000000000 },
  { -6.0138635052560362e+147, 4.7500000000000000, 100.00000000000000 },
};
const double toler019 = 0.050000000000000003;

// Test data for a=5.0000000000000000.
// max(|f - f_GSL|): 2.8421709430404007e-14
// max(|f - f_GSL| / |f_GSL|): 3.5527136788005011e-16
// mean(f - f_GSL): -4.2188474935755949e-15
// variance(f - f_GSL): 2.9059059875998496e-30
// stddev(f - f_GSL): 1.7046718122852415e-15
const testcase_pochhammer_l<double>
data020[8] =
{
  { 1.0000000000000000, 5.0000000000000000, 0.0000000000000000 },
  { 5.0000000000000000, 5.0000000000000000, 1.0000000000000000 },
  { 20.000000000000000, 5.0000000000000000, 2.0000000000000000 },
  { 120.00000000000000, 5.0000000000000000, 5.0000000000000000 },
  { 0.0000000000000000, 5.0000000000000000, 10.000000000000000 },
  { 0.0000000000000000, 5.0000000000000000, 20.000000000000000 },
  { 0.0000000000000000, 5.0000000000000000, 50.000000000000000 },
  { 0.0000000000000000, 5.0000000000000000, 100.00000000000000 },
};
const double toler020 = 2.5000000000000020e-13;

template<typename Tp, unsigned int Num>
  void
  test(const testcase_pochhammer_l<Tp> (&data)[Num], Tp toler)
  {
    bool test __attribute__((unused)) = true;
    const Tp eps = std::numeric_limits<Tp>::epsilon();
    Tp max_abs_diff = -Tp(1);
    Tp max_abs_frac = -Tp(1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Tp f = __gnu_cxx::pochhammer_l(data[i].a, data[i].x);
	const Tp f0 = data[i].f0;
	const Tp diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Tp(10) * eps
	 && std::abs(f) > Tp(10) * eps)
	  {
	    const Tp frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  test(data011, toler011);
  test(data012, toler012);
  test(data013, toler013);
  test(data014, toler014);
  test(data015, toler015);
  test(data016, toler016);
  test(data017, toler017);
  test(data018, toler018);
  test(data019, toler019);
  test(data020, toler020);
  return 0;
}
