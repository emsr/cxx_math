// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
// { dg-skip-if "no extensions in strict dialects" { *-*-* } { "-std=c++*" } }

// Copyright (C) 2016-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  ellint_rc
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "ERROR: line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< '\n'; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data for x=0.50000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 1.8038336747503124e-16
// mean(f - f_Boost): -5.5511151231257827e-17
// variance(f - f_Boost): 3.8043060629871323e-34
// stddev(f - f_Boost): 1.9504630380981672e-17
const testcase_ellint_rc<double>
data001[10] =
{
  { 1.4142135623730951, 0.50000000000000000, 0.50000000000000000, 0.0 },
  { 1.1107207345395915, 0.50000000000000000, 1.0000000000000000, 0.0 },
  { 0.95531661812450930, 0.50000000000000000, 1.5000000000000000, 0.0 },
  { 0.85503322010790939, 0.50000000000000000, 2.0000000000000000, 0.0 },
  { 0.78287236613419264, 0.50000000000000000, 2.5000000000000000, 0.0 },
  { 0.72748955981916175, 0.50000000000000000, 3.0000000000000000, 0.0 },
  { 0.68312063073973339, 0.50000000000000000, 3.5000000000000000, 0.0 },
  { 0.64646710153810161, 0.50000000000000000, 4.0000000000000000, 0.0 },
  { 0.61547970867038737, 0.50000000000000000, 4.5000000000000000, 0.0 },
  { 0.58880582378346313, 0.50000000000000000, 5.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for x=1.0000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 2.0055535571358316e-16
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 1.5217224251948529e-33
// stddev(f - f_Boost): 3.9009260761963345e-17
const testcase_ellint_rc<double>
data002[10] =
{
  { 1.2464504802804610, 1.0000000000000000, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.87041975136710314, 1.0000000000000000, 1.5000000000000000, 0.0 },
  { 0.78539816339744828, 1.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.72347894201494256, 1.0000000000000000, 2.5000000000000000, 0.0 },
  { 0.67551085885604001, 1.0000000000000000, 3.0000000000000000, 0.0 },
  { 0.63679018330139714, 1.0000000000000000, 3.5000000000000000, 0.0 },
  { 0.60459978807807258, 1.0000000000000000, 4.0000000000000000, 0.0 },
  { 0.57723812571556010, 1.0000000000000000, 4.5000000000000000, 0.0 },
  { 0.55357435889704520, 1.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for x=1.5000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16 at index 6
// max(|f - f_Boost| / |f_Boost|): 3.6638521716226424e-16
// mean(f - f_Boost): 3.3306690738754695e-17
// variance(f - f_Boost): 1.3695501826753678e-34
// stddev(f - f_Boost): 1.1702778228589003e-17
const testcase_ellint_rc<double>
data003[10] =
{
  { 1.1462158347805889, 1.5000000000000000, 0.50000000000000000, 0.0 },
  { 0.93122985945271219, 1.5000000000000000, 1.0000000000000000, 0.0 },
  { 0.81649658092772603, 1.5000000000000000, 1.5000000000000000, 0.0 },
  { 0.74048048969306102, 1.5000000000000000, 2.0000000000000000, 0.0 },
  { 0.68471920300228295, 1.5000000000000000, 2.5000000000000000, 0.0 },
  { 0.64127491508093204, 1.5000000000000000, 3.0000000000000000, 0.0 },
  { 0.60604138628959059, 1.5000000000000000, 3.5000000000000000, 0.0 },
  { 0.57663392588994922, 1.5000000000000000, 4.0000000000000000, 0.0 },
  { 0.55155230663550836, 1.5000000000000000, 4.5000000000000000, 0.0 },
  { 0.52979548043855929, 1.5000000000000000, 5.0000000000000000, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for x=2.0000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 1
// max(|f - f_Boost| / |f_Boost|): 2.1701978696310789e-16
// mean(f - f_Boost): -3.3306690738754695e-17
// variance(f - f_Boost): 2.5717108985793017e-33
// stddev(f - f_Boost): 5.0712038990552347e-17
const testcase_ellint_rc<double>
data004[10] =
{
  { 1.0752916200648814, 2.0000000000000000, 0.50000000000000000, 0.0 },
  { 0.88137358701954305, 2.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.77683619921209324, 2.0000000000000000, 1.5000000000000000, 0.0 },
  { 0.70710678118654757, 2.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.65569673681079788, 2.0000000000000000, 2.5000000000000000, 0.0 },
  { 0.61547970867038737, 2.0000000000000000, 3.0000000000000000, 0.0 },
  { 0.58275351513316587, 2.0000000000000000, 3.5000000000000000, 0.0 },
  { 0.55536036726979576, 2.0000000000000000, 4.0000000000000000, 0.0 },
  { 0.53193853352089682, 2.0000000000000000, 4.5000000000000000, 0.0 },
  { 0.51157686594443486, 2.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for x=2.5000000000000000.
// max(|f - f_Boost|): 2.2204460492503131e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 2.1751924023470007e-16
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 1.7142211100323317e-261
const testcase_ellint_rc<double>
data005[10] =
{
  { 1.0208044340604006, 2.5000000000000000, 0.50000000000000000, 0.0 },
  { 0.84239465585637696, 2.5000000000000000, 1.0000000000000000, 0.0 },
  { 0.74549815449740420, 2.5000000000000000, 1.5000000000000000, 0.0 },
  { 0.68053628937360044, 2.5000000000000000, 2.0000000000000000, 0.0 },
  { 0.63245553203367588, 2.5000000000000000, 2.5000000000000000, 0.0 },
  { 0.59472536040213786, 2.5000000000000000, 3.0000000000000000, 0.0 },
  { 0.56394264136062888, 2.5000000000000000, 3.5000000000000000, 0.0 },
  { 0.53811863288520567, 2.5000000000000000, 4.0000000000000000, 0.0 },
  { 0.51599537413745367, 2.5000000000000000, 4.5000000000000000, 0.0 },
  { 0.49672941328980508, 2.5000000000000000, 5.0000000000000000, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for x=3.0000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 1
// max(|f - f_Boost| / |f_Boost|): 2.1203697876423442e-16
// mean(f - f_Boost): -2.2204460492503132e-17
// variance(f - f_Boost): 6.0868897007794120e-35
// stddev(f - f_Boost): 7.8018521523926693e-18
const testcase_ellint_rc<double>
data006[10] =
{
  { 0.97681805230225327, 3.0000000000000000, 0.50000000000000000, 0.0 },
  { 0.81049698947675375, 3.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.71963852032146247, 3.0000000000000000, 1.5000000000000000, 0.0 },
  { 0.65847894846240840, 3.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.61307199249007838, 3.0000000000000000, 2.5000000000000000, 0.0 },
  { 0.57735026918962573, 3.0000000000000000, 3.0000000000000000, 0.0 },
  { 0.54814449099863127, 3.0000000000000000, 3.5000000000000000, 0.0 },
  { 0.52359877559829893, 3.0000000000000000, 4.0000000000000000, 0.0 },
  { 0.50253707775976419, 3.0000000000000000, 4.5000000000000000, 0.0 },
  { 0.48416959165156248, 3.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for x=3.5000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 1.9740515966933265e-16
// mean(f - f_Boost): -2.2204460492503132e-17
// variance(f - f_Boost): 1.3695501826753678e-34
// stddev(f - f_Boost): 1.1702778228589003e-17
const testcase_ellint_rc<double>
data007[10] =
{
  { 0.94010347172525099, 3.5000000000000000, 0.50000000000000000, 0.0 },
  { 0.78357721761742349, 3.5000000000000000, 1.0000000000000000, 0.0 },
  { 0.69766475679190154, 3.5000000000000000, 1.5000000000000000, 0.0 },
  { 0.63964310999407181, 3.5000000000000000, 2.0000000000000000, 0.0 },
  { 0.59645536549652445, 3.5000000000000000, 2.5000000000000000, 0.0 },
  { 0.56240831115298973, 3.5000000000000000, 3.0000000000000000, 0.0 },
  { 0.53452248382484879, 3.5000000000000000, 3.5000000000000000, 0.0 },
  { 0.51105028762462490, 3.5000000000000000, 4.0000000000000000, 0.0 },
  { 0.49088267828931137, 3.5000000000000000, 4.5000000000000000, 0.0 },
  { 0.47327386617679940, 3.5000000000000000, 5.0000000000000000, 0.0 },
};
const double toler007 = 2.5000000000000020e-13;

// Test data for x=4.0000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 3
// max(|f - f_Boost| / |f_Boost|): 1.7814153746009191e-16
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 3.8043060629871323e-34
// stddev(f - f_Boost): 1.9504630380981672e-17
const testcase_ellint_rc<double>
data008[10] =
{
  { 0.90871078312300901, 4.0000000000000000, 0.50000000000000000, 0.0 },
  { 0.76034599630094635, 4.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.67859209091559158, 4.0000000000000000, 1.5000000000000000, 0.0 },
  { 0.62322524014023051, 4.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.58192403020680317, 4.0000000000000000, 2.5000000000000000, 0.0 },
  { 0.54930614433405489, 4.0000000000000000, 3.0000000000000000, 0.0 },
  { 0.52255045738047989, 4.0000000000000000, 3.5000000000000000, 0.0 },
  { 0.50000000000000000, 4.0000000000000000, 4.0000000000000000, 0.0 },
  { 0.48060196634497671, 4.0000000000000000, 4.5000000000000000, 0.0 },
  { 0.46364760900080609, 4.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler008 = 2.5000000000000020e-13;

// Test data for x=4.5000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 2.4399219165730219e-16
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 1.5217224251948529e-33
// stddev(f - f_Boost): 3.9009260761963345e-17
const testcase_ellint_rc<double>
data009[10] =
{
  { 0.88137358701954305, 4.5000000000000000, 0.50000000000000000, 0.0 },
  { 0.73995534521687278, 4.5000000000000000, 1.0000000000000000, 0.0 },
  { 0.66176802075998453, 4.5000000000000000, 1.5000000000000000, 0.0 },
  { 0.60869016167793533, 4.5000000000000000, 2.0000000000000000, 0.0 },
  { 0.56902223089043658, 4.5000000000000000, 2.5000000000000000, 0.0 },
  { 0.53764581003244072, 4.5000000000000000, 3.0000000000000000, 0.0 },
  { 0.51187461509367371, 4.5000000000000000, 3.5000000000000000, 0.0 },
  { 0.49012907173427361, 4.5000000000000000, 4.0000000000000000, 0.0 },
  { 0.47140452079103168, 4.5000000000000000, 4.5000000000000000, 0.0 },
  { 0.45502399772879365, 4.5000000000000000, 5.0000000000000000, 0.0 },
};
const double toler009 = 2.5000000000000020e-13;

// Test data for x=5.0000000000000000.
// max(|f - f_Boost|): 1.1102230246251565e-16 at index 0
// max(|f - f_Boost| / |f_Boost|): 1.9916829368854537e-16
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_ellint_rc<double>
data010[10] =
{
  { 0.85722388169844077, 5.0000000000000000, 0.50000000000000000, 0.0 },
  { 0.72181773758940515, 5.0000000000000000, 1.0000000000000000, 0.0 },
  { 0.64673752632340953, 5.0000000000000000, 1.5000000000000000, 0.0 },
  { 0.59566297359135212, 5.0000000000000000, 2.0000000000000000, 0.0 },
  { 0.55742960089887439, 5.0000000000000000, 2.5000000000000000, 0.0 },
  { 0.52714680040717099, 5.0000000000000000, 3.0000000000000000, 0.0 },
  { 0.50224501365509522, 5.0000000000000000, 3.5000000000000000, 0.0 },
  { 0.48121182505960347, 5.0000000000000000, 4.0000000000000000, 0.0 },
  { 0.46308444346663846, 5.0000000000000000, 4.5000000000000000, 0.0 },
  { 0.44721359549995793, 5.0000000000000000, 5.0000000000000000, 0.0 },
};
const double toler010 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_ellint_rc<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    bool failure = false;
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = emsr::ellint_rc(data[i].x, data[i].y);
	const bool failure_f = std::isnan(f);
	if (!failure && failure_f)
	  failure = true;
	if (!failure_f)
	  {
	    const Ret f0 = data[i].f0;
	    const Ret diff = f - f0;
	    if (std::abs(diff) > max_abs_diff)
	      max_abs_diff = std::abs(diff);
	    if (std::abs(f0) > Ret(10) * eps
	     && std::abs(f) > Ret(10) * eps)
	      {
		const Ret frac = diff / f0;
		if (std::abs(frac) > max_abs_frac)
		  max_abs_frac = std::abs(frac);
	      }
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  test(data009, toler009);
  test(data010, toler010);
  return 0;
}
