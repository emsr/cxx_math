// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }
// { dg-skip-if "no extensions in strict dialects" { *-*-* } { "-std=c++*" } }

// Copyright (C) 2016-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  cyl_bessel_k_scaled
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< '\n'; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data for nu=100.00000000000000.
// max(|f - f_GSL|): 6.6613381477509392e-16 at index 4
// max(|f - f_GSL| / |f_GSL|): 5.7960745000079599e-16
// mean(f - f_GSL): 8.0743492700011387e-17
// variance(f - f_GSL): 7.1714627747364710e-34
// stddev(f - f_GSL): 2.6779586954873801e-17
const testcase_cyl_bessel_k_scaled<double>
data001[11] =
{
  { 5.8424465521265159, 100.00000000000000, 1000.0000000000000, 0.0 },
  { 3.5410426710741936, 100.00000000000000, 1100.0000000000000, 0.0 },
  { 2.3237462838842249, 100.00000000000000, 1200.0000000000000, 0.0 },
  { 1.6216147846822155, 100.00000000000000, 1300.0000000000000, 0.0 },
  { 1.1879504112001300, 100.00000000000000, 1400.0000000000000, 0.0 },
  { 0.90491922756991028, 100.00000000000000, 1500.0000000000000, 0.0 },
  { 0.71165910479993821, 100.00000000000000, 1600.0000000000000, 0.0 },
  { 0.57464221239235203, 100.00000000000000, 1700.0000000000000, 0.0 },
  { 0.47437600624377624, 100.00000000000000, 1800.0000000000000, 0.0 },
  { 0.39899827109763819, 100.00000000000000, 1900.0000000000000, 0.0 },
  { 0.34100208493029188, 100.00000000000000, 2000.0000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_cyl_bessel_k_scaled<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = __gnu_cxx::cyl_bessel_k_scaled(data[i].nu, data[i].x);
	const Ret f0 = data[i].f0;
	const Ret diff = f - f0;
	if (std::abs(diff) > max_abs_diff)
	  max_abs_diff = std::abs(diff);
	if (std::abs(f0) > Ret(10) * eps
	 && std::abs(f) > Ret(10) * eps)
	  {
	    const Ret frac = diff / f0;
	    if (std::abs(frac) > max_abs_frac)
	      max_abs_frac = std::abs(frac);
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  return 0;
}
