// { dg-do run { target c++11 } }
// { dg-options "-D__STDCPP_WANT_MATH_SPEC_FUNCS__" }

// Copyright (C) 2016-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

//  legendre
//  Compare against values generated by the GNU Scientific Library.
//  The GSL can be found on the web: http://www.gnu.org/software/gsl/
#include <limits>
#include <cmath>
#if defined(__TEST_DEBUG)
#  include <iostream>
#  define VERIFY(A) \
  if (!(A)) \
    { \
      std::cout << "ERROR: line " << __LINE__ \
	<< "  max_abs_frac = " << max_abs_frac \
	<< '\n'; \
    }
#else
#  include <testsuite_hooks.h>
#endif
#include <specfun_testcase.h>

// Test data for l=0.
// max(|f - f_Boost|): 0.0000000000000000 at index 0
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_legendre<double>
data001[21] =
{
  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },
  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },
  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },
  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },
  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },
  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },
  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },
  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },
  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },
  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },
  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },
  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },
};
const double toler001 = 2.5000000000000020e-13;

// Test data for l=1.
// max(|f - f_Boost|): 0.0000000000000000 at index 0
// max(|f - f_Boost| / |f_Boost|): 0.0000000000000000
// mean(f - f_Boost): 0.0000000000000000
// variance(f - f_Boost): 0.0000000000000000
// stddev(f - f_Boost): 0.0000000000000000
const testcase_legendre<double>
data002[21] =
{
  { -1.0000000000000000, 1, -1.0000000000000000, 0.0 },
  { -0.90000000000000002, 1, -0.90000000000000002, 0.0 },
  { -0.80000000000000004, 1, -0.80000000000000004, 0.0 },
  { -0.69999999999999996, 1, -0.69999999999999996, 0.0 },
  { -0.59999999999999998, 1, -0.59999999999999998, 0.0 },
  { -0.50000000000000000, 1, -0.50000000000000000, 0.0 },
  { -0.39999999999999991, 1, -0.39999999999999991, 0.0 },
  { -0.29999999999999993, 1, -0.29999999999999993, 0.0 },
  { -0.19999999999999996, 1, -0.19999999999999996, 0.0 },
  { -0.099999999999999978, 1, -0.099999999999999978, 0.0 },
  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },
  { 0.10000000000000009, 1, 0.10000000000000009, 0.0 },
  { 0.20000000000000018, 1, 0.20000000000000018, 0.0 },
  { 0.30000000000000004, 1, 0.30000000000000004, 0.0 },
  { 0.40000000000000013, 1, 0.40000000000000013, 0.0 },
  { 0.50000000000000000, 1, 0.50000000000000000, 0.0 },
  { 0.60000000000000009, 1, 0.60000000000000009, 0.0 },
  { 0.70000000000000018, 1, 0.70000000000000018, 0.0 },
  { 0.80000000000000004, 1, 0.80000000000000004, 0.0 },
  { 0.90000000000000013, 1, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 1, 1.0000000000000000, 0.0 },
};
const double toler002 = 2.5000000000000020e-13;

// Test data for l=2.
// max(|f - f_Boost|): 5.5511151231257827e-17 at index 2
// max(|f - f_Boost| / |f_Boost|): 5.2041704279304262e-16
// mean(f - f_Boost): 6.9388939039072284e-18
// variance(f - f_Boost): 2.5277830520082470e-36
// stddev(f - f_Boost): 1.5899003276961254e-18
const testcase_legendre<double>
data003[21] =
{
  { 1.0000000000000000, 2, -1.0000000000000000, 0.0 },
  { 0.71500000000000008, 2, -0.90000000000000002, 0.0 },
  { 0.46000000000000013, 2, -0.80000000000000004, 0.0 },
  { 0.23499999999999990, 2, -0.69999999999999996, 0.0 },
  { 0.039999999999999959, 2, -0.59999999999999998, 0.0 },
  { -0.12500000000000000, 2, -0.50000000000000000, 0.0 },
  { -0.26000000000000012, 2, -0.39999999999999991, 0.0 },
  { -0.36500000000000005, 2, -0.29999999999999993, 0.0 },
  { -0.44000000000000000, 2, -0.19999999999999996, 0.0 },
  { -0.48499999999999999, 2, -0.099999999999999978, 0.0 },
  { -0.50000000000000000, 2, 0.0000000000000000, 0.0 },
  { -0.48499999999999999, 2, 0.10000000000000009, 0.0 },
  { -0.43999999999999989, 2, 0.20000000000000018, 0.0 },
  { -0.36499999999999994, 2, 0.30000000000000004, 0.0 },
  { -0.25999999999999984, 2, 0.40000000000000013, 0.0 },
  { -0.12500000000000000, 2, 0.50000000000000000, 0.0 },
  { 0.040000000000000160, 2, 0.60000000000000009, 0.0 },
  { 0.23500000000000038, 2, 0.70000000000000018, 0.0 },
  { 0.46000000000000013, 2, 0.80000000000000004, 0.0 },
  { 0.71500000000000041, 2, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 2, 1.0000000000000000, 0.0 },
};
const double toler003 = 2.5000000000000020e-13;

// Test data for l=5.
// max(|f - f_Boost|): 1.9428902930940239e-16 at index 19
// max(|f - f_Boost| / |f_Boost|): 4.7224872678736409e-15
// mean(f - f_Boost): 1.6190752442450201e-17
// variance(f - f_Boost): 1.3762374394267123e-35
// stddev(f - f_Boost): 3.7097674312909591e-18
const testcase_legendre<double>
data004[21] =
{
  { -1.0000000000000000, 5, -1.0000000000000000, 0.0 },
  { 0.041141249999999858, 5, -0.90000000000000002, 0.0 },
  { 0.39951999999999993, 5, -0.80000000000000004, 0.0 },
  { 0.36519874999999991, 5, -0.69999999999999996, 0.0 },
  { 0.15263999999999994, 5, -0.59999999999999998, 0.0 },
  { -0.089843750000000000, 5, -0.50000000000000000, 0.0 },
  { -0.27064000000000010, 5, -0.39999999999999991, 0.0 },
  { -0.34538625000000001, 5, -0.29999999999999993, 0.0 },
  { -0.30751999999999996, 5, -0.19999999999999996, 0.0 },
  { -0.17882874999999995, 5, -0.099999999999999978, 0.0 },
  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },
  { 0.17882875000000015, 5, 0.10000000000000009, 0.0 },
  { 0.30752000000000018, 5, 0.20000000000000018, 0.0 },
  { 0.34538625000000001, 5, 0.30000000000000004, 0.0 },
  { 0.27063999999999983, 5, 0.40000000000000013, 0.0 },
  { 0.089843750000000000, 5, 0.50000000000000000, 0.0 },
  { -0.15264000000000022, 5, 0.60000000000000009, 0.0 },
  { -0.36519875000000029, 5, 0.70000000000000018, 0.0 },
  { -0.39951999999999993, 5, 0.80000000000000004, 0.0 },
  { -0.041141249999999144, 5, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 5, 1.0000000000000000, 0.0 },
};
const double toler004 = 2.5000000000000020e-13;

// Test data for l=10.
// max(|f - f_Boost|): 1.6653345369377348e-16 at index 19
// max(|f - f_Boost| / |f_Boost|): 1.4556136854913703e-15
// mean(f - f_Boost): -1.7182023000151233e-17
// variance(f - f_Boost): 1.5499150504830613e-35
// stddev(f - f_Boost): 3.9368960495332633e-18
const testcase_legendre<double>
data005[21] =
{
  { 1.0000000000000000, 10, -1.0000000000000000, 0.0 },
  { -0.26314561785585955, 10, -0.90000000000000002, 0.0 },
  { 0.30052979559999993, 10, -0.80000000000000004, 0.0 },
  { 0.085805795531640444, 10, -0.69999999999999996, 0.0 },
  { -0.24366274560000004, 10, -0.59999999999999998, 0.0 },
  { -0.18822860717773438, 10, -0.50000000000000000, 0.0 },
  { 0.096839064400000244, 10, -0.39999999999999991, 0.0 },
  { 0.25147634951601561, 10, -0.29999999999999993, 0.0 },
  { 0.12907202559999989, 10, -0.19999999999999996, 0.0 },
  { -0.12212499738710943, 10, -0.099999999999999978, 0.0 },
  { -0.24609375000000000, 10, 0.0000000000000000, 0.0 },
  { -0.12212499738710918, 10, 0.10000000000000009, 0.0 },
  { 0.12907202560000042, 10, 0.20000000000000018, 0.0 },
  { 0.25147634951601561, 10, 0.30000000000000004, 0.0 },
  { 0.096839064399999633, 10, 0.40000000000000013, 0.0 },
  { -0.18822860717773438, 10, 0.50000000000000000, 0.0 },
  { -0.24366274559999987, 10, 0.60000000000000009, 0.0 },
  { 0.085805795531641360, 10, 0.70000000000000018, 0.0 },
  { 0.30052979559999993, 10, 0.80000000000000004, 0.0 },
  { -0.26314561785586033, 10, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 10, 1.0000000000000000, 0.0 },
};
const double toler005 = 2.5000000000000020e-13;

// Test data for l=20.
// max(|f - f_Boost|): 1.3877787807814457e-16 at index 1
// max(|f - f_Boost| / |f_Boost|): 9.2947236158909804e-16
// mean(f - f_Boost): 3.3042351923367752e-18
// variance(f - f_Boost): 5.7319343582953445e-37
// stddev(f - f_Boost): 7.5709539414101214e-19
const testcase_legendre<double>
data006[21] =
{
  { 1.0000000000000000, 20, -1.0000000000000000, 0.0 },
  { -0.14930823530984846, 20, -0.90000000000000002, 0.0 },
  { 0.22420460541741333, 20, -0.80000000000000004, 0.0 },
  { -0.20457394463834164, 20, -0.69999999999999996, 0.0 },
  { 0.15916752910098111, 20, -0.59999999999999998, 0.0 },
  { -0.048358381067373557, 20, -0.50000000000000000, 0.0 },
  { -0.10159261558628116, 20, -0.39999999999999991, 0.0 },
  { 0.18028715947998045, 20, -0.29999999999999993, 0.0 },
  { -0.098042194344594769, 20, -0.19999999999999996, 0.0 },
  { -0.082077130944527663, 20, -0.099999999999999978, 0.0 },
  { 0.17619705200195312, 20, 0.0000000000000000, 0.0 },
  { -0.082077130944528010, 20, 0.10000000000000009, 0.0 },
  { -0.098042194344594089, 20, 0.20000000000000018, 0.0 },
  { 0.18028715947998047, 20, 0.30000000000000004, 0.0 },
  { -0.10159261558628194, 20, 0.40000000000000013, 0.0 },
  { -0.048358381067373557, 20, 0.50000000000000000, 0.0 },
  { 0.15916752910098078, 20, 0.60000000000000009, 0.0 },
  { -0.20457394463834142, 20, 0.70000000000000018, 0.0 },
  { 0.22420460541741333, 20, 0.80000000000000004, 0.0 },
  { -0.14930823530984735, 20, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 20, 1.0000000000000000, 0.0 },
};
const double toler006 = 2.5000000000000020e-13;

// Test data for l=50.
// max(|f - f_Boost|): 1.6653345369377348e-16 at index 1
// max(|f - f_Boost| / |f_Boost|): 5.9519502524625358e-15
// mean(f - f_Boost): 3.8824763509957112e-18
// variance(f - f_Boost): 7.9136518734215104e-37
// stddev(f - f_Boost): 8.8958708811568921e-19
const testcase_legendre<double>
data007[21] =
{
  { 1.0000000000000000, 50, -1.0000000000000000, 0.0 },
  { -0.17003765994383679, 50, -0.90000000000000002, 0.0 },
  { 0.13879737345093096, 50, -0.80000000000000004, 0.0 },
  { -0.014572731645892786, 50, -0.69999999999999996, 0.0 },
  { -0.058860798844002152, 50, -0.59999999999999998, 0.0 },
  { -0.031059099239609821, 50, -0.50000000000000000, 0.0 },
  { 0.041569033381824688, 50, -0.39999999999999991, 0.0 },
  { 0.10911051574714785, 50, -0.29999999999999993, 0.0 },
  { 0.083432272204197480, 50, -0.19999999999999996, 0.0 },
  { -0.038205812661313565, 50, -0.099999999999999978, 0.0 },
  { -0.11227517265921705, 50, 0.0000000000000000, 0.0 },
  { -0.038205812661314162, 50, 0.10000000000000009, 0.0 },
  { 0.083432272204196606, 50, 0.20000000000000018, 0.0 },
  { 0.10911051574714806, 50, 0.30000000000000004, 0.0 },
  { 0.041569033381826034, 50, 0.40000000000000013, 0.0 },
  { -0.031059099239609821, 50, 0.50000000000000000, 0.0 },
  { -0.058860798844001375, 50, 0.60000000000000009, 0.0 },
  { -0.014572731645890714, 50, 0.70000000000000018, 0.0 },
  { 0.13879737345093096, 50, 0.80000000000000004, 0.0 },
  { -0.17003765994383682, 50, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 50, 1.0000000000000000, 0.0 },
};
const double toler007 = 5.0000000000000039e-13;

// Test data for l=100.
// max(|f - f_Boost|): 1.5959455978986625e-16 at index 2
// max(|f - f_Boost| / |f_Boost|): 3.1378469338538648e-15
// mean(f - f_Boost): -2.1477528750189041e-17
// variance(f - f_Boost): 2.4217422663797831e-35
// stddev(f - f_Boost): 4.9211200619165787e-18
const testcase_legendre<double>
data008[21] =
{
  { 1.0000000000000000, 100, -1.0000000000000000, 0.0 },
  { 0.10226582055871888, 100, -0.90000000000000002, 0.0 },
  { 0.050861167913584041, 100, -0.80000000000000004, 0.0 },
  { -0.077132507199778780, 100, -0.69999999999999996, 0.0 },
  { -0.023747023905133068, 100, -0.59999999999999998, 0.0 },
  { -0.060518025961861184, 100, -0.50000000000000000, 0.0 },
  { -0.072258202125685025, 100, -0.39999999999999991, 0.0 },
  { 0.057127392202801011, 100, -0.29999999999999993, 0.0 },
  { 0.014681835355659688, 100, -0.19999999999999996, 0.0 },
  { -0.063895098434750275, 100, -0.099999999999999978, 0.0 },
  { 0.079589237387178768, 100, 0.0000000000000000, 0.0 },
  { -0.063895098434749734, 100, 0.10000000000000009, 0.0 },
  { 0.014681835355657888, 100, 0.20000000000000018, 0.0 },
  { 0.057127392202801691, 100, 0.30000000000000004, 0.0 },
  { -0.072258202125684026, 100, 0.40000000000000013, 0.0 },
  { -0.060518025961861184, 100, 0.50000000000000000, 0.0 },
  { -0.023747023905134265, 100, 0.60000000000000009, 0.0 },
  { -0.077132507199780473, 100, 0.70000000000000018, 0.0 },
  { 0.050861167913584041, 100, 0.80000000000000004, 0.0 },
  { 0.10226582055872055, 100, 0.90000000000000013, 0.0 },
  { 1.0000000000000000, 100, 1.0000000000000000, 0.0 },
};
const double toler008 = 2.5000000000000020e-13;

template<typename Ret, unsigned int Num>
  void
  test(const testcase_legendre<Ret> (&data)[Num], Ret toler)
  {
    bool test __attribute__((unused)) = true;
    const Ret eps = std::numeric_limits<Ret>::epsilon();
    Ret max_abs_diff = Ret(-1);
    Ret max_abs_frac = Ret(-1);
    bool failure = false;
    unsigned int num_datum = Num;
    for (unsigned int i = 0; i < num_datum; ++i)
      {
	const Ret f = std::legendre(data[i].l, data[i].x);
	const bool failure_f = std::isnan(f);
	if (!failure && failure_f)
	  failure = true;
	if (!failure_f)
	  {
	    const Ret f0 = data[i].f0;
	    const Ret diff = f - f0;
	    if (std::abs(diff) > max_abs_diff)
	      max_abs_diff = std::abs(diff);
	    if (std::abs(f0) > Ret(10) * eps
	     && std::abs(f) > Ret(10) * eps)
	      {
		const Ret frac = diff / f0;
		if (std::abs(frac) > max_abs_frac)
		  max_abs_frac = std::abs(frac);
	      }
	  }
      }
    VERIFY(max_abs_frac < toler);
  }

int
main()
{
  test(data001, toler001);
  test(data002, toler002);
  test(data003, toler003);
  test(data004, toler004);
  test(data005, toler005);
  test(data006, toler006);
  test(data007, toler007);
  test(data008, toler008);
  return 0;
}
