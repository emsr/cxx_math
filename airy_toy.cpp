// $HOME/bin_specfun/bin/g++ -std=gnu++14 -o airy_toy airy_toy.cpp -L$HOME/bin/lib64 -lquadmath

// LD_LIBRARY_PATH=$HOME/bin_specfun/lib64:$LD_LIBRARY_PATH ./airy_toy > airy_toy.txt

// g++ -std=gnu++14 -DNO_LOGBQ -I. -o airy_toy airy_toy.cpp -lquadmath

// ./airy_toy > airy_toy.txt

#include <limits>
#include <iostream>
#include <iomanip>
#include <vector>
#include <complex>
#include <ext/math_const.h>
#include <bits/float128.h>
#include <bits/numeric_limits.h>
#include <bits/specfun_util.h>
#include <bits/complex_util.h>

template<typename _Tp>
  struct AiryState
  {
    using _Val = std::__detail::__num_traits_t<_Tp>;

    _Tp z;
    _Tp Ai;
    _Tp Bi;
    _Tp Aip;
    _Tp Bip;

    constexpr _Tp
    Wronski() const
    { return Ai * Bip - Bi * Aip; }

    static constexpr _Val
    true_Wronski()
    { return _Val{1} / __gnu_cxx::__math_constants<_Val>::__pi; }
  };

  template<typename _Tp>
    AiryState<std::complex<_Tp>>
    __airy_series(std::complex<_Tp> __t)
    {
    using __cmplx = std::complex<_Tp>;

    constexpr auto _S_eps = __gnu_cxx::__epsilon(_Tp{});
    /*constexpr*/ auto _S_log10min = __gnu_cxx::__log10_min(_Tp{});
    constexpr auto _S_pi = __gnu_cxx::__math_constants<_Tp>::__pi;
    constexpr auto _S_sqrt_pi = __gnu_cxx::__math_constants<_Tp>::__root_pi;
    constexpr auto _S_Ai0 = _Tp{3.550280538878172392600631860041831763980e-1Q};
    constexpr auto _S_Aip0 = _Tp{2.588194037928067984051835601892039634793e-1Q};
    //constexpr auto _S_Bi0 = _Tp{6.149266274460007351509223690936135535960e-1Q};
    //constexpr auto _S_Bip0 = _Tp{8.868776642045783582807775119976424596506e-1Q};
    constexpr auto _S_i = __cmplx(_Tp{0}, _Tp{1});
    constexpr auto _S_big = _Tp{5.0Q}; // was 3.5
    constexpr int _N_FG = 80;
    constexpr _Tp
    _Fai[_N_FG]
    {
      1.666666666666666666666666666666667e-01Q,
      5.555555555555555555555555555555556e-03Q,
      7.716049382716049382716049382716049e-05Q,
      5.845491956603067714178825289936401e-07Q,
      2.783567598382413197228012042826858e-09Q,
      9.096626138504618291594810597473392e-12Q,
      2.165863366310623402760669189874617e-14Q,
      3.923665518678665584711357228033726e-17Q,
      5.589267120624879750301078672412715e-20Q,
      6.424444966235493965863308818865191e-23Q,
      6.083754702874520801006921229985975e-26Q,
      4.828376748313111746830889865068234e-29Q,
      3.258014000211276482342030948089227e-32Q,
      1.891994192921763346307799621422315e-35Q,
      9.555526226877592658120200108193512e-39Q,
      4.235605597020209511578102884837550e-42Q,
      1.661021802753023337873765837191196e-45Q,
      5.803710002631108797602256593959455e-49Q,
      1.818204888042327317544566602117624e-52Q,
      5.136172000119568693628719215021536e-56Q,
      1.314944188458670940509144704306589e-59Q,
      3.065137968435130397457213762952422e-63Q,
      6.532689617295674333881529759063133e-67Q,
      1.277912679439685902558984694652412e-70Q,
      2.302545368359794419025197648022365e-74Q,
      3.833741872060929768606722690679928e-78Q,
      5.916268321081681741677041189320876e-82Q,
      8.485754906887093720133449783879628e-86Q,
      1.134155961893490205845155009874315e-89Q,
      1.415925046059288646498320861266312e-93Q,
      1.654891358180561765425807458235521e-97Q,
      1.814573857654124742791455546310878e-101Q,
      1.870309067876855022460786998877425e-105Q,
      1.815481525797762592177040379418972e-109Q,
      1.662528869778170871956996684449608e-113Q,
      1.438671573016762609862406268994123e-117Q,
      1.178273196573925151402462136768323e-121Q,
      9.146663534962933949716364980347178e-126Q,
      6.739363052581000552399325803379883e-130Q,
      4.719441913572129238374878013571347e-134Q,
3.145036594410322030e-138L,
1.996848631371633035e-142L,
1.209331777720223495e-146L,
6.993591127227755581e-151L,
3.865998411955641559e-155L,
2.044852645697472527e-159L,
1.035892930951100571e-163L,
5.030560076491358639e-168L,
2.343938158834851663e-172L,
1.048741905518949290e-176L,
4.509554117298543558e-181L,
1.864993431471688816e-185L,
7.423745846157506633e-190L,
2.846310039934631789e-194L,
1.051851455999494379e-198L,
3.749114114626084898e-203L,
1.289684937951869590e-207L,
4.284382891342334695e-212L,
1.375315514683594856e-216L,
4.268514943152063489e-221L,
1.281605399373104993e-225L,
3.724514383531255428e-230L,
1.048214112217509689e-234L,
2.858350000593121971e-239L,
7.555775840848855330e-244L,
1.937080408359958809e-248L,
4.818607980994922410e-253L,
1.163577702355578675e-257L,
2.728712776970073344e-262L,
6.217162854796248220e-267L,
1.376818773761238422e-271L,
2.964726041690866543e-276L,
6.209890749635261494e-281L,
1.265723115575243874e-285L,
2.511355388046118798e-290L,
4.852298067945974955e-295L,
9.132877974677159712e-300L,
1.675081246960338893e-304L,
2.994853119788920283e-309L,
5.221152579827266882e-314L,
    };
    constexpr _Tp _S_slope_F{-2.660Q}, _S_intercept_F{-0.778Q};
    constexpr _Tp
    _Faip[_N_FG]
    {
      5.000000000000000000000000000000000e-01Q,
      3.333333333333333333333333333333333e-02Q,
      6.944444444444444444444444444444444e-04Q,
      7.014590347923681257014590347923681e-06Q,
      4.175351397573619795842018064240287e-08Q,
      1.637392704930831292487065907545211e-10Q,
      4.548313069252309145797405298736695e-13Q,
      9.416797244828797403307257347280942e-16Q,
      1.509102122568717532581291241551433e-18Q,
      1.927333489870648189758992645659557e-21Q,
      2.007639051948591864332284005895372e-24Q,
      1.738215629392720228859120351424564e-27Q,
      1.270625460082397828113392069754799e-30Q,
      7.946375610271406054492758409973724e-34Q,
      4.299986802094916696154090048687080e-37Q,
      2.033090686569700565557489384722024e-40Q,
      8.471211194040419023156205769675100e-44Q,
      3.134003401420798750705218560738106e-47Q,
      1.036376786184126571000402963207046e-50Q,
      3.081703200071741216177231529012922e-54Q,
      8.284148387289626925207611637131511e-58Q,
      2.022991059167186062321761083548598e-61Q,
      4.507555835934015290378255533753561e-65Q,
      9.200971291965738498424689801497370e-69Q,
      1.726909026269845814268898236016774e-72Q,
      2.990318660207525219513243698730344e-76Q,
      4.792177340076162210758403363349910e-80Q,
      7.128034121785158724912097818458887e-84Q,
      9.867156868473364790852848585906545e-88Q,
      1.274332541453359781848488775139680e-91Q,
      1.539048963107922441846000936159035e-95Q,
      1.741990903347959753079797324458443e-99Q,
      1.851605977198086472236179128888651e-103Q,
      1.851791156313717844020581187007352e-107Q,
      1.745655313267079415554846518672089e-111Q,
      1.553765298858103618651398770513653e-115Q,
      1.307883248197056918056732971812839e-119Q,
      1.042719642985774470267665607759578e-123Q,
      7.885054771519770646307211189954463e-128Q,
      5.663330296286555086049853616285617e-132Q,
3.868395011124696097e-136L,
2.516029275528257624e-140L,
1.560037993259088308e-144L,
9.231540287940637367e-149L,
5.219097856140116105e-153L,
2.821896651062512087e-157L,
1.460609032641051805e-161L,
7.244006510147556440e-166L,
3.445589093487231944e-170L,
1.573112858278423935e-174L,
6.899617799466771643e-179L,
2.909389753095834554e-183L,
1.180375589539043555e-187L,
4.611022264694103499e-192L,
1.735554902399165725e-196L,
6.298511712571822629e-201L,
2.205361243897696999e-205L,
7.454826230935662369e-210L,
2.434308460989962895e-214L,
7.683326897673714280e-219L,
2.345337880852782137e-223L,
6.927596753368135096e-228L,
1.981124672091093313e-232L,
5.488032001138794185e-237L,
1.473376288965526789e-241L,
3.835419208552718441e-246L,
9.685402041799794045e-251L,
2.373698512805380498e-255L,
5.648435448328051822e-260L,
1.305604199507212126e-264L,
2.932623988111437840e-269L,
6.403808250052271732e-274L,
1.359966074170122267e-278L,
2.809905316577041400e-283L,
5.650549623103767295e-288L,
1.106323959491682290e-292L,
2.109694812150423894e-297L,
3.919690117887193009e-302L,
7.097801893899741072e-307L,
1.253076619158544052e-311L,
    };
    constexpr _Tp _S_slope_Fp{-2.576Q}, _S_intercept_Fp{-0.301Q};
    constexpr _Tp
    _Gai[_N_FG]
    {
      8.333333333333333333333333333333333e-02Q,
      1.984126984126984126984126984126984e-03Q,
      2.204585537918871252204585537918871e-05Q,
      1.413195857640302084746529190973636e-07Q,
      5.888316073501258686443871629056814e-10Q,
      1.721729846052999615919260710250531e-12Q,
      3.726687978469696138353378160715434e-15Q,
      6.211146630782826897255630267859057e-18Q,
      8.215802421670405948750833687644255e-21Q,
      8.834196152333769837366487836176617e-24Q,
      7.873615109031880425460327839729605e-27Q,
      5.911122454228138457552798678475680e-30Q,
      3.789181060402652857405640178510051e-33Q,
      2.098106899447759057256722136495045e-36Q,
      1.013578212293603409302764317147365e-39Q,
      4.309431174717701570164814273585735e-43Q,
      1.624974047781938751947516694413927e-46Q,
      5.471293090174877952685241395333088e-50Q,
      1.654958587469715049209086931437716e-53Q,
      4.521744774507418167237942435622174e-57Q,
      1.121464477804419188303061119945976e-60Q,
      2.536102392140251443471418181696010e-64Q,
      5.250729590352487460603350272662546e-68Q,
      9.989972584384489080295567489845026e-72Q,
      1.752626769190261242157117103481584e-75Q,
      2.844249868857937750985259823890918e-79Q,
      4.282219013637364876521017500588554e-83Q,
      5.997505621340847165995822829955959e-87Q,
      7.833732525262339558510740373505694e-91Q,
      9.564996978342294943236557232607686e-95Q,
      1.094142871006897156627380145573974e-98Q,
      1.174981605462733200845554280040780e-102Q,
      1.186850106528013334187428565697758e-106Q,
      1.129687898846386192830219460972547e-110Q,
      1.014993619808073848005588015249368e-114Q,
      8.622100066327504655161298124782266e-119Q,
      6.935408676260862817858187037308772e-123Q,
      5.290166801114311836657656016253831e-127Q,
      3.831788208832617584135633794186463e-131Q,
      2.638972595614750402297268453296462e-135Q,
1.730246915561729873e-139L,
1.081269163580633591e-143L,
6.447639615865435846e-148L,
3.672613132755431673e-152L,
2.000333950302522698e-156L,
1.042818241217038212e-160L,
5.208362007876526879e-165L,
2.494426248983010957e-169L,
1.146546354561045669e-173L,
5.062014810424042688e-178L,
2.148380787040167511e-182L,
8.771765421526079988e-187L,
3.448020999027547165e-191L,
1.305771793920907053e-195L,
4.767330390364757406e-200L,
1.679110450255268176e-204L,
5.708929859429036366e-209L,
1.874853812620373191e-213L,
5.950783382912376026e-218L,
1.826514236621355441e-222L,
5.424430496024457831e-227L,
1.559551059750577262e-231L,
4.342943636175375276e-236L,
1.171994720470470444e-240L,
3.066443538645919528e-245L,
7.782456572371756581e-250L,
1.916766802712121713e-254L,
4.583373511984987359e-259L,
1.064514472311637718e-263L,
2.402424898017688373e-268L,
5.270556136232917320e-273L,
1.124457274328579391e-277L,
2.333867319071356145e-282L,
4.714312041108867905e-287L,
9.271016796674273167e-292L,
1.775648662505606597e-296L,
3.313271873610999025e-301L,
6.025226174960900209e-306L,
1.068188876176452897e-310L,
1.846799578451682048e-315L,
    };
    constexpr _Tp _S_slope_G{-2.708Q}, _S_intercept_G{-1.079Q};
    constexpr _Tp
    _Gaip[_N_FG]
    {
      3.333333333333333333333333333333333e-01Q,
      1.388888888888888888888888888888889e-02Q,
      2.204585537918871252204585537918871e-04Q,
      1.837154614932392710170487948265726e-06Q,
      9.421305717602013898310194606490902e-09Q,
      3.271286707500699270246595349476008e-11Q,
      8.198713552633331504377431953573955e-14Q,
      1.552786657695706724313907566964764e-16Q,
      2.300424678067713665650233432540391e-19Q,
      2.738600807223468649583611229214751e-22Q,
      2.677029137070839344656511465508066e-25Q,
      2.187115308064411229294535511036002e-28Q,
      1.515672424161061142962256071404021e-31Q,
      9.021859667625363946203905186928694e-35Q,
      4.662459776550575682792715858877878e-38Q,
      2.111621275611673769380758994057010e-41Q,
      8.449865048466081510127086810952421e-45Q,
      3.009211199596182873976882767433198e-48Q,
      9.598759807324347285412704202338750e-52Q,
      2.758264312449525082015144885729526e-55Q,
      7.177372657948282805139591167654244e-59Q,
      1.699188602733968467125850181736327e-62Q,
      3.675510713246741222422345190863782e-66Q,
      7.292679986600677028615764267586869e-70Q,
      1.331996344584598544039408998646004e-73Q,
      2.246957396397770823278355260873826e-77Q,
      3.511419591182639198747234350482615e-81Q,
      5.097879778139720091096449405462565e-85Q,
      6.893684622230858811489451528685011e-89Q,
      8.704147250291488398345267081672995e-93Q,
      1.028494298746483327229737336839536e-96Q,
      1.139732157298851204820187651639557e-100Q,
      1.186850106528013334187428565697758e-104Q,
      1.163578535811777778615126044801723e-108Q,
      1.075893236996558278885923296164330e-112Q,
      9.398089072296980074125814956012670e-117Q,
      7.767657717412166356001169481785824e-121Q,
      6.083691821281458612156304418691905e-125Q,
      4.521510086422488749280047877140026e-129Q,
      3.193156840693847986779694828488720e-133Q,
2.145506175296545042e-137L,
1.373211837747404661e-141L,
8.381931500625066599e-146L,
4.884575466564724125e-150L,
2.720454172411430869e-154L,
1.449517355291683114e-158L,
7.395874051184668169e-163L,
3.616918061025365888e-167L,
1.696888604750347590e-171L,
7.643642363740304459e-176L,
3.308506412041857966e-180L,
1.377167171179594558e-184L,
5.516833598444075464e-189L,
2.128408024091078497e-193L,
7.913768448005497293e-198L,
2.837696660931403217e-202L,
9.819359358217942549e-207L,
3.280994172085653084e-211L,
1.059239442158402933e-215L,
3.305990768284653348e-220L,
9.980952112685002410e-225L,
2.916360481733579479e-229L,
8.251592908733213024e-234L,
2.261949810508007956e-238L,
6.010229335746002275e-243L,
1.548708857901979560e-247L,
3.871868941478485861e-252L,
9.395915699569224086e-257L,
2.214190102408206453e-261L,
5.069116534817322467e-266L,
1.127899013153844307e-270L,
2.440072285293017278e-275L,
5.134508101956983519e-280L,
1.051291585167277543e-284L,
2.095249796048385736e-289L,
4.066235437137839108e-294L,
7.686790746777517738e-299L,
1.415928151115811549e-303L,
2.542289525299957894e-308L,
4.450786984068553736e-313L,
    };
    constexpr _Tp _S_slope_Gp{-2.632Q}, _S_intercept_Gp{-0.477Q};

	const auto __log10t = std::log10(std::abs(__t));
	const auto __ttt = __t * __t * __t;

	auto __term = __cmplx{1};
	auto _F = __cmplx{1};
	auto _G = __t;
	for (int __n = 0; __n < _N_FG; ++__n)
	  {
	    if (std::abs(__t) < _S_eps)
	      break;
	    auto __xx = __log10t * (3 * (__n + 1) + 1)
		      + _S_slope_G * __n + _S_intercept_G;
	    if (__xx < _S_log10min)
	      break;
	    __term *= __ttt;
	    _F += _Fai[__n] * __term;
	    _G += _Gai[__n] * __term * __t;
	  }
	auto _UU = std::sqrt(_Tp{3} * _S_pi)
		* (_S_Ai0 * _F + _S_Aip0 * _G);
	auto _VV = _S_sqrt_pi * (_S_Ai0 * _F - _S_Aip0 * _G);
	auto _Bi = _UU / _S_sqrt_pi;
	auto _Ai = _VV / _S_sqrt_pi;
	auto __w1 = _UU - _S_i * _VV;
	auto __w2 = _UU + _S_i * _VV;

	__term = __cmplx{1};
	auto _Fp = __cmplx{0};
	auto _Gp = __cmplx{1};
	for (int __n = 0; __n < _N_FG; ++__n)
	  {
	    if (std::abs(__t) < _S_eps)
	      break;
	    auto __xx = __log10t * 3 * (__n + 1)
		      + _S_slope_Gp * __n + _S_intercept_Gp;
	    if (__xx < _S_log10min)
	      break;
	    __term *= __ttt;
	    _Fp += _Faip[__n] * __term / __t;
	    _Gp += _Gaip[__n] * __term;
	  }
	auto _UUp = std::sqrt(_Tp{3} * _S_pi)
		  * (_S_Ai0 * _Fp + _S_Aip0 * _Gp);
	auto _VVp = _S_sqrt_pi * (_S_Ai0 * _Fp - _S_Aip0 * _Gp);
	auto _Bip = _UUp / _S_sqrt_pi;
	auto _Aip = _VVp / _S_sqrt_pi;
	auto __w1p = _UUp - _S_i * _VVp;
	auto __w2p = _UUp + _S_i * _VVp;

	return AiryState<std::complex<_Tp>>{__t, _Ai, _Bi, _Aip, _Bip};
    }

template<typename _Tp>
  void
  run_toy()
  {
    using __cmplx = std::complex<_Tp>;

    constexpr auto _S_eps = __gnu_cxx::__epsilon(_Tp{});
    /*constexpr*/ auto _S_log10min = __gnu_cxx::__log10_min(_Tp{});
    constexpr auto _S_pi = __gnu_cxx::__math_constants<_Tp>::__pi;
    constexpr auto _S_sqrt_pi = __gnu_cxx::__math_constants<_Tp>::__root_pi;
    constexpr auto _S_Ai0{3.550280538878172392600631860041831763980e-1};
    constexpr auto _S_Aip0{2.588194037928067984051835601892039634793e-1};
    //constexpr auto _S_Bi0{6.149266274460007351509223690936135535960e-1};
    //constexpr auto _S_Bip0{8.868776642045783582807775119976424596506e-1};
    constexpr auto _S_1d6 = _Tp{1} / _Tp{6};
    constexpr auto _S_i = __cmplx{_Tp{0}, _Tp{1}};
    constexpr auto _S_big = _Tp{5.0Q}; // was 3.5
    constexpr int _N_FG = 40;

    std::vector<_Tp> _S_cn, _S_dn;
    _S_cn.push_back(_Tp{1});
    _S_dn.push_back(-_Tp{1});
    for (int __s = 1; __s <= 200; ++__s)
      {
        // Turn this into a recursion:
	// for (int r = 0; r < 2 * s; ++r)
	//   numer *= (2 * s + 2 * r + 1);
	//auto __a = _S_cn.back()
	//	 * (6 * __s - 5) * (6 * __s - 3) * (6 * __s - 1)
	//	      / (216 * __s * (2 * __s - 1));
	auto __a = _S_cn.back()
		 * (_Tp(__s - 1) / _Tp{2} + _Tp{5} / _Tp(72 * __s));
	auto __b = -__a * _Tp(__s + _S_1d6) / _Tp(__s - _S_1d6);
	if (std::isnan(__a) || std::isinf(__a)
	 || std::isnan(__b) || std::isinf(__b))
	  break;
	_S_cn.push_back(__a);
	_S_dn.push_back(__b);
      }

    std::cout.precision(std::numeric_limits<_Tp>::digits10);
    std::cout << std::showpoint << std::scientific;
    auto width = 8 + std::cout.precision();

    std::cout << "\nc[" << _S_cn.size() << "]\n";
    for (const auto& c : _S_cn)
      std::cout << c << '\n';
    std::cout << "\nd[" << _S_dn.size() << "]\n";
    for (const auto& d : _S_dn)
      std::cout << d << '\n';

    std::cout << "\nc_even\n";
    for (int __s = _S_cn.size() - 1; __s >= 0; --__s)
      if (__s % 2 == 0)
	std::cout << _S_cn[__s] << '\n';
    std::cout << "\nc_odd\n";
    for (int __s = _S_cn.size() - 1; __s >= 0; --__s)
      if (__s % 2 == 1)
	std::cout << _S_cn[__s] << '\n';
    std::cout << "\nd_even\n";
    for (int __s = _S_dn.size() - 1; __s >= 0; --__s)
      if (__s % 2 == 0)
	std::cout << _S_dn[__s] << '\n';
    std::cout << "\nd_odd\n";
    for (int __s = _S_dn.size() - 1; __s >= 0; --__s)
      if (__s % 2 == 1)
	std::cout << _S_dn[__s] << '\n';

    std::cout << '\n';
    std::cout << '\n';
    std::vector<_Tp> _Fai, _Faip, _Gai, _Gaip, _Hai, _Haip;
    _Fai.push_back(_Tp{1});
    _Faip.push_back(_Tp{1});
    _Gai.push_back(_Tp{1});
    _Gaip.push_back(_Tp{1});
    _Hai.push_back(_Tp{1});
    _Haip.push_back(_Tp{1});
    auto __Fai_numer = _Tp{1};
    auto __Fai_denom = _Tp{1};
    auto __Gai_numer = _Tp{1};
    auto __Gai_denom = _Tp{1};
    auto __Hai_numer = _Tp{1};
    auto __Hai_denom = _Tp{1};
    const auto _S_min = std::numeric_limits<_Tp>::min();
    const auto __k_max = 200ULL;
    for (unsigned long long __k = 1ULL; __k <= __k_max; ++__k)
      {
	std::cout << '\n' << ' ' << std::setw(width) << __Fai_numer << '/' << std::setw(width) << __Fai_denom;
	//__Fai_denom *= (3ULL * __k - 2ULL) * (3ULL * __k - 1ULL) * (3ULL * __k);
	//__Fai_numer *= 1ULL + 3ULL * (__k - 1ULL);
	__Fai_denom *= (3ULL * __k - 1ULL) * (3ULL * __k);
	__Fai_numer *= 1ULL;
	if (__Fai_numer / __Fai_denom < _Tp{10} * _S_min)
	  break;
	_Fai.push_back(__Fai_numer / __Fai_denom);
	_Faip.push_back(3ULL * __k * _Fai.back());

	std::cout << '\t' << ' ' << std::setw(width) << __Gai_numer << '/' << std::setw(width) << __Gai_denom;
	//__Gai_denom *= (3ULL * __k - 1ULL) * (3ULL * __k) * (3ULL * __k + 1ULL);
	//__Gai_numer *= 2ULL + 3ULL * (__k - 1ULL);
	__Gai_denom *= (3ULL * __k) * (3ULL * __k + 1ULL);
	__Gai_numer *= 1ULL;
	_Gai.push_back(__Gai_numer / __Gai_denom);
	_Gaip.push_back((3ULL * __k + 1ULL) * _Gai.back());

	std::cout << '\t' << ' ' << std::setw(width) << __Hai_numer << '/' << std::setw(width) << __Hai_denom;
	//__Hai_denom *= (3ULL * __k) * (3ULL * __k + 1ULL) * (3ULL * __k + 2ULL);
	//__Hai_numer *= 3ULL + 3ULL * (__k - 1ULL);
	__Hai_denom *= (3ULL * __k + 1ULL) * (3ULL * __k + 2ULL);
	__Hai_numer *= 1;
	_Hai.push_back(__Hai_numer / __Hai_denom);
	_Haip.push_back((3ULL * __k + 2ULL) * _Hai.back());
      }
    std::cout << '\n';

    std::cout << "\nF[" << _Fai.size() << "]\n";
    for (const auto& c : _Fai)
      std::cout << c << '\n';
    std::cout << "\nFp[" << _Faip.size() << "]\n";
    for (const auto& c : _Faip)
      std::cout << c << '\n';
    std::cout << "\nG[" << _Gai.size() << "]\n";
    for (const auto& c : _Gai)
      std::cout << c << '\n';
    std::cout << "\nGp[" << _Gaip.size() << "]\n";
    for (const auto& c : _Gaip)
      std::cout << c << '\n';
    std::cout << "\nH[" << _Hai.size() << "]\n";
    for (const auto& c : _Hai)
      std::cout << c << '\n';
    std::cout << "\nHp[" << _Haip.size() << "]\n";
    for (const auto& c : _Haip)
      std::cout << c << '\n';

    std::cout << "\n\n";
    std::cout << std::setw(width) << "t"
	      << std::setw(width) << "Ai"
	      << std::setw(width) << "Bi"
	      << std::setw(width) << "Aip"
	      << std::setw(width) << "Bip"
	      << std::setw(width) << "Wronski"
	      << '\n';
    for (int i = -500; i <= 500; ++i)
      {
	auto t = __cmplx{0.01Q * i};
	auto airy = __airy_series(t);
	std::cout << std::setw(width) << std::real(airy.z)
		  << std::setw(width) << std::real(airy.Ai)
		  << std::setw(width) << std::real(airy.Bi)
		  << std::setw(width) << std::real(airy.Aip)
		  << std::setw(width) << std::real(airy.Bip)
		  << std::setw(width) << std::real(airy.Wronski())
		  << std::setw(width) << std::real(airy.true_Wronski())
		  << '\n';
      }
  }

int
main()
{
  std::cout << "\nfloat\n=====\n";
  run_toy<float>();

  std::cout << "\ndouble\n======\n";
  run_toy<double>();

  std::cout << "\nlong double\n===========\n";
  run_toy<long double>();

  //std::cout << "\n__float128\n==========\n";
  //run_toy<__float128>();
}
