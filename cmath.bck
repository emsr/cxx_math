// TR1 cmath -*- C++ -*-

// Copyright (C) 2006, 2007 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

/** @file tr1/cmath
 *  This is a TR1 C++ Library header. 
 */

#ifndef _GLIBCXX_TR1_CMATH
#define _GLIBCXX_TR1_CMATH 1

#pragma GCC system_header

#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)
#  error TR1 header cannot be included from C++0x header
#endif

#include <cmath>

#if defined(_GLIBCXX_INCLUDE_AS_TR1)
#  include <tr1_impl/cmath>
#else
#  define _GLIBCXX_INCLUDE_AS_TR1
#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {
#  define _GLIBCXX_END_NAMESPACE_TR1 }
#  define _GLIBCXX_TR1 tr1::
#  include <tr1_impl/cmath>
#  undef _GLIBCXX_TR1
#  undef _GLIBCXX_END_NAMESPACE_TR1
#  undef _GLIBCXX_BEGIN_NAMESPACE_TR1
#  undef _GLIBCXX_INCLUDE_AS_TR1
#endif

/**
 * @defgroup tr1_math_spec_func Mathematical Special Functions
 * A collection of advanced mathematical special functions.
 * @{
 */
#include <bits/stl_algobase.h>
#include <limits>

#include <tr1/type_traits>
#include <tr1/gamma.tcc>
#include <tr1/bessel_function.tcc>
#include <tr1/beta_function.tcc>
#include <tr1/ell_integral.tcc>
#include <tr1/exp_integral.tcc>
#include <tr1/hypergeometric.tcc>
#include <tr1/legendre_function.tcc>
#include <tr1/modified_bessel_func.tcc>
#include <tr1/poly_hermite.tcc>
#include <tr1/poly_laguerre.tcc>
#include <tr1/riemann_zeta.tcc>

// namespace std::tr1
namespace std
{
namespace tr1
{
  //  5.2.1.1  Associated Laguerre polynomials.

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n, degree m: @f$ L_n^m(x) @f$ for float argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_laguerre(const unsigned int, const unsigned int,
   *                            const _Tp)
   */
  inline float
  assoc_laguerref(unsigned int __n, unsigned int __m, float __x)
  { return __detail::__assoc_laguerre<float>(__n, __m, __x); }

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n, degree m: @f$ L_n^m(x) @f$ for long double argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_laguerre(const unsigned int, const unsigned int,
   *                            const _Tp)
   */
  inline long double
  assoc_laguerrel(unsigned int __n, unsigned int __m, long double __x)
  {
    return __detail::__assoc_laguerre<long double>(__n, __m, __x);
  }

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n, degree m: @f$ L_n^m(x) @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_laguerre(const unsigned int, const unsigned int,
   *                            const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    assoc_laguerre(unsigned int __n, unsigned int __m, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__assoc_laguerre<__type>(__n, __m, __x);
    }

  //  5.2.1.2  Associated Legendre functions.

  /**
   *   @brief  Return the associated Legendre function of order @f$ l @f$
   *           for float argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_legendre_p(const unsigned int, const unsigned int,
   *                              const _Tp)
   */
  inline float
  assoc_legendref(unsigned int __l, unsigned int __m, float __x)
  { return __detail::__assoc_legendre_p<float>(__l, __m, __x); }

  /**
   *   @brief  Return the associated Legendre function of order @f$ l @f$
   *           for long double argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_legendre_p(const unsigned int, const unsigned int,
   *                              const _Tp)
   */
  inline long double
  assoc_legendrel(unsigned int __l, unsigned int __m, long double __x)
  { return __detail::__assoc_legendre_p<long double>(__l, __m, __x); }

  /**
   *   @brief  Return the associated Legendre function of order @f$ l @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __assoc_legendre_p(const unsigned int, const unsigned int,
   *                              const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    assoc_legendre(unsigned int __l, unsigned int __m, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__assoc_legendre_p<__type>(__l, __m, __x);
    }

  //  5.2.1.3  Beta functions.

  /**
   *   @brief  Return the beta function: \f$B(x,y)\f$
   *           for float arguments.
   *
   *   @see  template<typename _Tp> _Tp __beta(const _Tp, const _Tp)
   */
  inline float
  betaf(float __x, float __y)
  { return __detail::__beta<float>(__x, __y); }

  /**
   *   @brief  Return the beta function: \f$B(x,y)\f$
   *           for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp __beta(const _Tp, const _Tp)
   */
  inline long double
  betal(long double __x, long double __y)
  { return __detail::__beta<long double>(__x, __y); }

  /**
   *   @brief  Return the beta function: \f$B(x,y)\f$.
   *
   *   @see  template<typename _Tp> _Tp __beta(const _Tp, const _Tp)
   */
  template<typename _Tpx, typename _Tpy>
    inline typename __gnu_cxx::__promote_2<_Tpx, _Tpy>::__type
    beta(_Tpx __x, _Tpy __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpx, _Tpy>::__type __type;
      return __detail::__beta<__type>(__x, __y);
    }

  //  5.2.1.4  Complete elliptic interals of the first kind.

  /**
   *   @brief  Return the complete elliptic integral of the first kind
   *           @f$ K(k) @f$ for float argument.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_1(const _Tp)
   */
  inline float
  comp_ellint_1f(float __k)
  { return __detail::__comp_ellint_1<float>(__k); }

  /**
   *   @brief  Return the complete elliptic integral of the first kind
   *           @f$ K(k) @f$ for long double argument.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_1(const _Tp)
   */
  inline long double
  comp_ellint_1l(long double __k)
  { return __detail::__comp_ellint_1<long double>(__k); }

  /**
   *   @brief  Return the complete elliptic integral of the first kind
   *           @f$ K(k) @f$.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_1(const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    comp_ellint_1(_Tp __k)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__comp_ellint_1<__type>(__k);
    }

  //  5.2.1.5  Complete elliptic interals of the second kind.

  /**
   *   @brief  Return the complete elliptic integral of the second kind
   *           @f$ E(k) @f$ for float argument.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_2(const _Tp)
   */
  inline float
  comp_ellint_2f(float __k)
  { return __detail::__comp_ellint_2<float>(__k); }

  /**
   *   @brief  Return the complete elliptic integral of the second kind
   *           @f$ E(k) @f$ for long double argument.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_2(const _Tp)
   */
  inline long double
  comp_ellint_2l(long double __k)
  { return __detail::__comp_ellint_2<long double>(__k); }

  /**
   *   @brief  Return the complete elliptic integral of the second kind
   *           @f$ E(k) @f$.
   *
   *   @see  template<typename _Tp> _Tp __comp_ellint_2(const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    comp_ellint_2(_Tp __k)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__comp_ellint_2<__type>(__k);
    }

  //  5.2.1.6  Complete elliptic interals of the third kind.

  /**
   *   @brief Return the complete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu) = \Pi(k,\nu,\pi/2) @f$ for float arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __comp_ellint_3(const _Tp, const _Tp)
   */
  inline float
  comp_ellint_3f(float __k, float __nu)
  { return __detail::__comp_ellint_3<float>(__k, __nu); }

  /**
   *   @brief Return the complete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu) = \Pi(k,\nu,\pi/2) @f$ for long double arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __comp_ellint_3(const _Tp, const _Tp)
   */
  inline long double
  comp_ellint_3l(long double __k, long double __nu)
  { return __detail::__comp_ellint_3<long double>(__k, __nu); }

  /**
   *   @brief Return the complete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu) = \Pi(k,\nu,\pi/2) @f$.
   *
   *   @see template<typename _Tp> _Tp
   *          __comp_ellint_3(const _Tp, const _Tp)
   */
  template<typename _Tp, typename _Tpn>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type
    comp_ellint_3(_Tp __k, _Tpn __nu)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type __type;
      return __detail::__comp_ellint_3<__type>(__k, __nu);
    }

  //  5.2.1.7  Confluent hypergeometric functions.

  /**
   *   @brief  Return the confluent hypogeometric function
   *           @f$ _1F_1(a;c;x) @f$ for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __conf_hyperg(const _Tp, const _Tp, const _Tp)
   */
  inline float
  conf_hypergf(float __a, float __c, float __x)
  { return __detail::__conf_hyperg<float>(__a, __c, __x); }

  /**
   *   @brief  Return the confluent hypogeometric function
   *           @f$ _1F_1(a;c;x) @f$ for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __conf_hyperg(const _Tp, const _Tp, const _Tp)
   */
  inline long double
  conf_hypergl(long double __a, long double __c, long double __x)
  { return __detail::__conf_hyperg<long double>(__a, __c, __x); }

  /**
   *   @brief  Return the confluent hypogeometric function
   *           @f$ _1F_1(a;c;x) @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __conf_hyperg(const _Tp, const _Tp, const _Tp)
   */
  template<typename _Tpa, typename _Tpc, typename _Tp>
    inline typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type
    conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type __type;
      return __detail::__conf_hyperg<__type>(__a, __c, __x);
    }

  //  5.2.1.8  Regular modified cylindrical Bessel functions.

  /**
   *   @brief  Return the regular modified Bessel function of order
   *           \f$ \nu \f$: \f$ I_{\nu}(x) \f$ for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_i(const _Tp, const _Tp)
   */
  inline float
  cyl_bessel_if(float __nu, float __x)
  { return __detail::__cyl_bessel_i<float>(__nu, __x); }

  /**
   *   @brief  Return the regular modified Bessel function of order
   *           \f$ \nu \f$: \f$ I_{\nu}(x) \f$ for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_i(const _Tp, const _Tp)
   */
  inline long double
  cyl_bessel_il(long double __nu, long double __x)
  { return __detail::__cyl_bessel_i<long double>(__nu, __x); }

  /**
   *   @brief  Return the regular modified Bessel function of order
   *           \f$ \nu \f$: \f$ I_{\nu}(x) \f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_i(const _Tp, const _Tp)
   */
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_i(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_i<__type>(__nu, __x);
    }

  //  5.2.1.9  Cylindrical Bessel functions (of the first kind).

  /**
   *   @brief  Return the Bessel function of order \f$ \nu \f$:
   *           \f$ J_{\nu}(x) \f$ for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_j(const _Tp, const _Tp)
   */
  inline float
  cyl_bessel_jf(float __nu, float __x)
  { return __detail::__cyl_bessel_j<float>(__nu, __x); }

  /**
   *   @brief  Return the Bessel function of order \f$ \nu \f$:
   *           \f$ J_{\nu}(x) \f$ for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_j(const _Tp, const _Tp)
   */
  inline long double
  cyl_bessel_jl(long double __nu, long double __x)
  { return __detail::__cyl_bessel_j<long double>(__nu, __x); }

  /**
   *   @brief  Return the Bessel function of order \f$ \nu \f$:
   *           \f$ J_{\nu}(x) \f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_j(const _Tp, const _Tp)
   */
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_j(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_j<__type>(__nu, __x);
    }

  //  5.2.1.10  Irregular modified cylindrical Bessel functions.

  /**
   *   @brief  Return the irregular modified Bessel function
   *           \f$ K_{\nu}(x) \f$ of order \f$ \nu \f$
   *           for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_k(const _Tp, const _Tp)
   */
  inline float
  cyl_bessel_kf(float __nu, float __x)
  { return __detail::__cyl_bessel_k<float>(__nu, __x); }

  /**
   *   @brief  Return the irregular modified Bessel function
   *           \f$ K_{\nu}(x) \f$ of order \f$ \nu \f$
   *           for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_k(const _Tp, const _Tp)
   */
  inline long double
  cyl_bessel_kl(long double __nu, long double __x)
  { return __detail::__cyl_bessel_k<long double>(__nu, __x); }

  /**
   *   @brief  Return the irregular modified Bessel function
   *           \f$ K_{\nu}(x) \f$ of order \f$ \nu \f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_bessel_k(const _Tp, const _Tp)
   */
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_k(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_k<__type>(__nu, __x);
    }

  //  5.2.1.11  Cylindrical Neumann functions.

  /**
   *   @brief  Return the Neunamm function of order \f$ \nu \f$:
   *           \f$ N_{\nu}(x) \f$ for float order and argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_neumann_n(const _Tp, const _Tp)
   */
  inline float
  cyl_neumannf(float __nu, float __x)
  { return __detail::__cyl_neumann_n<float>(__nu, __x); }

  /**
   *   @brief  Return the Neunamm function of order \f$ \nu \f$:
   *           \f$ N_{\nu}(x) \f$ for long double order and argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_neumann_n(const _Tp, const _Tp)
   */
  inline long double
  cyl_neumannl(long double __nu, long double __x)
  { return __detail::__cyl_neumann_n<long double>(__nu, __x); }

  /**
   *   @brief  Return the Neunamm function of order \f$ \nu \f$:
   *           \f$ N_{\nu}(x) \f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __cyl_neumann_n(const _Tp, const _Tp)
   */
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_neumann(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_neumann_n<__type>(__nu, __x);
    }

  //  5.2.1.12  Incomplete elliptic interals of the first kind.

  /**
   *   @brief  Return the incomplete elliptic integral of the first kind
   *           @f$ F(k,\phi) @f$ for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __ellint_1(const _Tp, const _Tp)
   */
  inline float
  ellint_1f(float __k, float __phi)
  { return __detail::__ellint_1<float>(__k, __phi); }

  /**
   *   @brief  Return the incomplete elliptic integral of the first kind
   *           @f$ F(k,\phi) @f$ for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __ellint_1(const _Tp, const _Tp)
   */
  inline long double
  ellint_1l(long double __k, long double __phi)
  { return __detail::__ellint_1<long double>(__k, __phi); }

  /**
   *   @brief  Return the incomplete elliptic integral of the first kind
   *           @f$ F(k,\phi) @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __ellint_1(const _Tp, const _Tp)
   */
  template<typename _Tp, typename _Tpp>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type
    ellint_1(_Tp __k, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;
      return __detail::__ellint_1<__type>(__k, __phi);
    }

  //  5.2.1.13  Incomplete elliptic interals of the second kind.

  /**
   *   @brief Return the incomplete elliptic integral of the second kind
   *          @f$ E(k,\phi) @f$ for float arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_2(const _Tp, const _Tp)
   */
  inline float
  ellint_2f(float __k, float __phi)
  { return __detail::__ellint_2<float>(__k, __phi); }

  /**
   *   @brief Return the incomplete elliptic integral of the second kind
   *          @f$ E(k,\phi) @f$ for long double arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_2(const _Tp, const _Tp)
   */
  inline long double
  ellint_2l(long double __k, long double __phi)
  { return __detail::__ellint_2<long double>(__k, __phi); }

  /**
   *   @brief Return the incomplete elliptic integral of the second kind
   *          @f$ E(k,\phi) @f$.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_2(const _Tp, const _Tp)
   */
  template<typename _Tp, typename _Tpp>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type
    ellint_2(_Tp __k, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;
      return __detail::__ellint_2<__type>(__k, __phi);
    }

  //  5.2.1.14  Incomplete elliptic interals of the third kind.

  /**
   *   @brief Return the incomplete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu,\phi) @f$ for float arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_3(const _Tp, const _Tp, const _Tp)
   */
  inline float
  ellint_3f(float __k, float __nu, float __phi)
  { return __detail::__ellint_3<float>(__k, __nu, __phi); }

  /**
   *   @brief Return the incomplete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu,\phi) @f$ for long double arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_3(const _Tp, const _Tp, const _Tp)
   */
  inline long double
  ellint_3l(long double __k, long double __nu, long double __phi)
  { return __detail::__ellint_3<long double>(__k, __nu, __phi); }

  /**
   *   @brief Return the incomplete elliptic integral of the third kind
   *          @f$ \Pi(k,\nu,\phi) @f$.
   *
   *   @see template<typename _Tp> _Tp
   *          __ellint_3(const _Tp, const _Tp, const _Tp)
   */
  template<typename _Tp, typename _Tpn, typename _Tpp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type
    ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type __type;
      return __detail::__ellint_3<__type>(__k, __nu, __phi);
    }

  //  5.2.1.15  Exponential integrals.

  /**
   *   @brief  Return the exponential integral @f$ Ei(x) @f$
   *           for float argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __expint(const _Tp)
   */
  inline float
  expintf(float __x)
  { return __detail::__expint<float>(__x); }

  /**
   *   @brief  Return the exponential integral @f$ Ei(x) @f$
   *           for long double argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __expint(const _Tp)
   */
  inline long double
  expintl(long double __x)
  { return __detail::__expint<long double>(__x); }

  /**
   *   @brief  Return the exponential integral @f$ Ei(x) @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __expint(const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__expint<__type>(__x);
    }

  //  5.2.1.16  Hermite polynomials.

  /**
   *   @brief This routine returns the Hermite polynomial
   *          of order n: \f$ H_n(x) \f$ for float arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_hermite(const unsigned int, const _Tp)
   */
  inline float
  hermitef(unsigned int __n, float __x)
  { return __detail::__poly_hermite<float>(__n, __x); }

  /**
   *   @brief This routine returns the Hermite polynomial
   *          of order n: \f$ H_n(x) \f$ for long double arguments.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_hermite(const unsigned int, const _Tp)
   */
  inline long double
  hermitel(unsigned int __n, long double __x)
  { return __detail::__poly_hermite<long double>(__n, __x); }

  /**
   *   @brief This routine returns the Hermite polynomial
   *          of order n: \f$ H_n(x) \f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_hermite(const unsigned int, const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    hermite(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__poly_hermite<__type>(__n, __x);
    }

  //  5.2.1.17  Hypergeometric functions.

  /**
   *   @brief Return the hypogeometric function @f$ _2F_1(a,b;c;x) @f$
   *          for float arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __hyperg(const _Tp, const _Tp, const _Tp, const _Tp)
   */
  inline float
  hypergf(float __a, float __b, float __c, float __x)
  { return __detail::__hyperg<float>(__a, __b, __c, __x); }

  /**
   *   @brief Return the hypogeometric function @f$ _2F_1(a,b;c;x) @f$
   *          for long double arguments.
   *
   *   @see template<typename _Tp> _Tp
   *          __hyperg(const _Tp, const _Tp, const _Tp, const _Tp)
   */
  inline long double
  hypergl(long double __a, long double __b, long double __c, long double __x)
  { return __detail::__hyperg<long double>(__a, __b, __c, __x); }

  /**
   *   @brief Return the hypogeometric function @f$ _2F_1(a,b;c;x) @f$.
   *
   *   @see template<typename _Tp> _Tp
   *          __hyperg(const _Tp, const _Tp, const _Tp, const _Tp)
   */
  template<typename _Tpa, typename _Tpb, typename _Tpc, typename _Tp>
    inline typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type
    hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type __type;
      return __detail::__hyperg<__type>(__a, __b, __c, __x);
    }

  //  5.2.1.18  Laguerre polynomials.

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n: @f$ L_n(x) @f$ for float argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __laguerre(const unsigned int, const _Tp)
   */
  inline float
  laguerref(unsigned int __n, float __x)
  { return __detail::__laguerre<float>(__n, __x); }

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n: @f$ L_n(x) @f$ for long double argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __laguerre(const unsigned int, const _Tp)
   */
  inline long double
  laguerrel(unsigned int __n, long double __x)
  { return __detail::__laguerre<long double>(__n, __x); }

  /**
   *   @brief This routine returns the associated Laguerre polynomial
   *          of order n: @f$ L_n(x) @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __laguerre(const unsigned int, const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    laguerre(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__laguerre<__type>(__n, __x);
    }

  //  5.2.1.19  Legendre polynomials.

  /**
   *   @brief  Return the Legendre polynomial of order @f$ l @f$
   *           for float argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_legendre_p(const unsigned int, const _Tp)
   */
  inline float
  legendref(unsigned int __n, float __x)
  { return __detail::__poly_legendre_p<float>(__n, __x); }

  /**
   *   @brief  Return the Legendre polynomial of order @f$ l @f$
   *           for long double argument.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_legendre_p(const unsigned int, const _Tp)
   */
  inline long double
  legendrel(unsigned int __n, long double __x)
  { return __detail::__poly_legendre_p<long double>(__n, __x); }

  /**
   *   @brief  Return the Legendre polynomial of order @f$ l @f$.
   *
   *   @see  template<typename _Tp> _Tp
   *           __poly_legendre_p(const unsigned int, const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    legendre(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__poly_legendre_p<__type>(__n, __x);
    }

  //  5.2.1.20  Riemann zeta function.

  /**
   *   @brief  Return the Riemann zeta function @f$ \zeta(s) @f$
   *           for float argument.
   * 
   *   @see  template<typename _Tp> _Tp
   *           __riemann_zeta(const _Tp)
   */
  inline float
  riemann_zetaf(float __x)
  { return __detail::__riemann_zeta<float>(__x); }

  /**
   *   @brief  Return the Riemann zeta function @f$ \zeta(s) @f$.
   *           for long double argument.
   * 
   *   @see  template<typename _Tp> _Tp
   *           __riemann_zeta(const _Tp)
   */
  inline long double
  riemann_zetal(long double __x)
  { return __detail::__riemann_zeta<long double>(__x); }

  /**
   *   @brief  Return the Riemann zeta function @f$ \zeta(s) @f$.
   * 
   *   @see  template<typename _Tp> _Tp
   *           __riemann_zeta(const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    riemann_zeta(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__riemann_zeta<__type>(__x);
    }

  //  5.2.1.21  Spherical Bessel functions.

  /**
   *   @brief  Return the spherical Bessel function
   *           @f$ j_n(x) @f$ of order n for float argument x.
   *
   *   @see  template <typename _Tp> _Tp
   *           __sph_bessel(const unsigned int, const _Tp)
   */
  inline float
  sph_besself(unsigned int __n, float __x)
  { return __detail::__sph_bessel<float>(__n, __x); }

  /**
   *   @brief  Return the spherical Bessel function
   *           @f$ j_n(x) @f$ of order n for long double argument x.
   *
   *   @see  template<typename _Tp> typename __gnu_cxx::__promote<_Tp>::__type
   *           __sph_bessel(unsigned int, _Tp)
   */
  inline long double
  sph_bessell(unsigned int __n, long double __x)
  { return __detail::__sph_bessel<long double>(__n, __x); }

  /**
   *   @brief  Return the spherical Bessel function
   *           @f$ j_n(x) @f$ of order n.
   *
   *   @see  template <typename _Tp> _Tp
   *           __sph_bessel(const unsigned int, const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_bessel(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_bessel<__type>(__n, __x);
    }

  //  5.2.1.22  Spherical associated Legendre functions.

  /**
   *   @brief  Return the spherical associated Legendre function
   *           for float argument.
   * 
   *   @see  template <typename _Tp> _Tp
   *           __sph_bessel(const unsigned int, const _Tp)
   */
  inline float
  sph_legendref(unsigned int __l, unsigned int __m, float __theta)
  { return __detail::__sph_legendre<float>(__l, __m, __theta); }

  /**
   *   @brief  Return the spherical associated Legendre function
   *           for long double argument.
   * 
   *   @see  template <typename _Tp> _Tp
   *           __sph_legendre(const unsigned int, const unsigned int, const _Tp)
   */
  inline long double
  sph_legendrel(unsigned int __l, unsigned int __m, long double __theta)
  { return __detail::__sph_legendre<long double>(__l, __m, __theta); }

  /**
   *   @brief  Return the spherical associated Legendre function.
   * 
   *   @see  template <typename _Tp> _Tp
   *           __sph_legendre(const unsigned int, const unsigned int, const _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_legendre(unsigned int __l, unsigned int __m, _Tp __theta)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_legendre<__type>(__l, __m, __theta);
    }

  //  5.2.1.23  Spherical Neumann functions.

  /**
   *   @brief  Return the spherical Neumann function
   *           @f$ n_n(x) @f$ of order n for float argument x.
   *
   *   @see  template<typename _Tp> typename __gnu_cxx::__promote<_Tp>::__type
   *           __sph_neumann(unsigned int, _Tp)
   */
  inline float
  sph_neumannf(unsigned int __n, float __x)
  { return __detail::__sph_neumann<float>(__n, __x); }

  /**
   *   @brief  Return the spherical Neumann function
   *           @f$ n_n(x) @f$ of order n for long double argument x.
   *
   *   @see  template<typename _Tp> typename __gnu_cxx::__promote<_Tp>::__type
   *           __sph_neumann(unsigned int, _Tp)
   */
  inline long double
  sph_neumannl(unsigned int __n, long double __x)
  { return __detail::__sph_neumann<long double>(__n, __x); }

  /**
   *   @brief  Return the spherical Neumann function
   *           @f$ n_n(x) @f$.
   *
   *   @see  template<typename _Tp> typename __gnu_cxx::__promote<_Tp>::__type
   *           __sph_neumann(unsigned int, _Tp)
   */
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_neumann(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_neumann<__type>(__n, __x);
    }

  /* @} */ // group tr1_math_spec_func
}
}

#endif // _GLIBCXX_TR1_CMATH
